// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: github.com/piotrkowalczuk/charon/pb/rpc/charond/v1/permission.proto

package charond

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PermissionManager_Register_FullMethodName = "/charon.rpc.charond.v1.PermissionManager/Register"
	PermissionManager_List_FullMethodName     = "/charon.rpc.charond.v1.PermissionManager/List"
	PermissionManager_Get_FullMethodName      = "/charon.rpc.charond.v1.PermissionManager/Get"
)

// PermissionManagerClient is the client API for PermissionManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PermissionManagerClient interface {
	Register(ctx context.Context, in *RegisterPermissionsRequest, opts ...grpc.CallOption) (*RegisterPermissionsResponse, error)
	List(ctx context.Context, in *ListPermissionsRequest, opts ...grpc.CallOption) (*ListPermissionsResponse, error)
	Get(ctx context.Context, in *GetPermissionRequest, opts ...grpc.CallOption) (*GetPermissionResponse, error)
}

type permissionManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewPermissionManagerClient(cc grpc.ClientConnInterface) PermissionManagerClient {
	return &permissionManagerClient{cc}
}

func (c *permissionManagerClient) Register(ctx context.Context, in *RegisterPermissionsRequest, opts ...grpc.CallOption) (*RegisterPermissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterPermissionsResponse)
	err := c.cc.Invoke(ctx, PermissionManager_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionManagerClient) List(ctx context.Context, in *ListPermissionsRequest, opts ...grpc.CallOption) (*ListPermissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPermissionsResponse)
	err := c.cc.Invoke(ctx, PermissionManager_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionManagerClient) Get(ctx context.Context, in *GetPermissionRequest, opts ...grpc.CallOption) (*GetPermissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPermissionResponse)
	err := c.cc.Invoke(ctx, PermissionManager_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PermissionManagerServer is the server API for PermissionManager service.
// All implementations must embed UnimplementedPermissionManagerServer
// for forward compatibility.
type PermissionManagerServer interface {
	Register(context.Context, *RegisterPermissionsRequest) (*RegisterPermissionsResponse, error)
	List(context.Context, *ListPermissionsRequest) (*ListPermissionsResponse, error)
	Get(context.Context, *GetPermissionRequest) (*GetPermissionResponse, error)
	mustEmbedUnimplementedPermissionManagerServer()
}

// UnimplementedPermissionManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPermissionManagerServer struct{}

func (UnimplementedPermissionManagerServer) Register(context.Context, *RegisterPermissionsRequest) (*RegisterPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedPermissionManagerServer) List(context.Context, *ListPermissionsRequest) (*ListPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPermissionManagerServer) Get(context.Context, *GetPermissionRequest) (*GetPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPermissionManagerServer) mustEmbedUnimplementedPermissionManagerServer() {}
func (UnimplementedPermissionManagerServer) testEmbeddedByValue()                           {}

// UnsafePermissionManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PermissionManagerServer will
// result in compilation errors.
type UnsafePermissionManagerServer interface {
	mustEmbedUnimplementedPermissionManagerServer()
}

func RegisterPermissionManagerServer(s grpc.ServiceRegistrar, srv PermissionManagerServer) {
	// If the following call pancis, it indicates UnimplementedPermissionManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PermissionManager_ServiceDesc, srv)
}

func _PermissionManager_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionManagerServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionManager_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionManagerServer).Register(ctx, req.(*RegisterPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionManager_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionManagerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionManager_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionManagerServer).List(ctx, req.(*ListPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionManager_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionManagerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionManager_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionManagerServer).Get(ctx, req.(*GetPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PermissionManager_ServiceDesc is the grpc.ServiceDesc for PermissionManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PermissionManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "charon.rpc.charond.v1.PermissionManager",
	HandlerType: (*PermissionManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _PermissionManager_Register_Handler,
		},
		{
			MethodName: "List",
			Handler:    _PermissionManager_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _PermissionManager_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/piotrkowalczuk/charon/pb/rpc/charond/v1/permission.proto",
}
