// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.2
// source: github.com/piotrkowalczuk/charon/pb/rpc/charond/v1/user.proto

package charond

import (
	reflect "reflect"
	sync "sync"

	ntypes "github.com/piotrkowalczuk/ntypes"
	qtypes "github.com/piotrkowalczuk/qtypes"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Username    string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	FirstName   string                 `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName    string                 `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	IsSuperuser bool                   `protobuf:"varint,5,opt,name=is_superuser,json=isSuperuser,proto3" json:"is_superuser,omitempty"`
	IsActive    bool                   `protobuf:"varint,6,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	IsStaff     bool                   `protobuf:"varint,7,opt,name=is_staff,json=isStaff,proto3" json:"is_staff,omitempty"`
	IsConfirmed bool                   `protobuf:"varint,8,opt,name=is_confirmed,json=isConfirmed,proto3" json:"is_confirmed,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	CreatedBy   *ntypes.Int64          `protobuf:"bytes,10,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	UpdatedBy   *ntypes.Int64          `protobuf:"bytes,12,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_rawDescGZIP(), []int{0}
}

func (x *User) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *User) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *User) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *User) GetIsSuperuser() bool {
	if x != nil {
		return x.IsSuperuser
	}
	return false
}

func (x *User) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *User) GetIsStaff() bool {
	if x != nil {
		return x.IsStaff
	}
	return false
}

func (x *User) GetIsConfirmed() bool {
	if x != nil {
		return x.IsConfirmed
	}
	return false
}

func (x *User) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *User) GetCreatedBy() *ntypes.Int64 {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *User) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *User) GetUpdatedBy() *ntypes.Int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return nil
}

type CreateUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username       string       `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	PlainPassword  string       `protobuf:"bytes,2,opt,name=plain_password,json=plainPassword,proto3" json:"plain_password,omitempty"`
	SecurePassword []byte       `protobuf:"bytes,3,opt,name=secure_password,json=securePassword,proto3" json:"secure_password,omitempty"`
	FirstName      string       `protobuf:"bytes,4,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName       string       `protobuf:"bytes,5,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	IsSuperuser    *ntypes.Bool `protobuf:"bytes,6,opt,name=is_superuser,json=isSuperuser,proto3" json:"is_superuser,omitempty"`
	IsActive       *ntypes.Bool `protobuf:"bytes,7,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	IsStaff        *ntypes.Bool `protobuf:"bytes,8,opt,name=is_staff,json=isStaff,proto3" json:"is_staff,omitempty"`
	IsConfirmed    *ntypes.Bool `protobuf:"bytes,9,opt,name=is_confirmed,json=isConfirmed,proto3" json:"is_confirmed,omitempty"`
}

func (x *CreateUserRequest) Reset() {
	*x = CreateUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserRequest) ProtoMessage() {}

func (x *CreateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserRequest.ProtoReflect.Descriptor instead.
func (*CreateUserRequest) Descriptor() ([]byte, []int) {
	return file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_rawDescGZIP(), []int{1}
}

func (x *CreateUserRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *CreateUserRequest) GetPlainPassword() string {
	if x != nil {
		return x.PlainPassword
	}
	return ""
}

func (x *CreateUserRequest) GetSecurePassword() []byte {
	if x != nil {
		return x.SecurePassword
	}
	return nil
}

func (x *CreateUserRequest) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *CreateUserRequest) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *CreateUserRequest) GetIsSuperuser() *ntypes.Bool {
	if x != nil {
		return x.IsSuperuser
	}
	return nil
}

func (x *CreateUserRequest) GetIsActive() *ntypes.Bool {
	if x != nil {
		return x.IsActive
	}
	return nil
}

func (x *CreateUserRequest) GetIsStaff() *ntypes.Bool {
	if x != nil {
		return x.IsStaff
	}
	return nil
}

func (x *CreateUserRequest) GetIsConfirmed() *ntypes.Bool {
	if x != nil {
		return x.IsConfirmed
	}
	return nil
}

type CreateUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *CreateUserResponse) Reset() {
	*x = CreateUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserResponse) ProtoMessage() {}

func (x *CreateUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserResponse.ProtoReflect.Descriptor instead.
func (*CreateUserResponse) Descriptor() ([]byte, []int) {
	return file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_rawDescGZIP(), []int{2}
}

func (x *CreateUserResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type GetUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetUserRequest) Reset() {
	*x = GetUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserRequest) ProtoMessage() {}

func (x *GetUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserRequest.ProtoReflect.Descriptor instead.
func (*GetUserRequest) Descriptor() ([]byte, []int) {
	return file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_rawDescGZIP(), []int{3}
}

func (x *GetUserRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *GetUserResponse) Reset() {
	*x = GetUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserResponse) ProtoMessage() {}

func (x *GetUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserResponse.ProtoReflect.Descriptor instead.
func (*GetUserResponse) Descriptor() ([]byte, []int) {
	return file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_rawDescGZIP(), []int{4}
}

func (x *GetUserResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type ListUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSuperuser *ntypes.Bool  `protobuf:"bytes,1,opt,name=is_superuser,json=isSuperuser,proto3" json:"is_superuser,omitempty"`
	IsStaff     *ntypes.Bool  `protobuf:"bytes,2,opt,name=is_staff,json=isStaff,proto3" json:"is_staff,omitempty"`
	CreatedBy   *qtypes.Int64 `protobuf:"bytes,3,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	Offset      *ntypes.Int64 `protobuf:"bytes,100,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit       *ntypes.Int64 `protobuf:"bytes,101,opt,name=limit,proto3" json:"limit,omitempty"`
	// Deprecated: Marked as deprecated in github.com/piotrkowalczuk/charon/pb/rpc/charond/v1/user.proto.
	Sort    map[string]bool `protobuf:"bytes,102,rep,name=sort,proto3" json:"sort,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	OrderBy []*Order        `protobuf:"bytes,103,rep,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListUsersRequest) Reset() {
	*x = ListUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUsersRequest) ProtoMessage() {}

func (x *ListUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUsersRequest.ProtoReflect.Descriptor instead.
func (*ListUsersRequest) Descriptor() ([]byte, []int) {
	return file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_rawDescGZIP(), []int{5}
}

func (x *ListUsersRequest) GetIsSuperuser() *ntypes.Bool {
	if x != nil {
		return x.IsSuperuser
	}
	return nil
}

func (x *ListUsersRequest) GetIsStaff() *ntypes.Bool {
	if x != nil {
		return x.IsStaff
	}
	return nil
}

func (x *ListUsersRequest) GetCreatedBy() *qtypes.Int64 {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *ListUsersRequest) GetOffset() *ntypes.Int64 {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *ListUsersRequest) GetLimit() *ntypes.Int64 {
	if x != nil {
		return x.Limit
	}
	return nil
}

// Deprecated: Marked as deprecated in github.com/piotrkowalczuk/charon/pb/rpc/charond/v1/user.proto.
func (x *ListUsersRequest) GetSort() map[string]bool {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *ListUsersRequest) GetOrderBy() []*Order {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

type ListUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*User `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *ListUsersResponse) Reset() {
	*x = ListUsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUsersResponse) ProtoMessage() {}

func (x *ListUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUsersResponse.ProtoReflect.Descriptor instead.
func (*ListUsersResponse) Descriptor() ([]byte, []int) {
	return file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_rawDescGZIP(), []int{6}
}

func (x *ListUsersResponse) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

type DeleteUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteUserRequest) Reset() {
	*x = DeleteUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserRequest) ProtoMessage() {}

func (x *DeleteUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserRequest.ProtoReflect.Descriptor instead.
func (*DeleteUserRequest) Descriptor() ([]byte, []int) {
	return file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteUserRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ModifyUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Username       *ntypes.String `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	PlainPassword  *ntypes.String `protobuf:"bytes,3,opt,name=plain_password,json=plainPassword,proto3" json:"plain_password,omitempty"`
	SecurePassword []byte         `protobuf:"bytes,4,opt,name=secure_password,json=securePassword,proto3" json:"secure_password,omitempty"`
	FirstName      *ntypes.String `protobuf:"bytes,5,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName       *ntypes.String `protobuf:"bytes,6,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	IsSuperuser    *ntypes.Bool   `protobuf:"bytes,7,opt,name=is_superuser,json=isSuperuser,proto3" json:"is_superuser,omitempty"`
	IsActive       *ntypes.Bool   `protobuf:"bytes,8,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	IsStaff        *ntypes.Bool   `protobuf:"bytes,9,opt,name=is_staff,json=isStaff,proto3" json:"is_staff,omitempty"`
	IsConfirmed    *ntypes.Bool   `protobuf:"bytes,10,opt,name=is_confirmed,json=isConfirmed,proto3" json:"is_confirmed,omitempty"`
}

func (x *ModifyUserRequest) Reset() {
	*x = ModifyUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyUserRequest) ProtoMessage() {}

func (x *ModifyUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyUserRequest.ProtoReflect.Descriptor instead.
func (*ModifyUserRequest) Descriptor() ([]byte, []int) {
	return file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_rawDescGZIP(), []int{8}
}

func (x *ModifyUserRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ModifyUserRequest) GetUsername() *ntypes.String {
	if x != nil {
		return x.Username
	}
	return nil
}

func (x *ModifyUserRequest) GetPlainPassword() *ntypes.String {
	if x != nil {
		return x.PlainPassword
	}
	return nil
}

func (x *ModifyUserRequest) GetSecurePassword() []byte {
	if x != nil {
		return x.SecurePassword
	}
	return nil
}

func (x *ModifyUserRequest) GetFirstName() *ntypes.String {
	if x != nil {
		return x.FirstName
	}
	return nil
}

func (x *ModifyUserRequest) GetLastName() *ntypes.String {
	if x != nil {
		return x.LastName
	}
	return nil
}

func (x *ModifyUserRequest) GetIsSuperuser() *ntypes.Bool {
	if x != nil {
		return x.IsSuperuser
	}
	return nil
}

func (x *ModifyUserRequest) GetIsActive() *ntypes.Bool {
	if x != nil {
		return x.IsActive
	}
	return nil
}

func (x *ModifyUserRequest) GetIsStaff() *ntypes.Bool {
	if x != nil {
		return x.IsStaff
	}
	return nil
}

func (x *ModifyUserRequest) GetIsConfirmed() *ntypes.Bool {
	if x != nil {
		return x.IsConfirmed
	}
	return nil
}

type ModifyUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *ModifyUserResponse) Reset() {
	*x = ModifyUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyUserResponse) ProtoMessage() {}

func (x *ModifyUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyUserResponse.ProtoReflect.Descriptor instead.
func (*ModifyUserResponse) Descriptor() ([]byte, []int) {
	return file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_rawDescGZIP(), []int{9}
}

func (x *ModifyUserResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type ListUserPermissionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ListUserPermissionsRequest) Reset() {
	*x = ListUserPermissionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserPermissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserPermissionsRequest) ProtoMessage() {}

func (x *ListUserPermissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserPermissionsRequest.ProtoReflect.Descriptor instead.
func (*ListUserPermissionsRequest) Descriptor() ([]byte, []int) {
	return file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_rawDescGZIP(), []int{10}
}

func (x *ListUserPermissionsRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ListUserPermissionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Permissions []string `protobuf:"bytes,1,rep,name=permissions,proto3" json:"permissions,omitempty"`
}

func (x *ListUserPermissionsResponse) Reset() {
	*x = ListUserPermissionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserPermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserPermissionsResponse) ProtoMessage() {}

func (x *ListUserPermissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserPermissionsResponse.ProtoReflect.Descriptor instead.
func (*ListUserPermissionsResponse) Descriptor() ([]byte, []int) {
	return file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_rawDescGZIP(), []int{11}
}

func (x *ListUserPermissionsResponse) GetPermissions() []string {
	if x != nil {
		return x.Permissions
	}
	return nil
}

type SetUserPermissionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      int64    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Permissions []string `protobuf:"bytes,2,rep,name=permissions,proto3" json:"permissions,omitempty"`
	// Force tells if permission should be created in case if it does not exists.
	Force bool `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *SetUserPermissionsRequest) Reset() {
	*x = SetUserPermissionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUserPermissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserPermissionsRequest) ProtoMessage() {}

func (x *SetUserPermissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserPermissionsRequest.ProtoReflect.Descriptor instead.
func (*SetUserPermissionsRequest) Descriptor() ([]byte, []int) {
	return file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_rawDescGZIP(), []int{12}
}

func (x *SetUserPermissionsRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SetUserPermissionsRequest) GetPermissions() []string {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *SetUserPermissionsRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type SetUserPermissionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Created   int64 `protobuf:"varint,1,opt,name=created,proto3" json:"created,omitempty"`
	Removed   int64 `protobuf:"varint,2,opt,name=removed,proto3" json:"removed,omitempty"`
	Untouched int64 `protobuf:"varint,3,opt,name=untouched,proto3" json:"untouched,omitempty"`
}

func (x *SetUserPermissionsResponse) Reset() {
	*x = SetUserPermissionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUserPermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserPermissionsResponse) ProtoMessage() {}

func (x *SetUserPermissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserPermissionsResponse.ProtoReflect.Descriptor instead.
func (*SetUserPermissionsResponse) Descriptor() ([]byte, []int) {
	return file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_rawDescGZIP(), []int{13}
}

func (x *SetUserPermissionsResponse) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *SetUserPermissionsResponse) GetRemoved() int64 {
	if x != nil {
		return x.Removed
	}
	return 0
}

func (x *SetUserPermissionsResponse) GetUntouched() int64 {
	if x != nil {
		return x.Untouched
	}
	return 0
}

type ListUserGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ListUserGroupsRequest) Reset() {
	*x = ListUserGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserGroupsRequest) ProtoMessage() {}

func (x *ListUserGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserGroupsRequest.ProtoReflect.Descriptor instead.
func (*ListUserGroupsRequest) Descriptor() ([]byte, []int) {
	return file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_rawDescGZIP(), []int{14}
}

func (x *ListUserGroupsRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ListUserGroupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups []*Group `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (x *ListUserGroupsResponse) Reset() {
	*x = ListUserGroupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserGroupsResponse) ProtoMessage() {}

func (x *ListUserGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserGroupsResponse.ProtoReflect.Descriptor instead.
func (*ListUserGroupsResponse) Descriptor() ([]byte, []int) {
	return file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_rawDescGZIP(), []int{15}
}

func (x *ListUserGroupsResponse) GetGroups() []*Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

type SetUserGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64   `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Groups []int64 `protobuf:"varint,2,rep,packed,name=groups,proto3" json:"groups,omitempty"`
}

func (x *SetUserGroupsRequest) Reset() {
	*x = SetUserGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUserGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserGroupsRequest) ProtoMessage() {}

func (x *SetUserGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserGroupsRequest.ProtoReflect.Descriptor instead.
func (*SetUserGroupsRequest) Descriptor() ([]byte, []int) {
	return file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_rawDescGZIP(), []int{16}
}

func (x *SetUserGroupsRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SetUserGroupsRequest) GetGroups() []int64 {
	if x != nil {
		return x.Groups
	}
	return nil
}

type SetUserGroupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Created   int64 `protobuf:"varint,1,opt,name=created,proto3" json:"created,omitempty"`
	Removed   int64 `protobuf:"varint,2,opt,name=removed,proto3" json:"removed,omitempty"`
	Untouched int64 `protobuf:"varint,3,opt,name=untouched,proto3" json:"untouched,omitempty"`
}

func (x *SetUserGroupsResponse) Reset() {
	*x = SetUserGroupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUserGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserGroupsResponse) ProtoMessage() {}

func (x *SetUserGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserGroupsResponse.ProtoReflect.Descriptor instead.
func (*SetUserGroupsResponse) Descriptor() ([]byte, []int) {
	return file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_rawDescGZIP(), []int{17}
}

func (x *SetUserGroupsResponse) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *SetUserGroupsResponse) GetRemoved() int64 {
	if x != nil {
		return x.Removed
	}
	return 0
}

func (x *SetUserGroupsResponse) GetUntouched() int64 {
	if x != nil {
		return x.Untouched
	}
	return 0
}

var File_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto protoreflect.FileDescriptor

var file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_rawDesc = []byte{
	0x0a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x69, 0x6f,
	0x74, 0x72, 0x6b, 0x6f, 0x77, 0x61, 0x6c, 0x63, 0x7a, 0x75, 0x6b, 0x2f, 0x63, 0x68, 0x61, 0x72,
	0x6f, 0x6e, 0x2f, 0x70, 0x62, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e,
	0x64, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x15, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x72,
	0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x69, 0x6f, 0x74, 0x72, 0x6b, 0x6f, 0x77, 0x61, 0x6c, 0x63, 0x7a,
	0x75, 0x6b, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x2f, 0x70, 0x62, 0x2f, 0x72, 0x70, 0x63,
	0x2f, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x69, 0x6f, 0x74, 0x72, 0x6b, 0x6f, 0x77, 0x61, 0x6c, 0x63,
	0x7a, 0x75, 0x6b, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x2f, 0x70, 0x62, 0x2f, 0x72, 0x70,
	0x63, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x71, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2f, 0x71, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x6e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xbe, 0x03, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x75, 0x70,
	0x65, 0x72, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x66, 0x66, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x53, 0x74, 0x61, 0x66, 0x66, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65,
	0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x22, 0xf1, 0x02, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2f, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x75, 0x70, 0x65, 0x72, 0x75, 0x73,
	0x65, 0x72, 0x12, 0x29, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x27, 0x0a,
	0x08, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x66, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x07, 0x69,
	0x73, 0x53, 0x74, 0x61, 0x66, 0x66, 0x12, 0x2f, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x0b, 0x69, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x22, 0x45, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68,
	0x61, 0x72, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x20,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x42, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63,
	0x68, 0x61, 0x72, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x22, 0xa9, 0x03, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x0c, 0x69, 0x73, 0x5f,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x0b, 0x69,
	0x73, 0x53, 0x75, 0x70, 0x65, 0x72, 0x75, 0x73, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x08, 0x69, 0x73,
	0x5f, 0x73, 0x74, 0x61, 0x66, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x07, 0x69, 0x73, 0x53, 0x74,
	0x61, 0x66, 0x66, 0x12, 0x2c, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x71, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x25, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x49, 0x0a,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x66, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x68,
	0x61, 0x72, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x62, 0x79, 0x18, 0x67, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61,
	0x72, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x1a, 0x37, 0x0a, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x64,
	0x22, 0x46, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x23, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc1, 0x03,
	0x0a, 0x11, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x35, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x2d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b,
	0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x0c, 0x69,
	0x73, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x75, 0x73, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52,
	0x0b, 0x69, 0x73, 0x53, 0x75, 0x70, 0x65, 0x72, 0x75, 0x73, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x09,
	0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x08, 0x69,
	0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x73, 0x74,
	0x61, 0x66, 0x66, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x07, 0x69, 0x73, 0x53, 0x74, 0x61, 0x66, 0x66,
	0x12, 0x2f, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x0b, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65,
	0x64, 0x22, 0x45, 0x0a, 0x12, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x2c, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3f, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x6c, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x6e, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x74, 0x6f, 0x75,
	0x63, 0x68, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x6e, 0x74, 0x6f,
	0x75, 0x63, 0x68, 0x65, 0x64, 0x22, 0x27, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4e,
	0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f,
	0x6e, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x47,
	0x0a, 0x14, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x69, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x6e, 0x74, 0x6f, 0x75, 0x63, 0x68,
	0x65, 0x64, 0x32, 0xa2, 0x07, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x12, 0x5f, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x63,
	0x68, 0x61, 0x72, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x06, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x12, 0x28, 0x2e,
	0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x25, 0x2e, 0x63, 0x68,
	0x61, 0x72, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x04,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x06, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x0f, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31,
	0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x72,
	0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x32, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63,
	0x68, 0x61, 0x72, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x2e, 0x63, 0x68, 0x61, 0x72,
	0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x63, 0x68,
	0x61, 0x72, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x6b, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x2c,
	0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x72,
	0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63,
	0x68, 0x61, 0x72, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a,
	0x09, 0x53, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x2b, 0x2e, 0x63, 0x68, 0x61,
	0x72, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x60, 0x0a, 0x20, 0x63, 0x6f, 0x6d, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x3a, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x69, 0x6f, 0x74, 0x72, 0x6b,
	0x6f, 0x77, 0x61, 0x6c, 0x63, 0x7a, 0x75, 0x6b, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x2f,
	0x70, 0x62, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x64, 0x2f, 0x76,
	0x31, 0x3b, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_rawDescOnce sync.Once
	file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_rawDescData = file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_rawDesc
)

func file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_rawDescGZIP() []byte {
	file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_rawDescOnce.Do(func() {
		file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_rawDescData)
	})
	return file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_rawDescData
}

var file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_goTypes = []any{
	(*User)(nil),                        // 0: charon.rpc.charond.v1.User
	(*CreateUserRequest)(nil),           // 1: charon.rpc.charond.v1.CreateUserRequest
	(*CreateUserResponse)(nil),          // 2: charon.rpc.charond.v1.CreateUserResponse
	(*GetUserRequest)(nil),              // 3: charon.rpc.charond.v1.GetUserRequest
	(*GetUserResponse)(nil),             // 4: charon.rpc.charond.v1.GetUserResponse
	(*ListUsersRequest)(nil),            // 5: charon.rpc.charond.v1.ListUsersRequest
	(*ListUsersResponse)(nil),           // 6: charon.rpc.charond.v1.ListUsersResponse
	(*DeleteUserRequest)(nil),           // 7: charon.rpc.charond.v1.DeleteUserRequest
	(*ModifyUserRequest)(nil),           // 8: charon.rpc.charond.v1.ModifyUserRequest
	(*ModifyUserResponse)(nil),          // 9: charon.rpc.charond.v1.ModifyUserResponse
	(*ListUserPermissionsRequest)(nil),  // 10: charon.rpc.charond.v1.ListUserPermissionsRequest
	(*ListUserPermissionsResponse)(nil), // 11: charon.rpc.charond.v1.ListUserPermissionsResponse
	(*SetUserPermissionsRequest)(nil),   // 12: charon.rpc.charond.v1.SetUserPermissionsRequest
	(*SetUserPermissionsResponse)(nil),  // 13: charon.rpc.charond.v1.SetUserPermissionsResponse
	(*ListUserGroupsRequest)(nil),       // 14: charon.rpc.charond.v1.ListUserGroupsRequest
	(*ListUserGroupsResponse)(nil),      // 15: charon.rpc.charond.v1.ListUserGroupsResponse
	(*SetUserGroupsRequest)(nil),        // 16: charon.rpc.charond.v1.SetUserGroupsRequest
	(*SetUserGroupsResponse)(nil),       // 17: charon.rpc.charond.v1.SetUserGroupsResponse
	nil,                                 // 18: charon.rpc.charond.v1.ListUsersRequest.SortEntry
	(*timestamppb.Timestamp)(nil),       // 19: google.protobuf.Timestamp
	(*ntypes.Int64)(nil),                // 20: ntypes.Int64
	(*ntypes.Bool)(nil),                 // 21: ntypes.Bool
	(*qtypes.Int64)(nil),                // 22: qtypes.Int64
	(*Order)(nil),                       // 23: charon.rpc.charond.v1.Order
	(*ntypes.String)(nil),               // 24: ntypes.String
	(*Group)(nil),                       // 25: charon.rpc.charond.v1.Group
	(*wrapperspb.BoolValue)(nil),        // 26: google.protobuf.BoolValue
}
var file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_depIdxs = []int32{
	19, // 0: charon.rpc.charond.v1.User.created_at:type_name -> google.protobuf.Timestamp
	20, // 1: charon.rpc.charond.v1.User.created_by:type_name -> ntypes.Int64
	19, // 2: charon.rpc.charond.v1.User.updated_at:type_name -> google.protobuf.Timestamp
	20, // 3: charon.rpc.charond.v1.User.updated_by:type_name -> ntypes.Int64
	21, // 4: charon.rpc.charond.v1.CreateUserRequest.is_superuser:type_name -> ntypes.Bool
	21, // 5: charon.rpc.charond.v1.CreateUserRequest.is_active:type_name -> ntypes.Bool
	21, // 6: charon.rpc.charond.v1.CreateUserRequest.is_staff:type_name -> ntypes.Bool
	21, // 7: charon.rpc.charond.v1.CreateUserRequest.is_confirmed:type_name -> ntypes.Bool
	0,  // 8: charon.rpc.charond.v1.CreateUserResponse.user:type_name -> charon.rpc.charond.v1.User
	0,  // 9: charon.rpc.charond.v1.GetUserResponse.user:type_name -> charon.rpc.charond.v1.User
	21, // 10: charon.rpc.charond.v1.ListUsersRequest.is_superuser:type_name -> ntypes.Bool
	21, // 11: charon.rpc.charond.v1.ListUsersRequest.is_staff:type_name -> ntypes.Bool
	22, // 12: charon.rpc.charond.v1.ListUsersRequest.created_by:type_name -> qtypes.Int64
	20, // 13: charon.rpc.charond.v1.ListUsersRequest.offset:type_name -> ntypes.Int64
	20, // 14: charon.rpc.charond.v1.ListUsersRequest.limit:type_name -> ntypes.Int64
	18, // 15: charon.rpc.charond.v1.ListUsersRequest.sort:type_name -> charon.rpc.charond.v1.ListUsersRequest.SortEntry
	23, // 16: charon.rpc.charond.v1.ListUsersRequest.order_by:type_name -> charon.rpc.charond.v1.Order
	0,  // 17: charon.rpc.charond.v1.ListUsersResponse.users:type_name -> charon.rpc.charond.v1.User
	24, // 18: charon.rpc.charond.v1.ModifyUserRequest.username:type_name -> ntypes.String
	24, // 19: charon.rpc.charond.v1.ModifyUserRequest.plain_password:type_name -> ntypes.String
	24, // 20: charon.rpc.charond.v1.ModifyUserRequest.first_name:type_name -> ntypes.String
	24, // 21: charon.rpc.charond.v1.ModifyUserRequest.last_name:type_name -> ntypes.String
	21, // 22: charon.rpc.charond.v1.ModifyUserRequest.is_superuser:type_name -> ntypes.Bool
	21, // 23: charon.rpc.charond.v1.ModifyUserRequest.is_active:type_name -> ntypes.Bool
	21, // 24: charon.rpc.charond.v1.ModifyUserRequest.is_staff:type_name -> ntypes.Bool
	21, // 25: charon.rpc.charond.v1.ModifyUserRequest.is_confirmed:type_name -> ntypes.Bool
	0,  // 26: charon.rpc.charond.v1.ModifyUserResponse.user:type_name -> charon.rpc.charond.v1.User
	25, // 27: charon.rpc.charond.v1.ListUserGroupsResponse.groups:type_name -> charon.rpc.charond.v1.Group
	1,  // 28: charon.rpc.charond.v1.UserManager.Create:input_type -> charon.rpc.charond.v1.CreateUserRequest
	8,  // 29: charon.rpc.charond.v1.UserManager.Modify:input_type -> charon.rpc.charond.v1.ModifyUserRequest
	3,  // 30: charon.rpc.charond.v1.UserManager.Get:input_type -> charon.rpc.charond.v1.GetUserRequest
	5,  // 31: charon.rpc.charond.v1.UserManager.List:input_type -> charon.rpc.charond.v1.ListUsersRequest
	7,  // 32: charon.rpc.charond.v1.UserManager.Delete:input_type -> charon.rpc.charond.v1.DeleteUserRequest
	10, // 33: charon.rpc.charond.v1.UserManager.ListPermissions:input_type -> charon.rpc.charond.v1.ListUserPermissionsRequest
	12, // 34: charon.rpc.charond.v1.UserManager.SetPermissions:input_type -> charon.rpc.charond.v1.SetUserPermissionsRequest
	14, // 35: charon.rpc.charond.v1.UserManager.ListGroups:input_type -> charon.rpc.charond.v1.ListUserGroupsRequest
	16, // 36: charon.rpc.charond.v1.UserManager.SetGroups:input_type -> charon.rpc.charond.v1.SetUserGroupsRequest
	2,  // 37: charon.rpc.charond.v1.UserManager.Create:output_type -> charon.rpc.charond.v1.CreateUserResponse
	9,  // 38: charon.rpc.charond.v1.UserManager.Modify:output_type -> charon.rpc.charond.v1.ModifyUserResponse
	4,  // 39: charon.rpc.charond.v1.UserManager.Get:output_type -> charon.rpc.charond.v1.GetUserResponse
	6,  // 40: charon.rpc.charond.v1.UserManager.List:output_type -> charon.rpc.charond.v1.ListUsersResponse
	26, // 41: charon.rpc.charond.v1.UserManager.Delete:output_type -> google.protobuf.BoolValue
	11, // 42: charon.rpc.charond.v1.UserManager.ListPermissions:output_type -> charon.rpc.charond.v1.ListUserPermissionsResponse
	13, // 43: charon.rpc.charond.v1.UserManager.SetPermissions:output_type -> charon.rpc.charond.v1.SetUserPermissionsResponse
	15, // 44: charon.rpc.charond.v1.UserManager.ListGroups:output_type -> charon.rpc.charond.v1.ListUserGroupsResponse
	17, // 45: charon.rpc.charond.v1.UserManager.SetGroups:output_type -> charon.rpc.charond.v1.SetUserGroupsResponse
	37, // [37:46] is the sub-list for method output_type
	28, // [28:37] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_init() }
func file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_init() {
	if File_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto != nil {
		return
	}
	file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_common_proto_init()
	file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_group_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CreateUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CreateUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GetUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ListUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ListUsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*ModifyUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ModifyUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*ListUserPermissionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*ListUserPermissionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*SetUserPermissionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*SetUserPermissionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*ListUserGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*ListUserGroupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*SetUserGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*SetUserGroupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_goTypes,
		DependencyIndexes: file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_depIdxs,
		MessageInfos:      file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_msgTypes,
	}.Build()
	File_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto = out.File
	file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_rawDesc = nil
	file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_goTypes = nil
	file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_user_proto_depIdxs = nil
}
