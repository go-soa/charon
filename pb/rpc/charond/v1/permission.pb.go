// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.2
// source: github.com/piotrkowalczuk/charon/pb/rpc/charond/v1/permission.proto

package charond

import (
	reflect "reflect"
	sync "sync"

	ntypes "github.com/piotrkowalczuk/ntypes"
	qtypes "github.com/piotrkowalczuk/qtypes"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RegisterPermissionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Permissions []string `protobuf:"bytes,1,rep,name=permissions,proto3" json:"permissions,omitempty"`
}

func (x *RegisterPermissionsRequest) Reset() {
	*x = RegisterPermissionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_permission_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterPermissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterPermissionsRequest) ProtoMessage() {}

func (x *RegisterPermissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_permission_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterPermissionsRequest.ProtoReflect.Descriptor instead.
func (*RegisterPermissionsRequest) Descriptor() ([]byte, []int) {
	return file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_permission_proto_rawDescGZIP(), []int{0}
}

func (x *RegisterPermissionsRequest) GetPermissions() []string {
	if x != nil {
		return x.Permissions
	}
	return nil
}

type RegisterPermissionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Created   int64 `protobuf:"varint,1,opt,name=created,proto3" json:"created,omitempty"`
	Removed   int64 `protobuf:"varint,2,opt,name=removed,proto3" json:"removed,omitempty"`
	Untouched int64 `protobuf:"varint,3,opt,name=untouched,proto3" json:"untouched,omitempty"`
}

func (x *RegisterPermissionsResponse) Reset() {
	*x = RegisterPermissionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_permission_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterPermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterPermissionsResponse) ProtoMessage() {}

func (x *RegisterPermissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_permission_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterPermissionsResponse.ProtoReflect.Descriptor instead.
func (*RegisterPermissionsResponse) Descriptor() ([]byte, []int) {
	return file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_permission_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterPermissionsResponse) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *RegisterPermissionsResponse) GetRemoved() int64 {
	if x != nil {
		return x.Removed
	}
	return 0
}

func (x *RegisterPermissionsResponse) GetUntouched() int64 {
	if x != nil {
		return x.Untouched
	}
	return 0
}

type ListPermissionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subsystem *qtypes.String    `protobuf:"bytes,1,opt,name=subsystem,proto3" json:"subsystem,omitempty"`
	Module    *qtypes.String    `protobuf:"bytes,2,opt,name=module,proto3" json:"module,omitempty"`
	Action    *qtypes.String    `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	CreatedAt *qtypes.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	CreatedBy *qtypes.Int64     `protobuf:"bytes,5,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	Offset    *ntypes.Int64     `protobuf:"bytes,100,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit     *ntypes.Int64     `protobuf:"bytes,101,opt,name=limit,proto3" json:"limit,omitempty"`
	// Deprecated: Marked as deprecated in github.com/piotrkowalczuk/charon/pb/rpc/charond/v1/permission.proto.
	Sort    map[string]bool `protobuf:"bytes,102,rep,name=sort,proto3" json:"sort,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	OrderBy []*Order        `protobuf:"bytes,103,rep,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListPermissionsRequest) Reset() {
	*x = ListPermissionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_permission_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPermissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPermissionsRequest) ProtoMessage() {}

func (x *ListPermissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_permission_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPermissionsRequest.ProtoReflect.Descriptor instead.
func (*ListPermissionsRequest) Descriptor() ([]byte, []int) {
	return file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_permission_proto_rawDescGZIP(), []int{2}
}

func (x *ListPermissionsRequest) GetSubsystem() *qtypes.String {
	if x != nil {
		return x.Subsystem
	}
	return nil
}

func (x *ListPermissionsRequest) GetModule() *qtypes.String {
	if x != nil {
		return x.Module
	}
	return nil
}

func (x *ListPermissionsRequest) GetAction() *qtypes.String {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *ListPermissionsRequest) GetCreatedAt() *qtypes.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ListPermissionsRequest) GetCreatedBy() *qtypes.Int64 {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *ListPermissionsRequest) GetOffset() *ntypes.Int64 {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *ListPermissionsRequest) GetLimit() *ntypes.Int64 {
	if x != nil {
		return x.Limit
	}
	return nil
}

// Deprecated: Marked as deprecated in github.com/piotrkowalczuk/charon/pb/rpc/charond/v1/permission.proto.
func (x *ListPermissionsRequest) GetSort() map[string]bool {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *ListPermissionsRequest) GetOrderBy() []*Order {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

type ListPermissionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Permissions []string `protobuf:"bytes,1,rep,name=permissions,proto3" json:"permissions,omitempty"`
}

func (x *ListPermissionsResponse) Reset() {
	*x = ListPermissionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_permission_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPermissionsResponse) ProtoMessage() {}

func (x *ListPermissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_permission_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPermissionsResponse.ProtoReflect.Descriptor instead.
func (*ListPermissionsResponse) Descriptor() ([]byte, []int) {
	return file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_permission_proto_rawDescGZIP(), []int{3}
}

func (x *ListPermissionsResponse) GetPermissions() []string {
	if x != nil {
		return x.Permissions
	}
	return nil
}

type GetPermissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetPermissionRequest) Reset() {
	*x = GetPermissionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_permission_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPermissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPermissionRequest) ProtoMessage() {}

func (x *GetPermissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_permission_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPermissionRequest.ProtoReflect.Descriptor instead.
func (*GetPermissionRequest) Descriptor() ([]byte, []int) {
	return file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_permission_proto_rawDescGZIP(), []int{4}
}

func (x *GetPermissionRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetPermissionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Permission string `protobuf:"bytes,1,opt,name=permission,proto3" json:"permission,omitempty"`
}

func (x *GetPermissionResponse) Reset() {
	*x = GetPermissionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_permission_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPermissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPermissionResponse) ProtoMessage() {}

func (x *GetPermissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_permission_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPermissionResponse.ProtoReflect.Descriptor instead.
func (*GetPermissionResponse) Descriptor() ([]byte, []int) {
	return file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_permission_proto_rawDescGZIP(), []int{5}
}

func (x *GetPermissionResponse) GetPermission() string {
	if x != nil {
		return x.Permission
	}
	return ""
}

var File_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_permission_proto protoreflect.FileDescriptor

var file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_permission_proto_rawDesc = []byte{
	0x0a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x69, 0x6f,
	0x74, 0x72, 0x6b, 0x6f, 0x77, 0x61, 0x6c, 0x63, 0x7a, 0x75, 0x6b, 0x2f, 0x63, 0x68, 0x61, 0x72,
	0x6f, 0x6e, 0x2f, 0x70, 0x62, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e,
	0x64, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x1a, 0x3f, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x69, 0x6f, 0x74, 0x72, 0x6b, 0x6f,
	0x77, 0x61, 0x6c, 0x63, 0x7a, 0x75, 0x6b, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x2f, 0x70,
	0x62, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x64, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x71,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x71, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x13, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3e, 0x0a, 0x1a, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x6f, 0x0a, 0x1b, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e,
	0x74, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75,
	0x6e, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x64, 0x22, 0x8b, 0x04, 0x0a, 0x16, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x71, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x12, 0x26, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x71, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x71, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x30, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x71, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x71, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x25, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x4f, 0x0a,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x66, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x68,
	0x61, 0x72, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x02, 0x18, 0x01, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x37,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x67, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x68,
	0x61, 0x72, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x1a, 0x37, 0x0a, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x4a, 0x04, 0x08, 0x06, 0x10, 0x64, 0x22, 0x3b, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x26, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x37, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x32, 0xd5, 0x02, 0x0a, 0x11, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x73, 0x0a, 0x08, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x31, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x63, 0x68, 0x61, 0x72,
	0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x67, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12,
	0x2b, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61,
	0x72, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x63,
	0x68, 0x61, 0x72, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x60, 0x0a, 0x20,
	0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f,
	0x6e, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31,
	0x50, 0x01, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70,
	0x69, 0x6f, 0x74, 0x72, 0x6b, 0x6f, 0x77, 0x61, 0x6c, 0x63, 0x7a, 0x75, 0x6b, 0x2f, 0x63, 0x68,
	0x61, 0x72, 0x6f, 0x6e, 0x2f, 0x70, 0x62, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x68, 0x61, 0x72,
	0x6f, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x64, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_permission_proto_rawDescOnce sync.Once
	file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_permission_proto_rawDescData = file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_permission_proto_rawDesc
)

func file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_permission_proto_rawDescGZIP() []byte {
	file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_permission_proto_rawDescOnce.Do(func() {
		file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_permission_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_permission_proto_rawDescData)
	})
	return file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_permission_proto_rawDescData
}

var file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_permission_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_permission_proto_goTypes = []any{
	(*RegisterPermissionsRequest)(nil),  // 0: charon.rpc.charond.v1.RegisterPermissionsRequest
	(*RegisterPermissionsResponse)(nil), // 1: charon.rpc.charond.v1.RegisterPermissionsResponse
	(*ListPermissionsRequest)(nil),      // 2: charon.rpc.charond.v1.ListPermissionsRequest
	(*ListPermissionsResponse)(nil),     // 3: charon.rpc.charond.v1.ListPermissionsResponse
	(*GetPermissionRequest)(nil),        // 4: charon.rpc.charond.v1.GetPermissionRequest
	(*GetPermissionResponse)(nil),       // 5: charon.rpc.charond.v1.GetPermissionResponse
	nil,                                 // 6: charon.rpc.charond.v1.ListPermissionsRequest.SortEntry
	(*qtypes.String)(nil),               // 7: qtypes.String
	(*qtypes.Timestamp)(nil),            // 8: qtypes.Timestamp
	(*qtypes.Int64)(nil),                // 9: qtypes.Int64
	(*ntypes.Int64)(nil),                // 10: ntypes.Int64
	(*Order)(nil),                       // 11: charon.rpc.charond.v1.Order
}
var file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_permission_proto_depIdxs = []int32{
	7,  // 0: charon.rpc.charond.v1.ListPermissionsRequest.subsystem:type_name -> qtypes.String
	7,  // 1: charon.rpc.charond.v1.ListPermissionsRequest.module:type_name -> qtypes.String
	7,  // 2: charon.rpc.charond.v1.ListPermissionsRequest.action:type_name -> qtypes.String
	8,  // 3: charon.rpc.charond.v1.ListPermissionsRequest.created_at:type_name -> qtypes.Timestamp
	9,  // 4: charon.rpc.charond.v1.ListPermissionsRequest.created_by:type_name -> qtypes.Int64
	10, // 5: charon.rpc.charond.v1.ListPermissionsRequest.offset:type_name -> ntypes.Int64
	10, // 6: charon.rpc.charond.v1.ListPermissionsRequest.limit:type_name -> ntypes.Int64
	6,  // 7: charon.rpc.charond.v1.ListPermissionsRequest.sort:type_name -> charon.rpc.charond.v1.ListPermissionsRequest.SortEntry
	11, // 8: charon.rpc.charond.v1.ListPermissionsRequest.order_by:type_name -> charon.rpc.charond.v1.Order
	0,  // 9: charon.rpc.charond.v1.PermissionManager.Register:input_type -> charon.rpc.charond.v1.RegisterPermissionsRequest
	2,  // 10: charon.rpc.charond.v1.PermissionManager.List:input_type -> charon.rpc.charond.v1.ListPermissionsRequest
	4,  // 11: charon.rpc.charond.v1.PermissionManager.Get:input_type -> charon.rpc.charond.v1.GetPermissionRequest
	1,  // 12: charon.rpc.charond.v1.PermissionManager.Register:output_type -> charon.rpc.charond.v1.RegisterPermissionsResponse
	3,  // 13: charon.rpc.charond.v1.PermissionManager.List:output_type -> charon.rpc.charond.v1.ListPermissionsResponse
	5,  // 14: charon.rpc.charond.v1.PermissionManager.Get:output_type -> charon.rpc.charond.v1.GetPermissionResponse
	12, // [12:15] is the sub-list for method output_type
	9,  // [9:12] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_permission_proto_init() }
func file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_permission_proto_init() {
	if File_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_permission_proto != nil {
		return
	}
	file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_permission_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*RegisterPermissionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_permission_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*RegisterPermissionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_permission_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ListPermissionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_permission_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ListPermissionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_permission_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GetPermissionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_permission_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GetPermissionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_permission_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_permission_proto_goTypes,
		DependencyIndexes: file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_permission_proto_depIdxs,
		MessageInfos:      file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_permission_proto_msgTypes,
	}.Build()
	File_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_permission_proto = out.File
	file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_permission_proto_rawDesc = nil
	file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_permission_proto_goTypes = nil
	file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_permission_proto_depIdxs = nil
}
