// Code generated by protoc-gen-go. DO NOT EDIT.
// source: group.proto

package charonrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf2 "github.com/golang/protobuf/ptypes/timestamp"
import google_protobuf1 "github.com/golang/protobuf/ptypes/wrappers"
import ntypes "github.com/piotrkowalczuk/ntypes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Group struct {
	Id          int64                       `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name        string                      `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Description string                      `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	CreatedAt   *google_protobuf2.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	CreatedBy   *ntypes.Int64               `protobuf:"bytes,5,opt,name=created_by,json=createdBy" json:"created_by,omitempty"`
	UpdatedAt   *google_protobuf2.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
	UpdatedBy   *ntypes.Int64               `protobuf:"bytes,7,opt,name=updated_by,json=updatedBy" json:"updated_by,omitempty"`
}

func (m *Group) Reset()                    { *m = Group{} }
func (m *Group) String() string            { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()               {}
func (*Group) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Group) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Group) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Group) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Group) GetCreatedAt() *google_protobuf2.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Group) GetCreatedBy() *ntypes.Int64 {
	if m != nil {
		return m.CreatedBy
	}
	return nil
}

func (m *Group) GetUpdatedAt() *google_protobuf2.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Group) GetUpdatedBy() *ntypes.Int64 {
	if m != nil {
		return m.UpdatedBy
	}
	return nil
}

type CreateGroupRequest struct {
	Name        string         `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Description *ntypes.String `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
}

func (m *CreateGroupRequest) Reset()                    { *m = CreateGroupRequest{} }
func (m *CreateGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateGroupRequest) ProtoMessage()               {}
func (*CreateGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *CreateGroupRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateGroupRequest) GetDescription() *ntypes.String {
	if m != nil {
		return m.Description
	}
	return nil
}

type CreateGroupResponse struct {
	Group *Group `protobuf:"bytes,1,opt,name=group" json:"group,omitempty"`
}

func (m *CreateGroupResponse) Reset()                    { *m = CreateGroupResponse{} }
func (m *CreateGroupResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateGroupResponse) ProtoMessage()               {}
func (*CreateGroupResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *CreateGroupResponse) GetGroup() *Group {
	if m != nil {
		return m.Group
	}
	return nil
}

type GetGroupRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetGroupRequest) Reset()                    { *m = GetGroupRequest{} }
func (m *GetGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*GetGroupRequest) ProtoMessage()               {}
func (*GetGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *GetGroupRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetGroupResponse struct {
	Group *Group `protobuf:"bytes,1,opt,name=group" json:"group,omitempty"`
}

func (m *GetGroupResponse) Reset()                    { *m = GetGroupResponse{} }
func (m *GetGroupResponse) String() string            { return proto.CompactTextString(m) }
func (*GetGroupResponse) ProtoMessage()               {}
func (*GetGroupResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *GetGroupResponse) GetGroup() *Group {
	if m != nil {
		return m.Group
	}
	return nil
}

type ListGroupsRequest struct {
	Offset *ntypes.Int64 `protobuf:"bytes,100,opt,name=offset" json:"offset,omitempty"`
	Limit  *ntypes.Int64 `protobuf:"bytes,101,opt,name=limit" json:"limit,omitempty"`
}

func (m *ListGroupsRequest) Reset()                    { *m = ListGroupsRequest{} }
func (m *ListGroupsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListGroupsRequest) ProtoMessage()               {}
func (*ListGroupsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *ListGroupsRequest) GetOffset() *ntypes.Int64 {
	if m != nil {
		return m.Offset
	}
	return nil
}

func (m *ListGroupsRequest) GetLimit() *ntypes.Int64 {
	if m != nil {
		return m.Limit
	}
	return nil
}

type ListGroupsResponse struct {
	Groups []*Group `protobuf:"bytes,1,rep,name=groups" json:"groups,omitempty"`
}

func (m *ListGroupsResponse) Reset()                    { *m = ListGroupsResponse{} }
func (m *ListGroupsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListGroupsResponse) ProtoMessage()               {}
func (*ListGroupsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *ListGroupsResponse) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

type DeleteGroupRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteGroupRequest) Reset()                    { *m = DeleteGroupRequest{} }
func (m *DeleteGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteGroupRequest) ProtoMessage()               {}
func (*DeleteGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *DeleteGroupRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ModifyGroupRequest struct {
	Id          int64          `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name        *ntypes.String `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Description *ntypes.String `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
}

func (m *ModifyGroupRequest) Reset()                    { *m = ModifyGroupRequest{} }
func (m *ModifyGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*ModifyGroupRequest) ProtoMessage()               {}
func (*ModifyGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *ModifyGroupRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ModifyGroupRequest) GetName() *ntypes.String {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *ModifyGroupRequest) GetDescription() *ntypes.String {
	if m != nil {
		return m.Description
	}
	return nil
}

type ModifyGroupResponse struct {
	Group *Group `protobuf:"bytes,1,opt,name=group" json:"group,omitempty"`
}

func (m *ModifyGroupResponse) Reset()                    { *m = ModifyGroupResponse{} }
func (m *ModifyGroupResponse) String() string            { return proto.CompactTextString(m) }
func (*ModifyGroupResponse) ProtoMessage()               {}
func (*ModifyGroupResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *ModifyGroupResponse) GetGroup() *Group {
	if m != nil {
		return m.Group
	}
	return nil
}

type SetGroupPermissionsRequest struct {
	GroupId     int64    `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	Permissions []string `protobuf:"bytes,2,rep,name=permissions" json:"permissions,omitempty"`
}

func (m *SetGroupPermissionsRequest) Reset()                    { *m = SetGroupPermissionsRequest{} }
func (m *SetGroupPermissionsRequest) String() string            { return proto.CompactTextString(m) }
func (*SetGroupPermissionsRequest) ProtoMessage()               {}
func (*SetGroupPermissionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *SetGroupPermissionsRequest) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *SetGroupPermissionsRequest) GetPermissions() []string {
	if m != nil {
		return m.Permissions
	}
	return nil
}

type SetGroupPermissionsResponse struct {
	Created   int64 `protobuf:"varint,1,opt,name=created" json:"created,omitempty"`
	Removed   int64 `protobuf:"varint,2,opt,name=removed" json:"removed,omitempty"`
	Untouched int64 `protobuf:"varint,3,opt,name=untouched" json:"untouched,omitempty"`
}

func (m *SetGroupPermissionsResponse) Reset()                    { *m = SetGroupPermissionsResponse{} }
func (m *SetGroupPermissionsResponse) String() string            { return proto.CompactTextString(m) }
func (*SetGroupPermissionsResponse) ProtoMessage()               {}
func (*SetGroupPermissionsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *SetGroupPermissionsResponse) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *SetGroupPermissionsResponse) GetRemoved() int64 {
	if m != nil {
		return m.Removed
	}
	return 0
}

func (m *SetGroupPermissionsResponse) GetUntouched() int64 {
	if m != nil {
		return m.Untouched
	}
	return 0
}

type ListGroupPermissionsRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *ListGroupPermissionsRequest) Reset()                    { *m = ListGroupPermissionsRequest{} }
func (m *ListGroupPermissionsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListGroupPermissionsRequest) ProtoMessage()               {}
func (*ListGroupPermissionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

func (m *ListGroupPermissionsRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ListGroupPermissionsResponse struct {
	Permissions []string `protobuf:"bytes,1,rep,name=permissions" json:"permissions,omitempty"`
}

func (m *ListGroupPermissionsResponse) Reset()                    { *m = ListGroupPermissionsResponse{} }
func (m *ListGroupPermissionsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListGroupPermissionsResponse) ProtoMessage()               {}
func (*ListGroupPermissionsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

func (m *ListGroupPermissionsResponse) GetPermissions() []string {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func init() {
	proto.RegisterType((*Group)(nil), "charonrpc.Group")
	proto.RegisterType((*CreateGroupRequest)(nil), "charonrpc.CreateGroupRequest")
	proto.RegisterType((*CreateGroupResponse)(nil), "charonrpc.CreateGroupResponse")
	proto.RegisterType((*GetGroupRequest)(nil), "charonrpc.GetGroupRequest")
	proto.RegisterType((*GetGroupResponse)(nil), "charonrpc.GetGroupResponse")
	proto.RegisterType((*ListGroupsRequest)(nil), "charonrpc.ListGroupsRequest")
	proto.RegisterType((*ListGroupsResponse)(nil), "charonrpc.ListGroupsResponse")
	proto.RegisterType((*DeleteGroupRequest)(nil), "charonrpc.DeleteGroupRequest")
	proto.RegisterType((*ModifyGroupRequest)(nil), "charonrpc.ModifyGroupRequest")
	proto.RegisterType((*ModifyGroupResponse)(nil), "charonrpc.ModifyGroupResponse")
	proto.RegisterType((*SetGroupPermissionsRequest)(nil), "charonrpc.SetGroupPermissionsRequest")
	proto.RegisterType((*SetGroupPermissionsResponse)(nil), "charonrpc.SetGroupPermissionsResponse")
	proto.RegisterType((*ListGroupPermissionsRequest)(nil), "charonrpc.ListGroupPermissionsRequest")
	proto.RegisterType((*ListGroupPermissionsResponse)(nil), "charonrpc.ListGroupPermissionsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GroupManager service

type GroupManagerClient interface {
	Create(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error)
	Modify(ctx context.Context, in *ModifyGroupRequest, opts ...grpc.CallOption) (*ModifyGroupResponse, error)
	Get(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupResponse, error)
	List(ctx context.Context, in *ListGroupsRequest, opts ...grpc.CallOption) (*ListGroupsResponse, error)
	Delete(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*google_protobuf1.BoolValue, error)
	ListPermissions(ctx context.Context, in *ListGroupPermissionsRequest, opts ...grpc.CallOption) (*ListGroupPermissionsResponse, error)
	SetPermissions(ctx context.Context, in *SetGroupPermissionsRequest, opts ...grpc.CallOption) (*SetGroupPermissionsResponse, error)
}

type groupManagerClient struct {
	cc *grpc.ClientConn
}

func NewGroupManagerClient(cc *grpc.ClientConn) GroupManagerClient {
	return &groupManagerClient{cc}
}

func (c *groupManagerClient) Create(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error) {
	out := new(CreateGroupResponse)
	err := grpc.Invoke(ctx, "/charonrpc.GroupManager/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupManagerClient) Modify(ctx context.Context, in *ModifyGroupRequest, opts ...grpc.CallOption) (*ModifyGroupResponse, error) {
	out := new(ModifyGroupResponse)
	err := grpc.Invoke(ctx, "/charonrpc.GroupManager/Modify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupManagerClient) Get(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupResponse, error) {
	out := new(GetGroupResponse)
	err := grpc.Invoke(ctx, "/charonrpc.GroupManager/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupManagerClient) List(ctx context.Context, in *ListGroupsRequest, opts ...grpc.CallOption) (*ListGroupsResponse, error) {
	out := new(ListGroupsResponse)
	err := grpc.Invoke(ctx, "/charonrpc.GroupManager/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupManagerClient) Delete(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*google_protobuf1.BoolValue, error) {
	out := new(google_protobuf1.BoolValue)
	err := grpc.Invoke(ctx, "/charonrpc.GroupManager/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupManagerClient) ListPermissions(ctx context.Context, in *ListGroupPermissionsRequest, opts ...grpc.CallOption) (*ListGroupPermissionsResponse, error) {
	out := new(ListGroupPermissionsResponse)
	err := grpc.Invoke(ctx, "/charonrpc.GroupManager/ListPermissions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupManagerClient) SetPermissions(ctx context.Context, in *SetGroupPermissionsRequest, opts ...grpc.CallOption) (*SetGroupPermissionsResponse, error) {
	out := new(SetGroupPermissionsResponse)
	err := grpc.Invoke(ctx, "/charonrpc.GroupManager/SetPermissions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GroupManager service

type GroupManagerServer interface {
	Create(context.Context, *CreateGroupRequest) (*CreateGroupResponse, error)
	Modify(context.Context, *ModifyGroupRequest) (*ModifyGroupResponse, error)
	Get(context.Context, *GetGroupRequest) (*GetGroupResponse, error)
	List(context.Context, *ListGroupsRequest) (*ListGroupsResponse, error)
	Delete(context.Context, *DeleteGroupRequest) (*google_protobuf1.BoolValue, error)
	ListPermissions(context.Context, *ListGroupPermissionsRequest) (*ListGroupPermissionsResponse, error)
	SetPermissions(context.Context, *SetGroupPermissionsRequest) (*SetGroupPermissionsResponse, error)
}

func RegisterGroupManagerServer(s *grpc.Server, srv GroupManagerServer) {
	s.RegisterService(&_GroupManager_serviceDesc, srv)
}

func _GroupManager_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupManagerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/charonrpc.GroupManager/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupManagerServer).Create(ctx, req.(*CreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupManager_Modify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupManagerServer).Modify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/charonrpc.GroupManager/Modify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupManagerServer).Modify(ctx, req.(*ModifyGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupManager_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupManagerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/charonrpc.GroupManager/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupManagerServer).Get(ctx, req.(*GetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupManager_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupManagerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/charonrpc.GroupManager/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupManagerServer).List(ctx, req.(*ListGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupManager_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupManagerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/charonrpc.GroupManager/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupManagerServer).Delete(ctx, req.(*DeleteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupManager_ListPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupManagerServer).ListPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/charonrpc.GroupManager/ListPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupManagerServer).ListPermissions(ctx, req.(*ListGroupPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupManager_SetPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroupPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupManagerServer).SetPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/charonrpc.GroupManager/SetPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupManagerServer).SetPermissions(ctx, req.(*SetGroupPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GroupManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "charonrpc.GroupManager",
	HandlerType: (*GroupManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _GroupManager_Create_Handler,
		},
		{
			MethodName: "Modify",
			Handler:    _GroupManager_Modify_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _GroupManager_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _GroupManager_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _GroupManager_Delete_Handler,
		},
		{
			MethodName: "ListPermissions",
			Handler:    _GroupManager_ListPermissions_Handler,
		},
		{
			MethodName: "SetPermissions",
			Handler:    _GroupManager_SetPermissions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "group.proto",
}

func init() { proto.RegisterFile("group.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 708 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x7f, 0x6f, 0xd3, 0x30,
	0x10, 0x5d, 0x9a, 0xb6, 0x5b, 0xaf, 0xb0, 0x0d, 0xef, 0x9f, 0x90, 0xfd, 0xa0, 0x04, 0x36, 0x2a,
	0x34, 0x52, 0x34, 0x10, 0x12, 0x48, 0xa0, 0x51, 0x40, 0xd3, 0x10, 0x93, 0x50, 0x87, 0x90, 0xd8,
	0x3f, 0x53, 0x9a, 0xb8, 0x9d, 0xb5, 0x26, 0x0e, 0xb1, 0xc3, 0xd4, 0x7d, 0x19, 0x3e, 0x09, 0xdf,
	0x0d, 0xc5, 0x76, 0xd2, 0xa4, 0xc9, 0x28, 0xfb, 0xab, 0xb5, 0xef, 0xdd, 0x7b, 0xe7, 0x7b, 0x77,
	0x81, 0xf6, 0x38, 0xa2, 0x71, 0x68, 0x87, 0x11, 0xe5, 0x14, 0xb5, 0xdc, 0x0b, 0x27, 0xa2, 0x41,
	0x14, 0xba, 0xe6, 0x83, 0x31, 0xa5, 0xe3, 0x09, 0xee, 0x89, 0xc0, 0x30, 0x1e, 0xf5, 0x38, 0xf1,
	0x31, 0xe3, 0x8e, 0xaf, 0xb0, 0xe6, 0xce, 0x3c, 0xe0, 0x2a, 0x72, 0xc2, 0x10, 0x47, 0x4c, 0xc5,
	0x37, 0x02, 0x3e, 0x0d, 0x31, 0xeb, 0xc9, 0x1f, 0x79, 0x69, 0xfd, 0xae, 0x41, 0xe3, 0x28, 0x11,
	0x44, 0xab, 0x50, 0x23, 0x9e, 0xa1, 0x75, 0xb4, 0xae, 0x3e, 0xa8, 0x11, 0x0f, 0x21, 0xa8, 0x07,
	0x8e, 0x8f, 0x8d, 0x5a, 0x47, 0xeb, 0xb6, 0x06, 0xe2, 0x3f, 0xea, 0x40, 0xdb, 0xc3, 0xcc, 0x8d,
	0x48, 0xc8, 0x09, 0x0d, 0x0c, 0x5d, 0x84, 0xf2, 0x57, 0xe8, 0x35, 0x80, 0x1b, 0x61, 0x87, 0x63,
	0xef, 0xdc, 0xe1, 0x46, 0xbd, 0xa3, 0x75, 0xdb, 0x07, 0xa6, 0x2d, 0x2b, 0xb3, 0xd3, 0xca, 0xec,
	0x6f, 0x69, 0xe9, 0x83, 0x96, 0x42, 0xbf, 0xe7, 0x68, 0x7f, 0x96, 0x3a, 0x9c, 0x1a, 0x0d, 0x91,
	0x7a, 0xd7, 0x56, 0xd5, 0x1e, 0x07, 0xfc, 0xd5, 0xcb, 0x0c, 0xdd, 0x9f, 0x26, 0x42, 0x71, 0xe8,
	0xa5, 0x42, 0xcd, 0xc5, 0x42, 0x0a, 0x2d, 0x85, 0xd2, 0xd4, 0xe1, 0xd4, 0x58, 0xae, 0x14, 0x52,
	0x80, 0xfe, 0xd4, 0x3a, 0x03, 0xf4, 0x41, 0xa8, 0x8a, 0x36, 0x0d, 0xf0, 0xcf, 0x18, 0x33, 0x9e,
	0x75, 0x47, 0xcb, 0x75, 0xe7, 0x79, 0xb1, 0x3b, 0x35, 0x41, 0xbc, 0x9a, 0x12, 0x9f, 0xf2, 0x88,
	0x04, 0xe3, 0x42, 0xb7, 0xac, 0xb7, 0xb0, 0x51, 0xe0, 0x66, 0x21, 0x0d, 0x18, 0x46, 0x7b, 0xd0,
	0x10, 0x43, 0x20, 0xd8, 0xdb, 0x07, 0xeb, 0x76, 0x36, 0x05, 0xb6, 0x04, 0xca, 0xb0, 0xf5, 0x10,
	0xd6, 0x8e, 0x30, 0x2f, 0xd4, 0x35, 0xe7, 0xa2, 0xf5, 0x06, 0xd6, 0x67, 0x90, 0x5b, 0xd2, 0x63,
	0xb8, 0xf7, 0x85, 0x30, 0x99, 0xcc, 0x52, 0x81, 0x5d, 0x68, 0xd2, 0xd1, 0x88, 0x61, 0x6e, 0x78,
	0x55, 0x8d, 0x53, 0x41, 0xf4, 0x08, 0x1a, 0x13, 0xe2, 0x13, 0x6e, 0xe0, 0x2a, 0x94, 0x8c, 0x7d,
	0xae, 0xaf, 0x68, 0xeb, 0x9e, 0xf5, 0x0e, 0x50, 0x5e, 0x46, 0x15, 0xd9, 0x85, 0xa6, 0xa8, 0x82,
	0x19, 0x5a, 0x47, 0xaf, 0xac, 0x52, 0xc5, 0xad, 0xc7, 0x80, 0x3e, 0xe2, 0x09, 0x9e, 0x33, 0x68,
	0xbe, 0x11, 0xd7, 0x80, 0x4e, 0xa8, 0x47, 0x46, 0xd3, 0x7f, 0xa1, 0x90, 0x95, 0x1b, 0xfa, 0xb2,
	0x77, 0x95, 0x36, 0xeb, 0xff, 0x65, 0x73, 0x41, 0xfb, 0x96, 0x3e, 0xfc, 0x00, 0xf3, 0x54, 0x79,
	0xf8, 0x15, 0x47, 0x3e, 0x61, 0x8c, 0xd0, 0x20, 0x33, 0xe4, 0x3e, 0xac, 0x08, 0xd8, 0x79, 0xf6,
	0x90, 0x65, 0x71, 0x3e, 0xf6, 0x92, 0x75, 0x0d, 0x67, 0x09, 0x46, 0xad, 0xa3, 0x27, 0xeb, 0x9a,
	0xbb, 0xb2, 0x28, 0x6c, 0x56, 0x52, 0xab, 0x0a, 0x0d, 0x58, 0x56, 0x1b, 0x97, 0x52, 0xab, 0x63,
	0x12, 0x89, 0xb0, 0x4f, 0x7f, 0x61, 0x4f, 0xf4, 0x4a, 0x1f, 0xa4, 0x47, 0xb4, 0x05, 0xad, 0x38,
	0xe0, 0x34, 0x76, 0x2f, 0xb0, 0x27, 0x9a, 0xa3, 0x0f, 0x66, 0x17, 0xd6, 0x33, 0xd8, 0xcc, 0xcc,
	0xae, 0x78, 0xcc, 0xbc, 0x6b, 0x87, 0xb0, 0x55, 0x0d, 0x57, 0x05, 0xce, 0xbd, 0x50, 0x2b, 0xbd,
	0xf0, 0xe0, 0x4f, 0x1d, 0xee, 0x88, 0xf4, 0x13, 0x27, 0x70, 0xc6, 0x38, 0x42, 0xc7, 0xd0, 0x94,
	0x3b, 0x87, 0xb6, 0x73, 0x0d, 0x2f, 0xaf, 0xb8, 0xb9, 0x73, 0x53, 0x58, 0x6a, 0x5b, 0x4b, 0x09,
	0x95, 0xf4, 0xb5, 0x40, 0x55, 0x1e, 0xb3, 0x02, 0x55, 0xc5, 0x24, 0x58, 0x4b, 0xe8, 0x10, 0xf4,
	0x23, 0xcc, 0x91, 0x99, 0x9f, 0x81, 0xe2, 0x6a, 0x9b, 0x9b, 0x95, 0xb1, 0x8c, 0xe1, 0x13, 0xd4,
	0x93, 0x56, 0xa1, 0xad, 0x1c, 0xac, 0xb4, 0xbe, 0xe6, 0xf6, 0x0d, 0xd1, 0x1c, 0x4d, 0x53, 0x6e,
	0x53, 0xe1, 0x4d, 0xe5, 0x05, 0x33, 0xcb, 0x1f, 0xdb, 0x3e, 0xa5, 0x93, 0xef, 0xce, 0x24, 0x4e,
	0x68, 0x3c, 0x58, 0x4b, 0xe8, 0x73, 0x9e, 0xa1, 0xbd, 0x2a, 0xe9, 0xf2, 0x0c, 0x98, 0x4f, 0x16,
	0xe2, 0xb2, 0x62, 0x1d, 0x58, 0x3d, 0xc5, 0x05, 0x91, 0xdd, 0x5c, 0xf2, 0xcd, 0x4b, 0x63, 0xee,
	0x2d, 0x82, 0xa5, 0x12, 0xfd, 0xfd, 0xb3, 0xa7, 0x63, 0xc2, 0x2f, 0xe2, 0xa1, 0xed, 0x52, 0xbf,
	0x17, 0x12, 0xca, 0xa3, 0x4b, 0x7a, 0xe5, 0x4c, 0xdc, 0xeb, 0xf8, 0xb2, 0x27, 0x49, 0x7a, 0x19,
	0xd7, 0xb0, 0x29, 0x9a, 0xf1, 0xe2, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x93, 0xe9, 0x46, 0x80,
	0xc5, 0x07, 0x00, 0x00,
}
