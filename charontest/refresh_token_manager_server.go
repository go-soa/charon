// Code generated by mockery v1.0.0. DO NOT EDIT.

package charontest

import charonrpc "github.com/piotrkowalczuk/charon/charonrpc"
import context "context"
import mock "github.com/stretchr/testify/mock"

// RefreshTokenManagerServer is an autogenerated mock type for the RefreshTokenManagerServer type
type RefreshTokenManagerServer struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *RefreshTokenManagerServer) Create(_a0 context.Context, _a1 *charonrpc.CreateRefreshTokenRequest) (*charonrpc.CreateRefreshTokenResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *charonrpc.CreateRefreshTokenResponse
	if rf, ok := ret.Get(0).(func(context.Context, *charonrpc.CreateRefreshTokenRequest) *charonrpc.CreateRefreshTokenResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*charonrpc.CreateRefreshTokenResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *charonrpc.CreateRefreshTokenRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Disable provides a mock function with given fields: _a0, _a1
func (_m *RefreshTokenManagerServer) Disable(_a0 context.Context, _a1 *charonrpc.DisableRefreshTokenRequest) (*charonrpc.DisableRefreshTokenResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *charonrpc.DisableRefreshTokenResponse
	if rf, ok := ret.Get(0).(func(context.Context, *charonrpc.DisableRefreshTokenRequest) *charonrpc.DisableRefreshTokenResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*charonrpc.DisableRefreshTokenResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *charonrpc.DisableRefreshTokenRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: _a0, _a1
func (_m *RefreshTokenManagerServer) List(_a0 context.Context, _a1 *charonrpc.ListRefreshTokensRequest) (*charonrpc.ListRefreshTokensResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *charonrpc.ListRefreshTokensResponse
	if rf, ok := ret.Get(0).(func(context.Context, *charonrpc.ListRefreshTokensRequest) *charonrpc.ListRefreshTokensResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*charonrpc.ListRefreshTokensResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *charonrpc.ListRefreshTokensRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
