// Code generated by protoc-gen-go.
// source: permission.proto
// DO NOT EDIT!

package charonrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import qtypes "github.com/piotrkowalczuk/qtypes"
import ntypes "github.com/piotrkowalczuk/ntypes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RegisterPermissionsRequest struct {
	Permissions []string `protobuf:"bytes,1,rep,name=permissions" json:"permissions,omitempty"`
}

func (m *RegisterPermissionsRequest) Reset()                    { *m = RegisterPermissionsRequest{} }
func (m *RegisterPermissionsRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterPermissionsRequest) ProtoMessage()               {}
func (*RegisterPermissionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *RegisterPermissionsRequest) GetPermissions() []string {
	if m != nil {
		return m.Permissions
	}
	return nil
}

type RegisterPermissionsResponse struct {
	Created   int64 `protobuf:"varint,1,opt,name=created" json:"created,omitempty"`
	Removed   int64 `protobuf:"varint,2,opt,name=removed" json:"removed,omitempty"`
	Untouched int64 `protobuf:"varint,3,opt,name=untouched" json:"untouched,omitempty"`
}

func (m *RegisterPermissionsResponse) Reset()                    { *m = RegisterPermissionsResponse{} }
func (m *RegisterPermissionsResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterPermissionsResponse) ProtoMessage()               {}
func (*RegisterPermissionsResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *RegisterPermissionsResponse) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *RegisterPermissionsResponse) GetRemoved() int64 {
	if m != nil {
		return m.Removed
	}
	return 0
}

func (m *RegisterPermissionsResponse) GetUntouched() int64 {
	if m != nil {
		return m.Untouched
	}
	return 0
}

type ListPermissionsRequest struct {
	Subsystem *qtypes.String    `protobuf:"bytes,1,opt,name=subsystem" json:"subsystem,omitempty"`
	Module    *qtypes.String    `protobuf:"bytes,2,opt,name=module" json:"module,omitempty"`
	Action    *qtypes.String    `protobuf:"bytes,3,opt,name=action" json:"action,omitempty"`
	CreatedAt *qtypes.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	CreatedBy *qtypes.Int64     `protobuf:"bytes,5,opt,name=created_by,json=createdBy" json:"created_by,omitempty"`
	Offset    *ntypes.Int64     `protobuf:"bytes,100,opt,name=offset" json:"offset,omitempty"`
	Limit     *ntypes.Int64     `protobuf:"bytes,101,opt,name=limit" json:"limit,omitempty"`
	Sort      map[string]bool   `protobuf:"bytes,102,rep,name=sort" json:"sort,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (m *ListPermissionsRequest) Reset()                    { *m = ListPermissionsRequest{} }
func (m *ListPermissionsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListPermissionsRequest) ProtoMessage()               {}
func (*ListPermissionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *ListPermissionsRequest) GetSubsystem() *qtypes.String {
	if m != nil {
		return m.Subsystem
	}
	return nil
}

func (m *ListPermissionsRequest) GetModule() *qtypes.String {
	if m != nil {
		return m.Module
	}
	return nil
}

func (m *ListPermissionsRequest) GetAction() *qtypes.String {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *ListPermissionsRequest) GetCreatedAt() *qtypes.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *ListPermissionsRequest) GetCreatedBy() *qtypes.Int64 {
	if m != nil {
		return m.CreatedBy
	}
	return nil
}

func (m *ListPermissionsRequest) GetOffset() *ntypes.Int64 {
	if m != nil {
		return m.Offset
	}
	return nil
}

func (m *ListPermissionsRequest) GetLimit() *ntypes.Int64 {
	if m != nil {
		return m.Limit
	}
	return nil
}

func (m *ListPermissionsRequest) GetSort() map[string]bool {
	if m != nil {
		return m.Sort
	}
	return nil
}

type ListPermissionsResponse struct {
	Permissions []string `protobuf:"bytes,1,rep,name=permissions" json:"permissions,omitempty"`
}

func (m *ListPermissionsResponse) Reset()                    { *m = ListPermissionsResponse{} }
func (m *ListPermissionsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListPermissionsResponse) ProtoMessage()               {}
func (*ListPermissionsResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *ListPermissionsResponse) GetPermissions() []string {
	if m != nil {
		return m.Permissions
	}
	return nil
}

type GetPermissionRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetPermissionRequest) Reset()                    { *m = GetPermissionRequest{} }
func (m *GetPermissionRequest) String() string            { return proto.CompactTextString(m) }
func (*GetPermissionRequest) ProtoMessage()               {}
func (*GetPermissionRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *GetPermissionRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetPermissionResponse struct {
	Permission string `protobuf:"bytes,1,opt,name=permission" json:"permission,omitempty"`
}

func (m *GetPermissionResponse) Reset()                    { *m = GetPermissionResponse{} }
func (m *GetPermissionResponse) String() string            { return proto.CompactTextString(m) }
func (*GetPermissionResponse) ProtoMessage()               {}
func (*GetPermissionResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

func (m *GetPermissionResponse) GetPermission() string {
	if m != nil {
		return m.Permission
	}
	return ""
}

func init() {
	proto.RegisterType((*RegisterPermissionsRequest)(nil), "charonrpc.RegisterPermissionsRequest")
	proto.RegisterType((*RegisterPermissionsResponse)(nil), "charonrpc.RegisterPermissionsResponse")
	proto.RegisterType((*ListPermissionsRequest)(nil), "charonrpc.ListPermissionsRequest")
	proto.RegisterType((*ListPermissionsResponse)(nil), "charonrpc.ListPermissionsResponse")
	proto.RegisterType((*GetPermissionRequest)(nil), "charonrpc.GetPermissionRequest")
	proto.RegisterType((*GetPermissionResponse)(nil), "charonrpc.GetPermissionResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PermissionManager service

type PermissionManagerClient interface {
	Register(ctx context.Context, in *RegisterPermissionsRequest, opts ...grpc.CallOption) (*RegisterPermissionsResponse, error)
	List(ctx context.Context, in *ListPermissionsRequest, opts ...grpc.CallOption) (*ListPermissionsResponse, error)
	Get(ctx context.Context, in *GetPermissionRequest, opts ...grpc.CallOption) (*GetPermissionResponse, error)
}

type permissionManagerClient struct {
	cc *grpc.ClientConn
}

func NewPermissionManagerClient(cc *grpc.ClientConn) PermissionManagerClient {
	return &permissionManagerClient{cc}
}

func (c *permissionManagerClient) Register(ctx context.Context, in *RegisterPermissionsRequest, opts ...grpc.CallOption) (*RegisterPermissionsResponse, error) {
	out := new(RegisterPermissionsResponse)
	err := grpc.Invoke(ctx, "/charonrpc.PermissionManager/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionManagerClient) List(ctx context.Context, in *ListPermissionsRequest, opts ...grpc.CallOption) (*ListPermissionsResponse, error) {
	out := new(ListPermissionsResponse)
	err := grpc.Invoke(ctx, "/charonrpc.PermissionManager/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionManagerClient) Get(ctx context.Context, in *GetPermissionRequest, opts ...grpc.CallOption) (*GetPermissionResponse, error) {
	out := new(GetPermissionResponse)
	err := grpc.Invoke(ctx, "/charonrpc.PermissionManager/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PermissionManager service

type PermissionManagerServer interface {
	Register(context.Context, *RegisterPermissionsRequest) (*RegisterPermissionsResponse, error)
	List(context.Context, *ListPermissionsRequest) (*ListPermissionsResponse, error)
	Get(context.Context, *GetPermissionRequest) (*GetPermissionResponse, error)
}

func RegisterPermissionManagerServer(s *grpc.Server, srv PermissionManagerServer) {
	s.RegisterService(&_PermissionManager_serviceDesc, srv)
}

func _PermissionManager_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionManagerServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/charonrpc.PermissionManager/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionManagerServer).Register(ctx, req.(*RegisterPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionManager_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionManagerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/charonrpc.PermissionManager/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionManagerServer).List(ctx, req.(*ListPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionManager_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionManagerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/charonrpc.PermissionManager/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionManagerServer).Get(ctx, req.(*GetPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PermissionManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "charonrpc.PermissionManager",
	HandlerType: (*PermissionManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _PermissionManager_Register_Handler,
		},
		{
			MethodName: "List",
			Handler:    _PermissionManager_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _PermissionManager_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "permission.proto",
}

func init() { proto.RegisterFile("permission.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 523 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x94, 0xef, 0x8a, 0xd3, 0x4c,
	0x14, 0xc6, 0xdf, 0x36, 0x6d, 0xdf, 0xe6, 0x14, 0x97, 0xee, 0xb0, 0x6a, 0x88, 0xa2, 0x35, 0xb2,
	0xa5, 0xa0, 0x66, 0xa5, 0x8a, 0x2b, 0x0a, 0x8a, 0x82, 0x2c, 0x2e, 0x8a, 0x92, 0xf5, 0x9b, 0x1f,
	0x24, 0x4d, 0x4e, 0xdb, 0xa1, 0xcd, 0x4c, 0x76, 0xe6, 0x64, 0x25, 0xde, 0x83, 0x37, 0xe5, 0x95,
	0x49, 0xf3, 0xaf, 0xc1, 0xcd, 0x6e, 0x3f, 0xb5, 0x73, 0xce, 0xef, 0x99, 0xf3, 0xf4, 0xc9, 0x69,
	0x60, 0x18, 0xa3, 0x8a, 0xb8, 0xd6, 0x5c, 0x0a, 0x37, 0x56, 0x92, 0x24, 0x33, 0x83, 0xa5, 0xaf,
	0xa4, 0x50, 0x71, 0x60, 0x3f, 0x59, 0x70, 0x5a, 0x26, 0x33, 0x37, 0x90, 0xd1, 0x51, 0xcc, 0x25,
	0xa9, 0x95, 0xfc, 0xe9, 0xaf, 0x83, 0x5f, 0xc9, 0xea, 0xe8, 0x9c, 0xd2, 0x18, 0x75, 0xf1, 0x91,
	0x2b, 0xaf, 0xc3, 0x45, 0x8e, 0x8b, 0x1a, 0xee, 0xbc, 0x01, 0xdb, 0xc3, 0x05, 0xd7, 0x84, 0xea,
	0x6b, 0x65, 0x42, 0x7b, 0x78, 0x9e, 0xa0, 0x26, 0x36, 0x82, 0xc1, 0xd6, 0x9a, 0xb6, 0x5a, 0x23,
	0x63, 0x62, 0x7a, 0xf5, 0x92, 0x23, 0xe1, 0x4e, 0xa3, 0x5e, 0xc7, 0x52, 0x68, 0x64, 0x16, 0xfc,
	0x1f, 0x28, 0xf4, 0x09, 0x43, 0xab, 0x35, 0x6a, 0x4d, 0x0c, 0xaf, 0x3c, 0x6e, 0x3a, 0x0a, 0x23,
	0x79, 0x81, 0xa1, 0xd5, 0xce, 0x3b, 0xc5, 0x91, 0xdd, 0x05, 0x33, 0x11, 0x24, 0x93, 0x60, 0x89,
	0xa1, 0x65, 0x64, 0xbd, 0x6d, 0xc1, 0xf9, 0x63, 0xc0, 0xad, 0x4f, 0x5c, 0x53, 0x83, 0xdb, 0xc7,
	0x60, 0xea, 0x64, 0xa6, 0x53, 0x4d, 0x18, 0x65, 0xe3, 0x06, 0xd3, 0x3d, 0xb7, 0x08, 0xe7, 0x8c,
	0x14, 0x17, 0x0b, 0x6f, 0x0b, 0xb0, 0x31, 0xf4, 0x22, 0x19, 0x26, 0x6b, 0xcc, 0xe6, 0x5f, 0x46,
	0x8b, 0xee, 0x86, 0xf3, 0x03, 0xe2, 0x52, 0x64, 0x5e, 0x1a, 0xb8, 0xbc, 0xcb, 0x9e, 0x02, 0x14,
	0xbf, 0xed, 0x87, 0x4f, 0x56, 0x27, 0x63, 0xf7, 0x4b, 0xf6, 0x1b, 0x8f, 0x50, 0x93, 0x1f, 0xc5,
	0x9e, 0x59, 0x40, 0xef, 0x36, 0x7e, 0x2b, 0xc5, 0x2c, 0xb5, 0xba, 0x99, 0xe2, 0x46, 0xa9, 0xf8,
	0x28, 0xe8, 0xc5, 0xf3, 0x8a, 0x7e, 0x9f, 0xb2, 0x43, 0xe8, 0xc9, 0xf9, 0x5c, 0x23, 0x59, 0x61,
	0x41, 0x8a, 0x3a, 0x59, 0x34, 0xd9, 0x43, 0xe8, 0xae, 0x79, 0xc4, 0xc9, 0xc2, 0x26, 0x2a, 0xef,
	0xb1, 0xb7, 0xd0, 0xd1, 0x52, 0x91, 0x35, 0x1f, 0x19, 0x93, 0xc1, 0xf4, 0x91, 0x5b, 0x6d, 0x9b,
	0xdb, 0x1c, 0xad, 0x7b, 0x26, 0x15, 0x7d, 0x10, 0xa4, 0x52, 0x2f, 0x13, 0xda, 0xc7, 0x60, 0x56,
	0x25, 0x36, 0x04, 0x63, 0x85, 0x69, 0x96, 0xb8, 0xe9, 0x6d, 0xbe, 0xb2, 0x03, 0xe8, 0x5e, 0xf8,
	0xeb, 0x24, 0x8f, 0xb6, 0xef, 0xe5, 0x87, 0x57, 0xed, 0x97, 0xad, 0xd3, 0x4e, 0xbf, 0x37, 0x0c,
	0x9d, 0xd7, 0x70, 0xfb, 0xd2, 0xa0, 0x62, 0x63, 0x76, 0xaf, 0xdc, 0x18, 0x0e, 0x4e, 0xb0, 0xa6,
	0x2d, 0x1f, 0xff, 0x1e, 0xb4, 0x79, 0xb9, 0x66, 0x6d, 0x1e, 0x3a, 0xc7, 0x70, 0xf3, 0x1f, 0xae,
	0x18, 0x71, 0x0f, 0x60, 0x7b, 0x5f, 0x61, 0xbb, 0x56, 0x99, 0xfe, 0x6e, 0xc3, 0xfe, 0x56, 0xf6,
	0xd9, 0x17, 0xfe, 0x02, 0x15, 0xfb, 0x0e, 0xfd, 0x72, 0xd3, 0xd9, 0x61, 0x2d, 0xb1, 0xab, 0xff,
	0x3e, 0xf6, 0x78, 0x17, 0x96, 0x1b, 0x72, 0xfe, 0x63, 0x5f, 0xa0, 0xb3, 0x09, 0x84, 0x3d, 0xd8,
	0xf9, 0x28, 0x6c, 0xe7, 0x3a, 0xa4, 0xba, 0xf0, 0x14, 0x8c, 0x13, 0x24, 0x76, 0xbf, 0x06, 0x37,
	0x85, 0x66, 0x8f, 0xae, 0x06, 0xca, 0xbb, 0x66, 0xbd, 0xec, 0x55, 0xf1, 0xec, 0x6f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x99, 0x73, 0xa6, 0x2e, 0xa7, 0x04, 0x00, 0x00,
}
