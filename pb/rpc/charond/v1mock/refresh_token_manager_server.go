// Code generated by mockery v1.0.0. DO NOT EDIT.

package charondmock

import (
	context "context"

	charond "github.com/piotrkowalczuk/charon/pb/rpc/charond/v1"

	mock "github.com/stretchr/testify/mock"
)

// RefreshTokenManagerServer is an autogenerated mock type for the RefreshTokenManagerServer type
type RefreshTokenManagerServer struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *RefreshTokenManagerServer) Create(_a0 context.Context, _a1 *charond.CreateRefreshTokenRequest) (*charond.CreateRefreshTokenResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *charond.CreateRefreshTokenResponse
	if rf, ok := ret.Get(0).(func(context.Context, *charond.CreateRefreshTokenRequest) *charond.CreateRefreshTokenResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*charond.CreateRefreshTokenResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *charond.CreateRefreshTokenRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: _a0, _a1
func (_m *RefreshTokenManagerServer) List(_a0 context.Context, _a1 *charond.ListRefreshTokensRequest) (*charond.ListRefreshTokensResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *charond.ListRefreshTokensResponse
	if rf, ok := ret.Get(0).(func(context.Context, *charond.ListRefreshTokensRequest) *charond.ListRefreshTokensResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*charond.ListRefreshTokensResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *charond.ListRefreshTokensRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Revoke provides a mock function with given fields: _a0, _a1
func (_m *RefreshTokenManagerServer) Revoke(_a0 context.Context, _a1 *charond.RevokeRefreshTokenRequest) (*charond.RevokeRefreshTokenResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *charond.RevokeRefreshTokenResponse
	if rf, ok := ret.Get(0).(func(context.Context, *charond.RevokeRefreshTokenRequest) *charond.RevokeRefreshTokenResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*charond.RevokeRefreshTokenResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *charond.RevokeRefreshTokenRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
