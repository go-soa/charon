// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user.proto

package charonrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf2 "github.com/golang/protobuf/ptypes/timestamp"
import google_protobuf1 "github.com/golang/protobuf/ptypes/wrappers"
import qtypes "github.com/piotrkowalczuk/qtypes"
import ntypes "github.com/piotrkowalczuk/ntypes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type User struct {
	Id          int64                       `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Username    string                      `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	FirstName   string                      `protobuf:"bytes,3,opt,name=first_name,json=firstName" json:"first_name,omitempty"`
	LastName    string                      `protobuf:"bytes,4,opt,name=last_name,json=lastName" json:"last_name,omitempty"`
	IsSuperuser bool                        `protobuf:"varint,5,opt,name=is_superuser,json=isSuperuser" json:"is_superuser,omitempty"`
	IsActive    bool                        `protobuf:"varint,6,opt,name=is_active,json=isActive" json:"is_active,omitempty"`
	IsStaff     bool                        `protobuf:"varint,7,opt,name=is_staff,json=isStaff" json:"is_staff,omitempty"`
	IsConfirmed bool                        `protobuf:"varint,8,opt,name=is_confirmed,json=isConfirmed" json:"is_confirmed,omitempty"`
	CreatedAt   *google_protobuf2.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	CreatedBy   *ntypes.Int64               `protobuf:"bytes,10,opt,name=created_by,json=createdBy" json:"created_by,omitempty"`
	UpdatedAt   *google_protobuf2.Timestamp `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
	UpdatedBy   *ntypes.Int64               `protobuf:"bytes,12,opt,name=updated_by,json=updatedBy" json:"updated_by,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *User) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *User) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *User) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *User) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *User) GetIsSuperuser() bool {
	if m != nil {
		return m.IsSuperuser
	}
	return false
}

func (m *User) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *User) GetIsStaff() bool {
	if m != nil {
		return m.IsStaff
	}
	return false
}

func (m *User) GetIsConfirmed() bool {
	if m != nil {
		return m.IsConfirmed
	}
	return false
}

func (m *User) GetCreatedAt() *google_protobuf2.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *User) GetCreatedBy() *ntypes.Int64 {
	if m != nil {
		return m.CreatedBy
	}
	return nil
}

func (m *User) GetUpdatedAt() *google_protobuf2.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *User) GetUpdatedBy() *ntypes.Int64 {
	if m != nil {
		return m.UpdatedBy
	}
	return nil
}

type CreateUserRequest struct {
	Username       string       `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	PlainPassword  string       `protobuf:"bytes,2,opt,name=plain_password,json=plainPassword" json:"plain_password,omitempty"`
	SecurePassword []byte       `protobuf:"bytes,3,opt,name=secure_password,json=securePassword,proto3" json:"secure_password,omitempty"`
	FirstName      string       `protobuf:"bytes,4,opt,name=first_name,json=firstName" json:"first_name,omitempty"`
	LastName       string       `protobuf:"bytes,5,opt,name=last_name,json=lastName" json:"last_name,omitempty"`
	IsSuperuser    *ntypes.Bool `protobuf:"bytes,6,opt,name=is_superuser,json=isSuperuser" json:"is_superuser,omitempty"`
	IsActive       *ntypes.Bool `protobuf:"bytes,7,opt,name=is_active,json=isActive" json:"is_active,omitempty"`
	IsStaff        *ntypes.Bool `protobuf:"bytes,8,opt,name=is_staff,json=isStaff" json:"is_staff,omitempty"`
	IsConfirmed    *ntypes.Bool `protobuf:"bytes,9,opt,name=is_confirmed,json=isConfirmed" json:"is_confirmed,omitempty"`
}

func (m *CreateUserRequest) Reset()                    { *m = CreateUserRequest{} }
func (m *CreateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateUserRequest) ProtoMessage()               {}
func (*CreateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *CreateUserRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *CreateUserRequest) GetPlainPassword() string {
	if m != nil {
		return m.PlainPassword
	}
	return ""
}

func (m *CreateUserRequest) GetSecurePassword() []byte {
	if m != nil {
		return m.SecurePassword
	}
	return nil
}

func (m *CreateUserRequest) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *CreateUserRequest) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *CreateUserRequest) GetIsSuperuser() *ntypes.Bool {
	if m != nil {
		return m.IsSuperuser
	}
	return nil
}

func (m *CreateUserRequest) GetIsActive() *ntypes.Bool {
	if m != nil {
		return m.IsActive
	}
	return nil
}

func (m *CreateUserRequest) GetIsStaff() *ntypes.Bool {
	if m != nil {
		return m.IsStaff
	}
	return nil
}

func (m *CreateUserRequest) GetIsConfirmed() *ntypes.Bool {
	if m != nil {
		return m.IsConfirmed
	}
	return nil
}

type CreateUserResponse struct {
	User *User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *CreateUserResponse) Reset()                    { *m = CreateUserResponse{} }
func (m *CreateUserResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateUserResponse) ProtoMessage()               {}
func (*CreateUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *CreateUserResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type GetUserRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetUserRequest) Reset()                    { *m = GetUserRequest{} }
func (m *GetUserRequest) String() string            { return proto.CompactTextString(m) }
func (*GetUserRequest) ProtoMessage()               {}
func (*GetUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *GetUserRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetUserResponse struct {
	User *User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *GetUserResponse) Reset()                    { *m = GetUserResponse{} }
func (m *GetUserResponse) String() string            { return proto.CompactTextString(m) }
func (*GetUserResponse) ProtoMessage()               {}
func (*GetUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *GetUserResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type ListUsersRequest struct {
	IsSuperuser *ntypes.Bool    `protobuf:"bytes,1,opt,name=is_superuser,json=isSuperuser" json:"is_superuser,omitempty"`
	IsStaff     *ntypes.Bool    `protobuf:"bytes,2,opt,name=is_staff,json=isStaff" json:"is_staff,omitempty"`
	CreatedBy   *qtypes.Int64   `protobuf:"bytes,3,opt,name=created_by,json=createdBy" json:"created_by,omitempty"`
	Offset      *ntypes.Int64   `protobuf:"bytes,100,opt,name=offset" json:"offset,omitempty"`
	Limit       *ntypes.Int64   `protobuf:"bytes,101,opt,name=limit" json:"limit,omitempty"`
	Sort        map[string]bool `protobuf:"bytes,102,rep,name=sort" json:"sort,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (m *ListUsersRequest) Reset()                    { *m = ListUsersRequest{} }
func (m *ListUsersRequest) String() string            { return proto.CompactTextString(m) }
func (*ListUsersRequest) ProtoMessage()               {}
func (*ListUsersRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *ListUsersRequest) GetIsSuperuser() *ntypes.Bool {
	if m != nil {
		return m.IsSuperuser
	}
	return nil
}

func (m *ListUsersRequest) GetIsStaff() *ntypes.Bool {
	if m != nil {
		return m.IsStaff
	}
	return nil
}

func (m *ListUsersRequest) GetCreatedBy() *qtypes.Int64 {
	if m != nil {
		return m.CreatedBy
	}
	return nil
}

func (m *ListUsersRequest) GetOffset() *ntypes.Int64 {
	if m != nil {
		return m.Offset
	}
	return nil
}

func (m *ListUsersRequest) GetLimit() *ntypes.Int64 {
	if m != nil {
		return m.Limit
	}
	return nil
}

func (m *ListUsersRequest) GetSort() map[string]bool {
	if m != nil {
		return m.Sort
	}
	return nil
}

type ListUsersResponse struct {
	Users []*User `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
}

func (m *ListUsersResponse) Reset()                    { *m = ListUsersResponse{} }
func (m *ListUsersResponse) String() string            { return proto.CompactTextString(m) }
func (*ListUsersResponse) ProtoMessage()               {}
func (*ListUsersResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *ListUsersResponse) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

type DeleteUserRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteUserRequest) Reset()                    { *m = DeleteUserRequest{} }
func (m *DeleteUserRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteUserRequest) ProtoMessage()               {}
func (*DeleteUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *DeleteUserRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ModifyUserRequest struct {
	Id             int64          `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Username       *ntypes.String `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	PlainPassword  *ntypes.String `protobuf:"bytes,3,opt,name=plain_password,json=plainPassword" json:"plain_password,omitempty"`
	SecurePassword []byte         `protobuf:"bytes,4,opt,name=secure_password,json=securePassword,proto3" json:"secure_password,omitempty"`
	FirstName      *ntypes.String `protobuf:"bytes,5,opt,name=first_name,json=firstName" json:"first_name,omitempty"`
	LastName       *ntypes.String `protobuf:"bytes,6,opt,name=last_name,json=lastName" json:"last_name,omitempty"`
	IsSuperuser    *ntypes.Bool   `protobuf:"bytes,7,opt,name=is_superuser,json=isSuperuser" json:"is_superuser,omitempty"`
	IsActive       *ntypes.Bool   `protobuf:"bytes,8,opt,name=is_active,json=isActive" json:"is_active,omitempty"`
	IsStaff        *ntypes.Bool   `protobuf:"bytes,9,opt,name=is_staff,json=isStaff" json:"is_staff,omitempty"`
	IsConfirmed    *ntypes.Bool   `protobuf:"bytes,10,opt,name=is_confirmed,json=isConfirmed" json:"is_confirmed,omitempty"`
}

func (m *ModifyUserRequest) Reset()                    { *m = ModifyUserRequest{} }
func (m *ModifyUserRequest) String() string            { return proto.CompactTextString(m) }
func (*ModifyUserRequest) ProtoMessage()               {}
func (*ModifyUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *ModifyUserRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ModifyUserRequest) GetUsername() *ntypes.String {
	if m != nil {
		return m.Username
	}
	return nil
}

func (m *ModifyUserRequest) GetPlainPassword() *ntypes.String {
	if m != nil {
		return m.PlainPassword
	}
	return nil
}

func (m *ModifyUserRequest) GetSecurePassword() []byte {
	if m != nil {
		return m.SecurePassword
	}
	return nil
}

func (m *ModifyUserRequest) GetFirstName() *ntypes.String {
	if m != nil {
		return m.FirstName
	}
	return nil
}

func (m *ModifyUserRequest) GetLastName() *ntypes.String {
	if m != nil {
		return m.LastName
	}
	return nil
}

func (m *ModifyUserRequest) GetIsSuperuser() *ntypes.Bool {
	if m != nil {
		return m.IsSuperuser
	}
	return nil
}

func (m *ModifyUserRequest) GetIsActive() *ntypes.Bool {
	if m != nil {
		return m.IsActive
	}
	return nil
}

func (m *ModifyUserRequest) GetIsStaff() *ntypes.Bool {
	if m != nil {
		return m.IsStaff
	}
	return nil
}

func (m *ModifyUserRequest) GetIsConfirmed() *ntypes.Bool {
	if m != nil {
		return m.IsConfirmed
	}
	return nil
}

type ModifyUserResponse struct {
	User *User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *ModifyUserResponse) Reset()                    { *m = ModifyUserResponse{} }
func (m *ModifyUserResponse) String() string            { return proto.CompactTextString(m) }
func (*ModifyUserResponse) ProtoMessage()               {}
func (*ModifyUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *ModifyUserResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type ListUserPermissionsRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *ListUserPermissionsRequest) Reset()                    { *m = ListUserPermissionsRequest{} }
func (m *ListUserPermissionsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListUserPermissionsRequest) ProtoMessage()               {}
func (*ListUserPermissionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *ListUserPermissionsRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ListUserPermissionsResponse struct {
	Permissions []string `protobuf:"bytes,1,rep,name=permissions" json:"permissions,omitempty"`
}

func (m *ListUserPermissionsResponse) Reset()                    { *m = ListUserPermissionsResponse{} }
func (m *ListUserPermissionsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListUserPermissionsResponse) ProtoMessage()               {}
func (*ListUserPermissionsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *ListUserPermissionsResponse) GetPermissions() []string {
	if m != nil {
		return m.Permissions
	}
	return nil
}

type SetUserPermissionsRequest struct {
	UserId      int64    `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Permissions []string `protobuf:"bytes,2,rep,name=permissions" json:"permissions,omitempty"`
}

func (m *SetUserPermissionsRequest) Reset()                    { *m = SetUserPermissionsRequest{} }
func (m *SetUserPermissionsRequest) String() string            { return proto.CompactTextString(m) }
func (*SetUserPermissionsRequest) ProtoMessage()               {}
func (*SetUserPermissionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

func (m *SetUserPermissionsRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SetUserPermissionsRequest) GetPermissions() []string {
	if m != nil {
		return m.Permissions
	}
	return nil
}

type SetUserPermissionsResponse struct {
	Created   int64 `protobuf:"varint,1,opt,name=created" json:"created,omitempty"`
	Removed   int64 `protobuf:"varint,2,opt,name=removed" json:"removed,omitempty"`
	Untouched int64 `protobuf:"varint,3,opt,name=untouched" json:"untouched,omitempty"`
}

func (m *SetUserPermissionsResponse) Reset()                    { *m = SetUserPermissionsResponse{} }
func (m *SetUserPermissionsResponse) String() string            { return proto.CompactTextString(m) }
func (*SetUserPermissionsResponse) ProtoMessage()               {}
func (*SetUserPermissionsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

func (m *SetUserPermissionsResponse) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *SetUserPermissionsResponse) GetRemoved() int64 {
	if m != nil {
		return m.Removed
	}
	return 0
}

func (m *SetUserPermissionsResponse) GetUntouched() int64 {
	if m != nil {
		return m.Untouched
	}
	return 0
}

type ListUserGroupsRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *ListUserGroupsRequest) Reset()                    { *m = ListUserGroupsRequest{} }
func (m *ListUserGroupsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListUserGroupsRequest) ProtoMessage()               {}
func (*ListUserGroupsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

func (m *ListUserGroupsRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ListUserGroupsResponse struct {
	Groups []*Group `protobuf:"bytes,1,rep,name=groups" json:"groups,omitempty"`
}

func (m *ListUserGroupsResponse) Reset()                    { *m = ListUserGroupsResponse{} }
func (m *ListUserGroupsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListUserGroupsResponse) ProtoMessage()               {}
func (*ListUserGroupsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{15} }

func (m *ListUserGroupsResponse) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

type SetUserGroupsRequest struct {
	UserId int64   `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Groups []int64 `protobuf:"varint,2,rep,packed,name=groups" json:"groups,omitempty"`
}

func (m *SetUserGroupsRequest) Reset()                    { *m = SetUserGroupsRequest{} }
func (m *SetUserGroupsRequest) String() string            { return proto.CompactTextString(m) }
func (*SetUserGroupsRequest) ProtoMessage()               {}
func (*SetUserGroupsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{16} }

func (m *SetUserGroupsRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SetUserGroupsRequest) GetGroups() []int64 {
	if m != nil {
		return m.Groups
	}
	return nil
}

type SetUserGroupsResponse struct {
	Created   int64 `protobuf:"varint,1,opt,name=created" json:"created,omitempty"`
	Removed   int64 `protobuf:"varint,2,opt,name=removed" json:"removed,omitempty"`
	Untouched int64 `protobuf:"varint,3,opt,name=untouched" json:"untouched,omitempty"`
}

func (m *SetUserGroupsResponse) Reset()                    { *m = SetUserGroupsResponse{} }
func (m *SetUserGroupsResponse) String() string            { return proto.CompactTextString(m) }
func (*SetUserGroupsResponse) ProtoMessage()               {}
func (*SetUserGroupsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{17} }

func (m *SetUserGroupsResponse) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *SetUserGroupsResponse) GetRemoved() int64 {
	if m != nil {
		return m.Removed
	}
	return 0
}

func (m *SetUserGroupsResponse) GetUntouched() int64 {
	if m != nil {
		return m.Untouched
	}
	return 0
}

func init() {
	proto.RegisterType((*User)(nil), "charonrpc.User")
	proto.RegisterType((*CreateUserRequest)(nil), "charonrpc.CreateUserRequest")
	proto.RegisterType((*CreateUserResponse)(nil), "charonrpc.CreateUserResponse")
	proto.RegisterType((*GetUserRequest)(nil), "charonrpc.GetUserRequest")
	proto.RegisterType((*GetUserResponse)(nil), "charonrpc.GetUserResponse")
	proto.RegisterType((*ListUsersRequest)(nil), "charonrpc.ListUsersRequest")
	proto.RegisterType((*ListUsersResponse)(nil), "charonrpc.ListUsersResponse")
	proto.RegisterType((*DeleteUserRequest)(nil), "charonrpc.DeleteUserRequest")
	proto.RegisterType((*ModifyUserRequest)(nil), "charonrpc.ModifyUserRequest")
	proto.RegisterType((*ModifyUserResponse)(nil), "charonrpc.ModifyUserResponse")
	proto.RegisterType((*ListUserPermissionsRequest)(nil), "charonrpc.ListUserPermissionsRequest")
	proto.RegisterType((*ListUserPermissionsResponse)(nil), "charonrpc.ListUserPermissionsResponse")
	proto.RegisterType((*SetUserPermissionsRequest)(nil), "charonrpc.SetUserPermissionsRequest")
	proto.RegisterType((*SetUserPermissionsResponse)(nil), "charonrpc.SetUserPermissionsResponse")
	proto.RegisterType((*ListUserGroupsRequest)(nil), "charonrpc.ListUserGroupsRequest")
	proto.RegisterType((*ListUserGroupsResponse)(nil), "charonrpc.ListUserGroupsResponse")
	proto.RegisterType((*SetUserGroupsRequest)(nil), "charonrpc.SetUserGroupsRequest")
	proto.RegisterType((*SetUserGroupsResponse)(nil), "charonrpc.SetUserGroupsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UserManager service

type UserManagerClient interface {
	Create(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	Modify(ctx context.Context, in *ModifyUserRequest, opts ...grpc.CallOption) (*ModifyUserResponse, error)
	Get(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	List(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	Delete(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*google_protobuf1.BoolValue, error)
	ListPermissions(ctx context.Context, in *ListUserPermissionsRequest, opts ...grpc.CallOption) (*ListUserPermissionsResponse, error)
	SetPermissions(ctx context.Context, in *SetUserPermissionsRequest, opts ...grpc.CallOption) (*SetUserPermissionsResponse, error)
	ListGroups(ctx context.Context, in *ListUserGroupsRequest, opts ...grpc.CallOption) (*ListUserGroupsResponse, error)
	SetGroups(ctx context.Context, in *SetUserGroupsRequest, opts ...grpc.CallOption) (*SetUserGroupsResponse, error)
}

type userManagerClient struct {
	cc *grpc.ClientConn
}

func NewUserManagerClient(cc *grpc.ClientConn) UserManagerClient {
	return &userManagerClient{cc}
}

func (c *userManagerClient) Create(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := grpc.Invoke(ctx, "/charonrpc.UserManager/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) Modify(ctx context.Context, in *ModifyUserRequest, opts ...grpc.CallOption) (*ModifyUserResponse, error) {
	out := new(ModifyUserResponse)
	err := grpc.Invoke(ctx, "/charonrpc.UserManager/Modify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) Get(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := grpc.Invoke(ctx, "/charonrpc.UserManager/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) List(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	out := new(ListUsersResponse)
	err := grpc.Invoke(ctx, "/charonrpc.UserManager/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) Delete(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*google_protobuf1.BoolValue, error) {
	out := new(google_protobuf1.BoolValue)
	err := grpc.Invoke(ctx, "/charonrpc.UserManager/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) ListPermissions(ctx context.Context, in *ListUserPermissionsRequest, opts ...grpc.CallOption) (*ListUserPermissionsResponse, error) {
	out := new(ListUserPermissionsResponse)
	err := grpc.Invoke(ctx, "/charonrpc.UserManager/ListPermissions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) SetPermissions(ctx context.Context, in *SetUserPermissionsRequest, opts ...grpc.CallOption) (*SetUserPermissionsResponse, error) {
	out := new(SetUserPermissionsResponse)
	err := grpc.Invoke(ctx, "/charonrpc.UserManager/SetPermissions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) ListGroups(ctx context.Context, in *ListUserGroupsRequest, opts ...grpc.CallOption) (*ListUserGroupsResponse, error) {
	out := new(ListUserGroupsResponse)
	err := grpc.Invoke(ctx, "/charonrpc.UserManager/ListGroups", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) SetGroups(ctx context.Context, in *SetUserGroupsRequest, opts ...grpc.CallOption) (*SetUserGroupsResponse, error) {
	out := new(SetUserGroupsResponse)
	err := grpc.Invoke(ctx, "/charonrpc.UserManager/SetGroups", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserManager service

type UserManagerServer interface {
	Create(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	Modify(context.Context, *ModifyUserRequest) (*ModifyUserResponse, error)
	Get(context.Context, *GetUserRequest) (*GetUserResponse, error)
	List(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	Delete(context.Context, *DeleteUserRequest) (*google_protobuf1.BoolValue, error)
	ListPermissions(context.Context, *ListUserPermissionsRequest) (*ListUserPermissionsResponse, error)
	SetPermissions(context.Context, *SetUserPermissionsRequest) (*SetUserPermissionsResponse, error)
	ListGroups(context.Context, *ListUserGroupsRequest) (*ListUserGroupsResponse, error)
	SetGroups(context.Context, *SetUserGroupsRequest) (*SetUserGroupsResponse, error)
}

func RegisterUserManagerServer(s *grpc.Server, srv UserManagerServer) {
	s.RegisterService(&_UserManager_serviceDesc, srv)
}

func _UserManager_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/charonrpc.UserManager/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).Create(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_Modify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).Modify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/charonrpc.UserManager/Modify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).Modify(ctx, req.(*ModifyUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/charonrpc.UserManager/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).Get(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/charonrpc.UserManager/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).List(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/charonrpc.UserManager/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).Delete(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_ListPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).ListPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/charonrpc.UserManager/ListPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).ListPermissions(ctx, req.(*ListUserPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_SetPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).SetPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/charonrpc.UserManager/SetPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).SetPermissions(ctx, req.(*SetUserPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_ListGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).ListGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/charonrpc.UserManager/ListGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).ListGroups(ctx, req.(*ListUserGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_SetGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).SetGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/charonrpc.UserManager/SetGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).SetGroups(ctx, req.(*SetUserGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "charonrpc.UserManager",
	HandlerType: (*UserManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _UserManager_Create_Handler,
		},
		{
			MethodName: "Modify",
			Handler:    _UserManager_Modify_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _UserManager_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _UserManager_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UserManager_Delete_Handler,
		},
		{
			MethodName: "ListPermissions",
			Handler:    _UserManager_ListPermissions_Handler,
		},
		{
			MethodName: "SetPermissions",
			Handler:    _UserManager_SetPermissions_Handler,
		},
		{
			MethodName: "ListGroups",
			Handler:    _UserManager_ListGroups_Handler,
		},
		{
			MethodName: "SetGroups",
			Handler:    _UserManager_SetGroups_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

func init() { proto.RegisterFile("user.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 1071 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xdd, 0x72, 0xdb, 0x44,
	0x14, 0xae, 0x2c, 0xff, 0xe9, 0x38, 0x75, 0x92, 0xa5, 0x2d, 0x8a, 0x92, 0x52, 0x57, 0x21, 0xc4,
	0x40, 0x71, 0x66, 0x02, 0x14, 0xd2, 0x0b, 0x98, 0x26, 0x65, 0x32, 0x65, 0x28, 0x93, 0x91, 0xa1,
	0xb7, 0x1e, 0xc5, 0x5a, 0xbb, 0x3b, 0xd8, 0x92, 0xb2, 0xbb, 0x4a, 0xc7, 0x2f, 0xc7, 0x0c, 0x2f,
	0xc1, 0x35, 0xaf, 0xc0, 0x1b, 0x30, 0xbb, 0x5a, 0xc9, 0xfa, 0xb3, 0xdd, 0x5c, 0x70, 0x65, 0xef,
	0xf9, 0xf9, 0xce, 0xd9, 0x73, 0xbe, 0x73, 0x56, 0x00, 0x11, 0xc3, 0x74, 0x10, 0xd2, 0x80, 0x07,
	0xc8, 0x18, 0xbf, 0x73, 0x69, 0xe0, 0xd3, 0x70, 0x6c, 0x3d, 0x99, 0x06, 0xc1, 0x74, 0x86, 0x4f,
	0xa4, 0xe2, 0x3a, 0x9a, 0x9c, 0x70, 0x32, 0xc7, 0x8c, 0xbb, 0xf3, 0x30, 0xb6, 0xb5, 0x3e, 0x29,
	0x1a, 0xbc, 0xa7, 0x6e, 0x18, 0x62, 0xca, 0x94, 0xfe, 0xa3, 0x1b, 0xbe, 0x08, 0x31, 0x3b, 0x89,
	0x7f, 0x12, 0xa1, 0x1f, 0x0b, 0xfd, 0xac, 0xb0, 0x33, 0xa5, 0x41, 0xa4, 0x60, 0xed, 0x3f, 0x75,
	0xa8, 0xff, 0xce, 0x30, 0x45, 0x5d, 0xa8, 0x11, 0xcf, 0xd4, 0x7a, 0x5a, 0x5f, 0x77, 0x6a, 0xc4,
	0x43, 0x16, 0xb4, 0x45, 0xa6, 0xbe, 0x3b, 0xc7, 0x66, 0xad, 0xa7, 0xf5, 0x0d, 0x27, 0x3d, 0xa3,
	0xc7, 0x00, 0x13, 0x42, 0x19, 0x1f, 0x49, 0xad, 0x2e, 0xb5, 0x86, 0x94, 0xfc, 0x2a, 0xd4, 0xfb,
	0x60, 0xcc, 0xdc, 0x44, 0x5b, 0x8f, 0x7d, 0x85, 0x40, 0x2a, 0x9f, 0xc2, 0x16, 0x61, 0x23, 0x16,
	0x85, 0x98, 0x0a, 0x3c, 0xb3, 0xd1, 0xd3, 0xfa, 0x6d, 0xa7, 0x43, 0xd8, 0x30, 0x11, 0x09, 0x7f,
	0xc2, 0x46, 0xee, 0x98, 0x93, 0x5b, 0x6c, 0x36, 0xa5, 0xbe, 0x4d, 0xd8, 0x4b, 0x79, 0x46, 0x7b,
	0xd0, 0x16, 0xfe, 0xdc, 0x9d, 0x4c, 0xcc, 0x96, 0xd4, 0xb5, 0x08, 0x1b, 0x8a, 0xa3, 0x82, 0x1e,
	0x07, 0xfe, 0x84, 0xd0, 0x39, 0xf6, 0xcc, 0x76, 0x02, 0x7d, 0x91, 0x88, 0xd0, 0x19, 0xc0, 0x98,
	0x62, 0x97, 0x63, 0x6f, 0xe4, 0x72, 0xd3, 0xe8, 0x69, 0xfd, 0xce, 0xa9, 0x35, 0x88, 0x4b, 0x3b,
	0x48, 0x4a, 0x3b, 0xf8, 0x2d, 0xa9, 0xbd, 0x63, 0x28, 0xeb, 0x97, 0x1c, 0x3d, 0x5b, 0xba, 0x5e,
	0x2f, 0x4c, 0x90, 0xae, 0xf7, 0x07, 0xaa, 0xb2, 0xaf, 0x7d, 0xfe, 0xfc, 0x9b, 0xd4, 0xfa, 0x7c,
	0x21, 0x02, 0x45, 0xa1, 0x97, 0x04, 0xea, 0x6c, 0x0e, 0xa4, 0xac, 0xe3, 0x40, 0x89, 0xeb, 0xf5,
	0xc2, 0xdc, 0xaa, 0x0c, 0xa4, 0x0c, 0xce, 0x17, 0xf6, 0xbf, 0x35, 0xd8, 0xbd, 0x90, 0x61, 0x45,
	0x1b, 0x1d, 0x7c, 0x13, 0x61, 0xc6, 0x73, 0xdd, 0xd3, 0x0a, 0xdd, 0x3b, 0x82, 0x6e, 0x38, 0x73,
	0x89, 0x3f, 0x0a, 0x5d, 0xc6, 0xde, 0x07, 0xd4, 0x53, 0xfd, 0xbd, 0x2f, 0xa5, 0x57, 0x4a, 0x88,
	0x8e, 0x61, 0x9b, 0xe1, 0x71, 0x44, 0xf1, 0xd2, 0x4e, 0x74, 0x7a, 0xcb, 0xe9, 0xc6, 0xe2, 0xd4,
	0x30, 0xcf, 0x86, 0xfa, 0x5a, 0x36, 0x34, 0x0a, 0x6c, 0x38, 0x29, 0xb0, 0xa1, 0x29, 0x6f, 0xbb,
	0x95, 0xdc, 0xf6, 0x3c, 0x08, 0x66, 0x79, 0x6e, 0x7c, 0x9e, 0xe5, 0x46, 0xab, 0xc2, 0x7a, 0xc9,
	0x94, 0xe3, 0x0c, 0x53, 0xda, 0x15, 0x96, 0x29, 0x6f, 0x4e, 0x0a, 0xbc, 0x31, 0xaa, 0x93, 0x48,
	0x59, 0x64, 0x9f, 0x01, 0xca, 0x96, 0x9c, 0x85, 0x81, 0xcf, 0x30, 0x3a, 0x84, 0xba, 0xbc, 0x83,
	0x26, 0xdd, 0xb7, 0x07, 0xe9, 0x70, 0x0f, 0xa4, 0x99, 0x54, 0xda, 0x3d, 0xe8, 0x5e, 0x62, 0x9e,
	0x6d, 0x55, 0x61, 0xf0, 0xec, 0xe7, 0xb0, 0x9d, 0x5a, 0xdc, 0x05, 0xf9, 0x9f, 0x1a, 0xec, 0xfc,
	0x42, 0x98, 0xf4, 0x64, 0x09, 0x78, 0xb1, 0xbe, 0xda, 0xa6, 0xfa, 0x66, 0x8b, 0x56, 0x5b, 0x57,
	0xb4, 0xfc, 0x38, 0xe8, 0x8a, 0xa5, 0x37, 0x2b, 0xc6, 0xe1, 0x08, 0x9a, 0xc1, 0x64, 0xc2, 0x30,
	0x37, 0xbd, 0x2a, 0x3e, 0x2b, 0x25, 0x3a, 0x84, 0xc6, 0x8c, 0xcc, 0x09, 0x37, 0x71, 0x95, 0x55,
	0xac, 0x43, 0x67, 0x50, 0x67, 0x01, 0xe5, 0xe6, 0xa4, 0xa7, 0xf7, 0x3b, 0xa7, 0x47, 0x99, 0x6a,
	0x14, 0xaf, 0x3f, 0x18, 0x06, 0x94, 0xff, 0xe4, 0x73, 0xba, 0x70, 0xa4, 0x8b, 0xf5, 0x1d, 0x18,
	0xa9, 0x08, 0xed, 0x80, 0xfe, 0x07, 0x5e, 0xa8, 0xf1, 0x10, 0x7f, 0xd1, 0x03, 0x68, 0xdc, 0xba,
	0xb3, 0x28, 0x5e, 0x78, 0x6d, 0x27, 0x3e, 0xbc, 0xa8, 0x7d, 0xaf, 0xfd, 0x5c, 0x6f, 0xd7, 0x77,
	0x3c, 0xfb, 0x05, 0xec, 0x66, 0x42, 0xa8, 0xe6, 0x1c, 0x41, 0x43, 0x54, 0x8e, 0x99, 0x9a, 0xcc,
	0xa7, 0xd4, 0x9d, 0x58, 0x6b, 0x1f, 0xc2, 0xee, 0x2b, 0x3c, 0xc3, 0xf9, 0x31, 0x2d, 0xf6, 0xfe,
	0x2f, 0x1d, 0x76, 0xdf, 0x04, 0x1e, 0x99, 0x2c, 0xd6, 0x58, 0xa1, 0x2f, 0x0a, 0xab, 0xb9, 0x73,
	0xda, 0x4d, 0x0a, 0x35, 0xe4, 0x94, 0xf8, 0xd3, 0xcc, 0xb0, 0x7f, 0x5b, 0x1a, 0x76, 0xbd, 0xd2,
	0x63, 0xf3, 0xf0, 0xd7, 0x2b, 0x87, 0xff, 0xab, 0xdc, 0xf0, 0x37, 0x2a, 0xb1, 0x33, 0xcb, 0xe0,
	0xcb, 0xec, 0x32, 0x68, 0x56, 0xe7, 0xbe, 0x72, 0x39, 0xb4, 0xee, 0xb4, 0x1c, 0xda, 0x1f, 0xbc,
	0x1c, 0x8c, 0xbb, 0x2c, 0x07, 0xf8, 0x80, 0xe5, 0x90, 0x6d, 0xe1, 0x5d, 0x46, 0xf8, 0x19, 0x58,
	0x09, 0xbf, 0xae, 0x30, 0x9d, 0x13, 0xc6, 0x48, 0xe0, 0xb3, 0x55, 0x64, 0xf9, 0x11, 0xf6, 0x2b,
	0xad, 0x55, 0xc4, 0x1e, 0x74, 0xc2, 0xa5, 0x58, 0xb2, 0xd3, 0x70, 0xb2, 0x22, 0xfb, 0x2d, 0xec,
	0x0d, 0xf1, 0xaa, 0x68, 0x1f, 0x43, 0x4b, 0xe4, 0x34, 0x4a, 0x43, 0x36, 0xc5, 0xf1, 0xb5, 0x57,
	0xc4, 0xad, 0x95, 0x71, 0x7d, 0xb0, 0xaa, 0x70, 0x55, 0x5e, 0x26, 0xb4, 0xd4, 0x5e, 0x50, 0xc0,
	0xc9, 0x51, 0x68, 0x28, 0x9e, 0x07, 0xb7, 0x38, 0x7e, 0x91, 0x74, 0x27, 0x39, 0xa2, 0x03, 0x30,
	0x22, 0x9f, 0x07, 0xd1, 0xf8, 0x1d, 0x8e, 0x09, 0xac, 0x3b, 0x4b, 0x81, 0x7d, 0x0c, 0x0f, 0x93,
	0x42, 0x5c, 0x8a, 0x4f, 0x9b, 0x95, 0x15, 0x3b, 0x87, 0x47, 0x45, 0x43, 0x95, 0x54, 0x1f, 0x9a,
	0xf2, 0xab, 0x28, 0x99, 0xe2, 0x9d, 0x4c, 0x83, 0xa4, 0xa9, 0xa3, 0xf4, 0xf6, 0x25, 0x3c, 0x50,
	0x97, 0xcb, 0xc7, 0x5a, 0x59, 0xaf, 0x47, 0x29, 0xb4, 0x28, 0x95, 0x9e, 0x02, 0x11, 0x78, 0x58,
	0x00, 0xfa, 0xbf, 0x0a, 0x74, 0xfa, 0x77, 0x03, 0x3a, 0x22, 0xd0, 0x1b, 0xd7, 0x77, 0xa7, 0x98,
	0xa2, 0x4b, 0x68, 0xc6, 0xef, 0x17, 0x3a, 0xc8, 0xdc, 0xb3, 0xf4, 0x15, 0x61, 0x3d, 0x5e, 0xa1,
	0x8d, 0x13, 0xb5, 0xef, 0x09, 0xa0, 0x98, 0xeb, 0x39, 0xa0, 0xd2, 0x06, 0xcb, 0x01, 0x95, 0x87,
	0xc3, 0xbe, 0x87, 0x7e, 0x00, 0xfd, 0x12, 0x73, 0xb4, 0x97, 0x2d, 0x7b, 0xee, 0x99, 0xb4, 0xac,
	0x2a, 0x55, 0xea, 0x7f, 0x01, 0x75, 0xd1, 0x59, 0xb4, 0xbf, 0xe6, 0x35, 0xb0, 0x0e, 0xaa, 0x95,
	0x29, 0xc8, 0x2b, 0x68, 0xc6, 0x2b, 0x3a, 0x77, 0x9b, 0xd2, 0xd6, 0xb6, 0xca, 0xdf, 0x71, 0x62,
	0x0b, 0xbc, 0x15, 0x8f, 0x85, 0x7d, 0x0f, 0x5d, 0xc3, 0xb6, 0x00, 0xcf, 0x50, 0x1f, 0x55, 0xbd,
	0x51, 0xe5, 0x91, 0xb3, 0x3e, 0xdb, 0x64, 0x96, 0x66, 0x3a, 0x82, 0xee, 0x10, 0xe7, 0x42, 0x7c,
	0x9a, 0xf1, 0x5d, 0x39, 0xd4, 0xd6, 0xd1, 0x06, 0xab, 0x34, 0xc0, 0x10, 0x40, 0x64, 0x10, 0x33,
	0x13, 0xf5, 0x2a, 0x12, 0xcb, 0xb1, 0xdf, 0x7a, 0xba, 0xc6, 0x22, 0x05, 0xbd, 0x02, 0x63, 0x88,
	0x13, 0xcc, 0x27, 0xe5, 0x54, 0xf2, 0x90, 0xbd, 0xd5, 0x06, 0x09, 0xe2, 0x75, 0x53, 0x76, 0xe0,
	0xeb, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x17, 0x95, 0x09, 0xe0, 0x55, 0x0d, 0x00, 0x00,
}
