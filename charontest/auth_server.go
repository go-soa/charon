// Code generated by mockery v1.0.0. DO NOT EDIT.

package charontest

import charonrpc "github.com/piotrkowalczuk/charon/charonrpc"
import context "context"
import empty "github.com/golang/protobuf/ptypes/empty"
import mock "github.com/stretchr/testify/mock"
import wrappers "github.com/golang/protobuf/ptypes/wrappers"

// AuthServer is an autogenerated mock type for the AuthServer type
type AuthServer struct {
	mock.Mock
}

// Actor provides a mock function with given fields: _a0, _a1
func (_m *AuthServer) Actor(_a0 context.Context, _a1 *wrappers.StringValue) (*charonrpc.ActorResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *charonrpc.ActorResponse
	if rf, ok := ret.Get(0).(func(context.Context, *wrappers.StringValue) *charonrpc.ActorResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*charonrpc.ActorResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *wrappers.StringValue) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BelongsTo provides a mock function with given fields: _a0, _a1
func (_m *AuthServer) BelongsTo(_a0 context.Context, _a1 *charonrpc.BelongsToRequest) (*wrappers.BoolValue, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *wrappers.BoolValue
	if rf, ok := ret.Get(0).(func(context.Context, *charonrpc.BelongsToRequest) *wrappers.BoolValue); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wrappers.BoolValue)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *charonrpc.BelongsToRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsAuthenticated provides a mock function with given fields: _a0, _a1
func (_m *AuthServer) IsAuthenticated(_a0 context.Context, _a1 *charonrpc.IsAuthenticatedRequest) (*wrappers.BoolValue, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *wrappers.BoolValue
	if rf, ok := ret.Get(0).(func(context.Context, *charonrpc.IsAuthenticatedRequest) *wrappers.BoolValue); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wrappers.BoolValue)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *charonrpc.IsAuthenticatedRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsGranted provides a mock function with given fields: _a0, _a1
func (_m *AuthServer) IsGranted(_a0 context.Context, _a1 *charonrpc.IsGrantedRequest) (*wrappers.BoolValue, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *wrappers.BoolValue
	if rf, ok := ret.Get(0).(func(context.Context, *charonrpc.IsGrantedRequest) *wrappers.BoolValue); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wrappers.BoolValue)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *charonrpc.IsGrantedRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: _a0, _a1
func (_m *AuthServer) Login(_a0 context.Context, _a1 *charonrpc.LoginRequest) (*wrappers.StringValue, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *wrappers.StringValue
	if rf, ok := ret.Get(0).(func(context.Context, *charonrpc.LoginRequest) *wrappers.StringValue); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wrappers.StringValue)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *charonrpc.LoginRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logout provides a mock function with given fields: _a0, _a1
func (_m *AuthServer) Logout(_a0 context.Context, _a1 *charonrpc.LogoutRequest) (*empty.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *charonrpc.LogoutRequest) *empty.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *charonrpc.LogoutRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
