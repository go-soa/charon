// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.2
// source: github.com/piotrkowalczuk/charon/pb/rpc/charond/v1/refresh_token.proto

package charond

import (
	reflect "reflect"
	sync "sync"

	ntypes "github.com/piotrkowalczuk/ntypes"
	qtypes "github.com/piotrkowalczuk/qtypes"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RefreshToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token      string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Notes      *ntypes.String         `protobuf:"bytes,2,opt,name=notes,proto3" json:"notes,omitempty"`
	UserId     int64                  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Revoked    bool                   `protobuf:"varint,4,opt,name=revoked,proto3" json:"revoked,omitempty"`
	ExpireAt   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`
	LastUsedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=last_used_at,json=lastUsedAt,proto3" json:"last_used_at,omitempty"`
	CreatedAt  *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	CreatedBy  *ntypes.Int64          `protobuf:"bytes,8,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	UpdatedAt  *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	UpdatedBy  *ntypes.Int64          `protobuf:"bytes,10,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
}

func (x *RefreshToken) Reset() {
	*x = RefreshToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshToken) ProtoMessage() {}

func (x *RefreshToken) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshToken.ProtoReflect.Descriptor instead.
func (*RefreshToken) Descriptor() ([]byte, []int) {
	return file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_rawDescGZIP(), []int{0}
}

func (x *RefreshToken) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *RefreshToken) GetNotes() *ntypes.String {
	if x != nil {
		return x.Notes
	}
	return nil
}

func (x *RefreshToken) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *RefreshToken) GetRevoked() bool {
	if x != nil {
		return x.Revoked
	}
	return false
}

func (x *RefreshToken) GetExpireAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireAt
	}
	return nil
}

func (x *RefreshToken) GetLastUsedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUsedAt
	}
	return nil
}

func (x *RefreshToken) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *RefreshToken) GetCreatedBy() *ntypes.Int64 {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *RefreshToken) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *RefreshToken) GetUpdatedBy() *ntypes.Int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return nil
}

type RefreshTokenQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     *qtypes.Int64     `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Notes      *qtypes.String    `protobuf:"bytes,2,opt,name=notes,proto3" json:"notes,omitempty"`
	Revoked    *ntypes.Bool      `protobuf:"bytes,3,opt,name=revoked,proto3" json:"revoked,omitempty"`
	ExpireAt   *qtypes.Timestamp `protobuf:"bytes,4,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`
	LastUsedAt *qtypes.Timestamp `protobuf:"bytes,5,opt,name=last_used_at,json=lastUsedAt,proto3" json:"last_used_at,omitempty"`
	CreatedAt  *qtypes.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt  *qtypes.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *RefreshTokenQuery) Reset() {
	*x = RefreshTokenQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshTokenQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshTokenQuery) ProtoMessage() {}

func (x *RefreshTokenQuery) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshTokenQuery.ProtoReflect.Descriptor instead.
func (*RefreshTokenQuery) Descriptor() ([]byte, []int) {
	return file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_rawDescGZIP(), []int{1}
}

func (x *RefreshTokenQuery) GetUserId() *qtypes.Int64 {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *RefreshTokenQuery) GetNotes() *qtypes.String {
	if x != nil {
		return x.Notes
	}
	return nil
}

func (x *RefreshTokenQuery) GetRevoked() *ntypes.Bool {
	if x != nil {
		return x.Revoked
	}
	return nil
}

func (x *RefreshTokenQuery) GetExpireAt() *qtypes.Timestamp {
	if x != nil {
		return x.ExpireAt
	}
	return nil
}

func (x *RefreshTokenQuery) GetLastUsedAt() *qtypes.Timestamp {
	if x != nil {
		return x.LastUsedAt
	}
	return nil
}

func (x *RefreshTokenQuery) GetCreatedAt() *qtypes.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *RefreshTokenQuery) GetUpdatedAt() *qtypes.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type CreateRefreshTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Notes    *ntypes.String         `protobuf:"bytes,1,opt,name=notes,proto3" json:"notes,omitempty"`
	ExpireAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`
}

func (x *CreateRefreshTokenRequest) Reset() {
	*x = CreateRefreshTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRefreshTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRefreshTokenRequest) ProtoMessage() {}

func (x *CreateRefreshTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRefreshTokenRequest.ProtoReflect.Descriptor instead.
func (*CreateRefreshTokenRequest) Descriptor() ([]byte, []int) {
	return file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_rawDescGZIP(), []int{2}
}

func (x *CreateRefreshTokenRequest) GetNotes() *ntypes.String {
	if x != nil {
		return x.Notes
	}
	return nil
}

func (x *CreateRefreshTokenRequest) GetExpireAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireAt
	}
	return nil
}

type CreateRefreshTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshToken *RefreshToken `protobuf:"bytes,1,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
}

func (x *CreateRefreshTokenResponse) Reset() {
	*x = CreateRefreshTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRefreshTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRefreshTokenResponse) ProtoMessage() {}

func (x *CreateRefreshTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRefreshTokenResponse.ProtoReflect.Descriptor instead.
func (*CreateRefreshTokenResponse) Descriptor() ([]byte, []int) {
	return file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_rawDescGZIP(), []int{3}
}

func (x *CreateRefreshTokenResponse) GetRefreshToken() *RefreshToken {
	if x != nil {
		return x.RefreshToken
	}
	return nil
}

type ListRefreshTokensRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset  *ntypes.Int64      `protobuf:"bytes,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit   *ntypes.Int64      `protobuf:"bytes,2,opt,name=limit,proto3" json:"limit,omitempty"`
	OrderBy []*Order           `protobuf:"bytes,3,rep,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	Query   *RefreshTokenQuery `protobuf:"bytes,11,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *ListRefreshTokensRequest) Reset() {
	*x = ListRefreshTokensRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRefreshTokensRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRefreshTokensRequest) ProtoMessage() {}

func (x *ListRefreshTokensRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRefreshTokensRequest.ProtoReflect.Descriptor instead.
func (*ListRefreshTokensRequest) Descriptor() ([]byte, []int) {
	return file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_rawDescGZIP(), []int{4}
}

func (x *ListRefreshTokensRequest) GetOffset() *ntypes.Int64 {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *ListRefreshTokensRequest) GetLimit() *ntypes.Int64 {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *ListRefreshTokensRequest) GetOrderBy() []*Order {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *ListRefreshTokensRequest) GetQuery() *RefreshTokenQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

type ListRefreshTokensResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshTokens []*RefreshToken `protobuf:"bytes,1,rep,name=refresh_tokens,json=refreshTokens,proto3" json:"refresh_tokens,omitempty"`
}

func (x *ListRefreshTokensResponse) Reset() {
	*x = ListRefreshTokensResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRefreshTokensResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRefreshTokensResponse) ProtoMessage() {}

func (x *ListRefreshTokensResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRefreshTokensResponse.ProtoReflect.Descriptor instead.
func (*ListRefreshTokensResponse) Descriptor() ([]byte, []int) {
	return file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_rawDescGZIP(), []int{5}
}

func (x *ListRefreshTokensResponse) GetRefreshTokens() []*RefreshToken {
	if x != nil {
		return x.RefreshTokens
	}
	return nil
}

type RevokeRefreshTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token  string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	UserId int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *RevokeRefreshTokenRequest) Reset() {
	*x = RevokeRefreshTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevokeRefreshTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeRefreshTokenRequest) ProtoMessage() {}

func (x *RevokeRefreshTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeRefreshTokenRequest.ProtoReflect.Descriptor instead.
func (*RevokeRefreshTokenRequest) Descriptor() ([]byte, []int) {
	return file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_rawDescGZIP(), []int{6}
}

func (x *RevokeRefreshTokenRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *RevokeRefreshTokenRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type RevokeRefreshTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshToken *RefreshToken `protobuf:"bytes,1,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
}

func (x *RevokeRefreshTokenResponse) Reset() {
	*x = RevokeRefreshTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevokeRefreshTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeRefreshTokenResponse) ProtoMessage() {}

func (x *RevokeRefreshTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeRefreshTokenResponse.ProtoReflect.Descriptor instead.
func (*RevokeRefreshTokenResponse) Descriptor() ([]byte, []int) {
	return file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_rawDescGZIP(), []int{7}
}

func (x *RevokeRefreshTokenResponse) GetRefreshToken() *RefreshToken {
	if x != nil {
		return x.RefreshToken
	}
	return nil
}

var File_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto protoreflect.FileDescriptor

var file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_rawDesc = []byte{
	0x0a, 0x46, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x69, 0x6f,
	0x74, 0x72, 0x6b, 0x6f, 0x77, 0x61, 0x6c, 0x63, 0x7a, 0x75, 0x6b, 0x2f, 0x63, 0x68, 0x61, 0x72,
	0x6f, 0x6e, 0x2f, 0x70, 0x62, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e,
	0x64, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x69, 0x6f,
	0x74, 0x72, 0x6b, 0x6f, 0x77, 0x61, 0x6c, 0x63, 0x7a, 0x75, 0x6b, 0x2f, 0x63, 0x68, 0x61, 0x72,
	0x6f, 0x6e, 0x2f, 0x70, 0x62, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e,
	0x64, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x13, 0x71, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x71, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc6, 0x03, 0x0a, 0x0c,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x24, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x41, 0x74, 0x12, 0x3c, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x22, 0xd2, 0x02, 0x0a, 0x11, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x71, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x71, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x6f,
	0x6b, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x07, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64,
	0x12, 0x2e, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x71, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x41, 0x74,
	0x12, 0x33, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x71, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55,
	0x73, 0x65, 0x64, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x71, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x71, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x7a, 0x0a, 0x19, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x09,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x41, 0x74, 0x22, 0x66, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61,
	0x72, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xe5, 0x01,
	0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x23, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x62, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f,
	0x6e, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12,
	0x3e, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x72,
	0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4a,
	0x04, 0x08, 0x04, 0x10, 0x0b, 0x22, 0x67, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61,
	0x72, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0x4a,
	0x0a, 0x19, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x66, 0x0a, 0x1a, 0x52, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61,
	0x72, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x32, 0xe4, 0x02, 0x0a, 0x13, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x6f, 0x0a, 0x06, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x12, 0x30, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x06, 0x52,
	0x65, 0x76, 0x6f, 0x6b, 0x65, 0x12, 0x30, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x04,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x60, 0x0a, 0x20, 0x63, 0x6f, 0x6d,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a,
	0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x69, 0x6f, 0x74,
	0x72, 0x6b, 0x6f, 0x77, 0x61, 0x6c, 0x63, 0x7a, 0x75, 0x6b, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x6f,
	0x6e, 0x2f, 0x70, 0x62, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x64,
	0x2f, 0x76, 0x31, 0x3b, 0x63, 0x68, 0x61, 0x72, 0x6f, 0x6e, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_rawDescOnce sync.Once
	file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_rawDescData = file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_rawDesc
)

func file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_rawDescGZIP() []byte {
	file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_rawDescOnce.Do(func() {
		file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_rawDescData)
	})
	return file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_rawDescData
}

var file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_goTypes = []any{
	(*RefreshToken)(nil),               // 0: charon.rpc.charond.v1.RefreshToken
	(*RefreshTokenQuery)(nil),          // 1: charon.rpc.charond.v1.RefreshTokenQuery
	(*CreateRefreshTokenRequest)(nil),  // 2: charon.rpc.charond.v1.CreateRefreshTokenRequest
	(*CreateRefreshTokenResponse)(nil), // 3: charon.rpc.charond.v1.CreateRefreshTokenResponse
	(*ListRefreshTokensRequest)(nil),   // 4: charon.rpc.charond.v1.ListRefreshTokensRequest
	(*ListRefreshTokensResponse)(nil),  // 5: charon.rpc.charond.v1.ListRefreshTokensResponse
	(*RevokeRefreshTokenRequest)(nil),  // 6: charon.rpc.charond.v1.RevokeRefreshTokenRequest
	(*RevokeRefreshTokenResponse)(nil), // 7: charon.rpc.charond.v1.RevokeRefreshTokenResponse
	(*ntypes.String)(nil),              // 8: ntypes.String
	(*timestamppb.Timestamp)(nil),      // 9: google.protobuf.Timestamp
	(*ntypes.Int64)(nil),               // 10: ntypes.Int64
	(*qtypes.Int64)(nil),               // 11: qtypes.Int64
	(*qtypes.String)(nil),              // 12: qtypes.String
	(*ntypes.Bool)(nil),                // 13: ntypes.Bool
	(*qtypes.Timestamp)(nil),           // 14: qtypes.Timestamp
	(*Order)(nil),                      // 15: charon.rpc.charond.v1.Order
}
var file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_depIdxs = []int32{
	8,  // 0: charon.rpc.charond.v1.RefreshToken.notes:type_name -> ntypes.String
	9,  // 1: charon.rpc.charond.v1.RefreshToken.expire_at:type_name -> google.protobuf.Timestamp
	9,  // 2: charon.rpc.charond.v1.RefreshToken.last_used_at:type_name -> google.protobuf.Timestamp
	9,  // 3: charon.rpc.charond.v1.RefreshToken.created_at:type_name -> google.protobuf.Timestamp
	10, // 4: charon.rpc.charond.v1.RefreshToken.created_by:type_name -> ntypes.Int64
	9,  // 5: charon.rpc.charond.v1.RefreshToken.updated_at:type_name -> google.protobuf.Timestamp
	10, // 6: charon.rpc.charond.v1.RefreshToken.updated_by:type_name -> ntypes.Int64
	11, // 7: charon.rpc.charond.v1.RefreshTokenQuery.user_id:type_name -> qtypes.Int64
	12, // 8: charon.rpc.charond.v1.RefreshTokenQuery.notes:type_name -> qtypes.String
	13, // 9: charon.rpc.charond.v1.RefreshTokenQuery.revoked:type_name -> ntypes.Bool
	14, // 10: charon.rpc.charond.v1.RefreshTokenQuery.expire_at:type_name -> qtypes.Timestamp
	14, // 11: charon.rpc.charond.v1.RefreshTokenQuery.last_used_at:type_name -> qtypes.Timestamp
	14, // 12: charon.rpc.charond.v1.RefreshTokenQuery.created_at:type_name -> qtypes.Timestamp
	14, // 13: charon.rpc.charond.v1.RefreshTokenQuery.updated_at:type_name -> qtypes.Timestamp
	8,  // 14: charon.rpc.charond.v1.CreateRefreshTokenRequest.notes:type_name -> ntypes.String
	9,  // 15: charon.rpc.charond.v1.CreateRefreshTokenRequest.expire_at:type_name -> google.protobuf.Timestamp
	0,  // 16: charon.rpc.charond.v1.CreateRefreshTokenResponse.refresh_token:type_name -> charon.rpc.charond.v1.RefreshToken
	10, // 17: charon.rpc.charond.v1.ListRefreshTokensRequest.offset:type_name -> ntypes.Int64
	10, // 18: charon.rpc.charond.v1.ListRefreshTokensRequest.limit:type_name -> ntypes.Int64
	15, // 19: charon.rpc.charond.v1.ListRefreshTokensRequest.order_by:type_name -> charon.rpc.charond.v1.Order
	1,  // 20: charon.rpc.charond.v1.ListRefreshTokensRequest.query:type_name -> charon.rpc.charond.v1.RefreshTokenQuery
	0,  // 21: charon.rpc.charond.v1.ListRefreshTokensResponse.refresh_tokens:type_name -> charon.rpc.charond.v1.RefreshToken
	0,  // 22: charon.rpc.charond.v1.RevokeRefreshTokenResponse.refresh_token:type_name -> charon.rpc.charond.v1.RefreshToken
	2,  // 23: charon.rpc.charond.v1.RefreshTokenManager.Create:input_type -> charon.rpc.charond.v1.CreateRefreshTokenRequest
	6,  // 24: charon.rpc.charond.v1.RefreshTokenManager.Revoke:input_type -> charon.rpc.charond.v1.RevokeRefreshTokenRequest
	4,  // 25: charon.rpc.charond.v1.RefreshTokenManager.List:input_type -> charon.rpc.charond.v1.ListRefreshTokensRequest
	3,  // 26: charon.rpc.charond.v1.RefreshTokenManager.Create:output_type -> charon.rpc.charond.v1.CreateRefreshTokenResponse
	7,  // 27: charon.rpc.charond.v1.RefreshTokenManager.Revoke:output_type -> charon.rpc.charond.v1.RevokeRefreshTokenResponse
	5,  // 28: charon.rpc.charond.v1.RefreshTokenManager.List:output_type -> charon.rpc.charond.v1.ListRefreshTokensResponse
	26, // [26:29] is the sub-list for method output_type
	23, // [23:26] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_init() }
func file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_init() {
	if File_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto != nil {
		return
	}
	file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*RefreshToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*RefreshTokenQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CreateRefreshTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CreateRefreshTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ListRefreshTokensRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ListRefreshTokensResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*RevokeRefreshTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*RevokeRefreshTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_goTypes,
		DependencyIndexes: file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_depIdxs,
		MessageInfos:      file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_msgTypes,
	}.Build()
	File_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto = out.File
	file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_rawDesc = nil
	file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_goTypes = nil
	file_github_com_piotrkowalczuk_charon_pb_rpc_charond_v1_refresh_token_proto_depIdxs = nil
}
