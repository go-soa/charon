// Code generated by mockery v1.0.0
package model

import charon "github.com/piotrkowalczuk/charon"
import context "context"
import mock "github.com/stretchr/testify/mock"

// MockPermissionProvider is an autogenerated mock type for the PermissionProvider type
type MockPermissionProvider struct {
	mock.Mock
}

// Find provides a mock function with given fields: ctx, criteria
func (_m *MockPermissionProvider) Find(ctx context.Context, criteria *PermissionFindExpr) ([]*PermissionEntity, error) {
	ret := _m.Called(ctx, criteria)

	var r0 []*PermissionEntity
	if rf, ok := ret.Get(0).(func(context.Context, *PermissionFindExpr) []*PermissionEntity); ok {
		r0 = rf(ctx, criteria)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*PermissionEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *PermissionFindExpr) error); ok {
		r1 = rf(ctx, criteria)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByGroupID provides a mock function with given fields: ctx, groupID
func (_m *MockPermissionProvider) FindByGroupID(ctx context.Context, groupID int64) ([]*PermissionEntity, error) {
	ret := _m.Called(ctx, groupID)

	var r0 []*PermissionEntity
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*PermissionEntity); ok {
		r0 = rf(ctx, groupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*PermissionEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, groupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUserID provides a mock function with given fields: ctx, userID
func (_m *MockPermissionProvider) FindByUserID(ctx context.Context, userID int64) ([]*PermissionEntity, error) {
	ret := _m.Called(ctx, userID)

	var r0 []*PermissionEntity
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*PermissionEntity); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*PermissionEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneByID provides a mock function with given fields: ctx, id
func (_m *MockPermissionProvider) FindOneByID(ctx context.Context, id int64) (*PermissionEntity, error) {
	ret := _m.Called(ctx, id)

	var r0 *PermissionEntity
	if rf, ok := ret.Get(0).(func(context.Context, int64) *PermissionEntity); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PermissionEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, entity
func (_m *MockPermissionProvider) Insert(ctx context.Context, entity *PermissionEntity) (*PermissionEntity, error) {
	ret := _m.Called(ctx, entity)

	var r0 *PermissionEntity
	if rf, ok := ret.Get(0).(func(context.Context, *PermissionEntity) *PermissionEntity); ok {
		r0 = rf(ctx, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PermissionEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *PermissionEntity) error); ok {
		r1 = rf(ctx, entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, permissions
func (_m *MockPermissionProvider) Register(ctx context.Context, permissions charon.Permissions) (int64, int64, int64, error) {
	ret := _m.Called(ctx, permissions)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, charon.Permissions) int64); ok {
		r0 = rf(ctx, permissions)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(context.Context, charon.Permissions) int64); ok {
		r1 = rf(ctx, permissions)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 int64
	if rf, ok := ret.Get(2).(func(context.Context, charon.Permissions) int64); ok {
		r2 = rf(ctx, permissions)
	} else {
		r2 = ret.Get(2).(int64)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, charon.Permissions) error); ok {
		r3 = rf(ctx, permissions)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}
