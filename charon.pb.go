// Code generated by protoc-gen-go.
// source: charon.proto
// DO NOT EDIT!

/*
Package charon is a generated protocol buffer package.

It is generated from these files:
	charon.proto

It has these top-level messages:
	LoginRequest
	LoginResponse
	LogoutRequest
	LogoutResponse
	IsAuthenticatedRequest
	IsAuthenticatedResponse
	IsGrantedRequest
	IsGrantedResponse
	BelongsToRequest
	BelongsToResponse
	SubjectRequest
	SubjectResponse
	User
	CreateUserRequest
	CreateUserResponse
	GetUserRequest
	GetUserResponse
	ListUsersRequest
	ListUsersResponse
	DeleteUserRequest
	DeleteUserResponse
	ModifyUserRequest
	ModifyUserResponse
	ListUserPermissionsRequest
	ListUserPermissionsResponse
	SetUserPermissionsRequest
	SetUserPermissionsResponse
	ListUserGroupsRequest
	ListUserGroupsResponse
	SetUserGroupsRequest
	SetUserGroupsResponse
	RegisterPermissionsRequest
	RegisterPermissionsResponse
	ListPermissionsRequest
	ListPermissionsResponse
	GetPermissionRequest
	GetPermissionResponse
	Group
	CreateGroupRequest
	CreateGroupResponse
	GetGroupRequest
	GetGroupResponse
	ListGroupsRequest
	ListGroupsResponse
	DeleteGroupRequest
	DeleteGroupResponse
	ModifyGroupRequest
	ModifyGroupResponse
	SetGroupPermissionsRequest
	SetGroupPermissionsResponse
	ListGroupPermissionsRequest
	ListGroupPermissionsResponse
*/
package charon

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import mnemosyne "github.com/piotrkowalczuk/mnemosyne"
import protot "github.com/piotrkowalczuk/protot"
import nilt "github.com/piotrkowalczuk/nilt"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type LoginRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type LoginResponse struct {
	Token *mnemosyne.Token `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *LoginResponse) Reset()                    { *m = LoginResponse{} }
func (m *LoginResponse) String() string            { return proto.CompactTextString(m) }
func (*LoginResponse) ProtoMessage()               {}
func (*LoginResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LoginResponse) GetToken() *mnemosyne.Token {
	if m != nil {
		return m.Token
	}
	return nil
}

type LogoutRequest struct {
	Token *mnemosyne.Token `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *LogoutRequest) Reset()                    { *m = LogoutRequest{} }
func (m *LogoutRequest) String() string            { return proto.CompactTextString(m) }
func (*LogoutRequest) ProtoMessage()               {}
func (*LogoutRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *LogoutRequest) GetToken() *mnemosyne.Token {
	if m != nil {
		return m.Token
	}
	return nil
}

type LogoutResponse struct {
}

func (m *LogoutResponse) Reset()                    { *m = LogoutResponse{} }
func (m *LogoutResponse) String() string            { return proto.CompactTextString(m) }
func (*LogoutResponse) ProtoMessage()               {}
func (*LogoutResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type IsAuthenticatedRequest struct {
	Token *mnemosyne.Token `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *IsAuthenticatedRequest) Reset()                    { *m = IsAuthenticatedRequest{} }
func (m *IsAuthenticatedRequest) String() string            { return proto.CompactTextString(m) }
func (*IsAuthenticatedRequest) ProtoMessage()               {}
func (*IsAuthenticatedRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *IsAuthenticatedRequest) GetToken() *mnemosyne.Token {
	if m != nil {
		return m.Token
	}
	return nil
}

type IsAuthenticatedResponse struct {
	Authenticated bool `protobuf:"varint,1,opt,name=authenticated" json:"authenticated,omitempty"`
}

func (m *IsAuthenticatedResponse) Reset()                    { *m = IsAuthenticatedResponse{} }
func (m *IsAuthenticatedResponse) String() string            { return proto.CompactTextString(m) }
func (*IsAuthenticatedResponse) ProtoMessage()               {}
func (*IsAuthenticatedResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type IsGrantedRequest struct {
	UserId     int64  `protobuf:"varint,1,opt,name=user_id" json:"user_id,omitempty"`
	Permission string `protobuf:"bytes,2,opt,name=permission" json:"permission,omitempty"`
}

func (m *IsGrantedRequest) Reset()                    { *m = IsGrantedRequest{} }
func (m *IsGrantedRequest) String() string            { return proto.CompactTextString(m) }
func (*IsGrantedRequest) ProtoMessage()               {}
func (*IsGrantedRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type IsGrantedResponse struct {
	Granted bool `protobuf:"varint,1,opt,name=granted" json:"granted,omitempty"`
}

func (m *IsGrantedResponse) Reset()                    { *m = IsGrantedResponse{} }
func (m *IsGrantedResponse) String() string            { return proto.CompactTextString(m) }
func (*IsGrantedResponse) ProtoMessage()               {}
func (*IsGrantedResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type BelongsToRequest struct {
	UserId  int64 `protobuf:"varint,1,opt,name=user_id" json:"user_id,omitempty"`
	GroupId int64 `protobuf:"varint,2,opt,name=group_id" json:"group_id,omitempty"`
}

func (m *BelongsToRequest) Reset()                    { *m = BelongsToRequest{} }
func (m *BelongsToRequest) String() string            { return proto.CompactTextString(m) }
func (*BelongsToRequest) ProtoMessage()               {}
func (*BelongsToRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type BelongsToResponse struct {
	Belongs bool `protobuf:"varint,1,opt,name=belongs" json:"belongs,omitempty"`
}

func (m *BelongsToResponse) Reset()                    { *m = BelongsToResponse{} }
func (m *BelongsToResponse) String() string            { return proto.CompactTextString(m) }
func (*BelongsToResponse) ProtoMessage()               {}
func (*BelongsToResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type SubjectRequest struct {
	Token *mnemosyne.Token `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *SubjectRequest) Reset()                    { *m = SubjectRequest{} }
func (m *SubjectRequest) String() string            { return proto.CompactTextString(m) }
func (*SubjectRequest) ProtoMessage()               {}
func (*SubjectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *SubjectRequest) GetToken() *mnemosyne.Token {
	if m != nil {
		return m.Token
	}
	return nil
}

type SubjectResponse struct {
	Id          int64    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Username    string   `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	FirstName   string   `protobuf:"bytes,3,opt,name=first_name" json:"first_name,omitempty"`
	LastName    string   `protobuf:"bytes,4,opt,name=last_name" json:"last_name,omitempty"`
	Permissions []string `protobuf:"bytes,5,rep,name=permissions" json:"permissions,omitempty"`
	IsSuperuser bool     `protobuf:"varint,6,opt,name=is_superuser" json:"is_superuser,omitempty"`
	IsActive    bool     `protobuf:"varint,7,opt,name=is_active" json:"is_active,omitempty"`
	IsStuff     bool     `protobuf:"varint,8,opt,name=is_stuff" json:"is_stuff,omitempty"`
	IsConfirmed bool     `protobuf:"varint,9,opt,name=is_confirmed" json:"is_confirmed,omitempty"`
}

func (m *SubjectResponse) Reset()                    { *m = SubjectResponse{} }
func (m *SubjectResponse) String() string            { return proto.CompactTextString(m) }
func (*SubjectResponse) ProtoMessage()               {}
func (*SubjectResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type User struct {
	Id          int64             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Username    string            `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	FirstName   string            `protobuf:"bytes,3,opt,name=first_name" json:"first_name,omitempty"`
	LastName    string            `protobuf:"bytes,4,opt,name=last_name" json:"last_name,omitempty"`
	IsSuperuser bool              `protobuf:"varint,5,opt,name=is_superuser" json:"is_superuser,omitempty"`
	IsActive    bool              `protobuf:"varint,6,opt,name=is_active" json:"is_active,omitempty"`
	IsStaff     bool              `protobuf:"varint,7,opt,name=is_staff" json:"is_staff,omitempty"`
	IsConfirmed bool              `protobuf:"varint,8,opt,name=is_confirmed" json:"is_confirmed,omitempty"`
	CreatedAt   *protot.Timestamp `protobuf:"bytes,9,opt,name=created_at" json:"created_at,omitempty"`
	CreatedBy   *nilt.Int64       `protobuf:"bytes,10,opt,name=created_by" json:"created_by,omitempty"`
	UpdatedAt   *protot.Timestamp `protobuf:"bytes,11,opt,name=updated_at" json:"updated_at,omitempty"`
	UpdatedBy   *nilt.Int64       `protobuf:"bytes,12,opt,name=updated_by" json:"updated_by,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *User) GetCreatedAt() *protot.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *User) GetCreatedBy() *nilt.Int64 {
	if m != nil {
		return m.CreatedBy
	}
	return nil
}

func (m *User) GetUpdatedAt() *protot.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *User) GetUpdatedBy() *nilt.Int64 {
	if m != nil {
		return m.UpdatedBy
	}
	return nil
}

type CreateUserRequest struct {
	Username       string     `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	PlainPassword  string     `protobuf:"bytes,2,opt,name=plain_password" json:"plain_password,omitempty"`
	SecurePassword []byte     `protobuf:"bytes,3,opt,name=secure_password,proto3" json:"secure_password,omitempty"`
	FirstName      string     `protobuf:"bytes,4,opt,name=first_name" json:"first_name,omitempty"`
	LastName       string     `protobuf:"bytes,5,opt,name=last_name" json:"last_name,omitempty"`
	IsSuperuser    *nilt.Bool `protobuf:"bytes,6,opt,name=is_superuser" json:"is_superuser,omitempty"`
	IsActive       *nilt.Bool `protobuf:"bytes,7,opt,name=is_active" json:"is_active,omitempty"`
	IsStaff        *nilt.Bool `protobuf:"bytes,8,opt,name=is_staff" json:"is_staff,omitempty"`
	IsConfirmed    *nilt.Bool `protobuf:"bytes,9,opt,name=is_confirmed" json:"is_confirmed,omitempty"`
}

func (m *CreateUserRequest) Reset()                    { *m = CreateUserRequest{} }
func (m *CreateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateUserRequest) ProtoMessage()               {}
func (*CreateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *CreateUserRequest) GetIsSuperuser() *nilt.Bool {
	if m != nil {
		return m.IsSuperuser
	}
	return nil
}

func (m *CreateUserRequest) GetIsActive() *nilt.Bool {
	if m != nil {
		return m.IsActive
	}
	return nil
}

func (m *CreateUserRequest) GetIsStaff() *nilt.Bool {
	if m != nil {
		return m.IsStaff
	}
	return nil
}

func (m *CreateUserRequest) GetIsConfirmed() *nilt.Bool {
	if m != nil {
		return m.IsConfirmed
	}
	return nil
}

type CreateUserResponse struct {
	User *User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *CreateUserResponse) Reset()                    { *m = CreateUserResponse{} }
func (m *CreateUserResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateUserResponse) ProtoMessage()               {}
func (*CreateUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *CreateUserResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type GetUserRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetUserRequest) Reset()                    { *m = GetUserRequest{} }
func (m *GetUserRequest) String() string            { return proto.CompactTextString(m) }
func (*GetUserRequest) ProtoMessage()               {}
func (*GetUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type GetUserResponse struct {
	User *User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *GetUserResponse) Reset()                    { *m = GetUserResponse{} }
func (m *GetUserResponse) String() string            { return proto.CompactTextString(m) }
func (*GetUserResponse) ProtoMessage()               {}
func (*GetUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *GetUserResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type ListUsersRequest struct {
	IsSuperuser *nilt.Bool      `protobuf:"bytes,1,opt,name=is_superuser" json:"is_superuser,omitempty"`
	IsStaff     *nilt.Bool      `protobuf:"bytes,2,opt,name=is_staff" json:"is_staff,omitempty"`
	CreatedBy   *nilt.Int64     `protobuf:"bytes,3,opt,name=created_by" json:"created_by,omitempty"`
	Offset      *nilt.Int64     `protobuf:"bytes,100,opt,name=offset" json:"offset,omitempty"`
	Limit       *nilt.Int64     `protobuf:"bytes,101,opt,name=limit" json:"limit,omitempty"`
	Sort        map[string]bool `protobuf:"bytes,102,rep,name=sort" json:"sort,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (m *ListUsersRequest) Reset()                    { *m = ListUsersRequest{} }
func (m *ListUsersRequest) String() string            { return proto.CompactTextString(m) }
func (*ListUsersRequest) ProtoMessage()               {}
func (*ListUsersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *ListUsersRequest) GetIsSuperuser() *nilt.Bool {
	if m != nil {
		return m.IsSuperuser
	}
	return nil
}

func (m *ListUsersRequest) GetIsStaff() *nilt.Bool {
	if m != nil {
		return m.IsStaff
	}
	return nil
}

func (m *ListUsersRequest) GetCreatedBy() *nilt.Int64 {
	if m != nil {
		return m.CreatedBy
	}
	return nil
}

func (m *ListUsersRequest) GetOffset() *nilt.Int64 {
	if m != nil {
		return m.Offset
	}
	return nil
}

func (m *ListUsersRequest) GetLimit() *nilt.Int64 {
	if m != nil {
		return m.Limit
	}
	return nil
}

func (m *ListUsersRequest) GetSort() map[string]bool {
	if m != nil {
		return m.Sort
	}
	return nil
}

type ListUsersResponse struct {
	Users []*User `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
}

func (m *ListUsersResponse) Reset()                    { *m = ListUsersResponse{} }
func (m *ListUsersResponse) String() string            { return proto.CompactTextString(m) }
func (*ListUsersResponse) ProtoMessage()               {}
func (*ListUsersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *ListUsersResponse) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

type DeleteUserRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteUserRequest) Reset()                    { *m = DeleteUserRequest{} }
func (m *DeleteUserRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteUserRequest) ProtoMessage()               {}
func (*DeleteUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

type DeleteUserResponse struct {
	Affected int64 `protobuf:"varint,1,opt,name=affected" json:"affected,omitempty"`
}

func (m *DeleteUserResponse) Reset()                    { *m = DeleteUserResponse{} }
func (m *DeleteUserResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteUserResponse) ProtoMessage()               {}
func (*DeleteUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

type ModifyUserRequest struct {
	Id             int64        `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Username       *nilt.String `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	PlainPassword  *nilt.String `protobuf:"bytes,3,opt,name=plain_password" json:"plain_password,omitempty"`
	SecurePassword []byte       `protobuf:"bytes,4,opt,name=secure_password,proto3" json:"secure_password,omitempty"`
	FirstName      *nilt.String `protobuf:"bytes,5,opt,name=first_name" json:"first_name,omitempty"`
	LastName       *nilt.String `protobuf:"bytes,6,opt,name=last_name" json:"last_name,omitempty"`
	IsSuperuser    *nilt.Bool   `protobuf:"bytes,7,opt,name=is_superuser" json:"is_superuser,omitempty"`
	IsActive       *nilt.Bool   `protobuf:"bytes,8,opt,name=is_active" json:"is_active,omitempty"`
	IsStaff        *nilt.Bool   `protobuf:"bytes,9,opt,name=is_staff" json:"is_staff,omitempty"`
	IsConfirmed    *nilt.Bool   `protobuf:"bytes,10,opt,name=is_confirmed" json:"is_confirmed,omitempty"`
}

func (m *ModifyUserRequest) Reset()                    { *m = ModifyUserRequest{} }
func (m *ModifyUserRequest) String() string            { return proto.CompactTextString(m) }
func (*ModifyUserRequest) ProtoMessage()               {}
func (*ModifyUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *ModifyUserRequest) GetUsername() *nilt.String {
	if m != nil {
		return m.Username
	}
	return nil
}

func (m *ModifyUserRequest) GetPlainPassword() *nilt.String {
	if m != nil {
		return m.PlainPassword
	}
	return nil
}

func (m *ModifyUserRequest) GetFirstName() *nilt.String {
	if m != nil {
		return m.FirstName
	}
	return nil
}

func (m *ModifyUserRequest) GetLastName() *nilt.String {
	if m != nil {
		return m.LastName
	}
	return nil
}

func (m *ModifyUserRequest) GetIsSuperuser() *nilt.Bool {
	if m != nil {
		return m.IsSuperuser
	}
	return nil
}

func (m *ModifyUserRequest) GetIsActive() *nilt.Bool {
	if m != nil {
		return m.IsActive
	}
	return nil
}

func (m *ModifyUserRequest) GetIsStaff() *nilt.Bool {
	if m != nil {
		return m.IsStaff
	}
	return nil
}

func (m *ModifyUserRequest) GetIsConfirmed() *nilt.Bool {
	if m != nil {
		return m.IsConfirmed
	}
	return nil
}

type ModifyUserResponse struct {
	User *User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *ModifyUserResponse) Reset()                    { *m = ModifyUserResponse{} }
func (m *ModifyUserResponse) String() string            { return proto.CompactTextString(m) }
func (*ModifyUserResponse) ProtoMessage()               {}
func (*ModifyUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *ModifyUserResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type ListUserPermissionsRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *ListUserPermissionsRequest) Reset()                    { *m = ListUserPermissionsRequest{} }
func (m *ListUserPermissionsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListUserPermissionsRequest) ProtoMessage()               {}
func (*ListUserPermissionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

type ListUserPermissionsResponse struct {
	Permissions []string `protobuf:"bytes,1,rep,name=permissions" json:"permissions,omitempty"`
}

func (m *ListUserPermissionsResponse) Reset()                    { *m = ListUserPermissionsResponse{} }
func (m *ListUserPermissionsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListUserPermissionsResponse) ProtoMessage()               {}
func (*ListUserPermissionsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

type SetUserPermissionsRequest struct {
	Permissions []string `protobuf:"bytes,1,rep,name=permissions" json:"permissions,omitempty"`
}

func (m *SetUserPermissionsRequest) Reset()                    { *m = SetUserPermissionsRequest{} }
func (m *SetUserPermissionsRequest) String() string            { return proto.CompactTextString(m) }
func (*SetUserPermissionsRequest) ProtoMessage()               {}
func (*SetUserPermissionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

type SetUserPermissionsResponse struct {
	Created   []string `protobuf:"bytes,1,rep,name=created" json:"created,omitempty"`
	Removed   []string `protobuf:"bytes,2,rep,name=removed" json:"removed,omitempty"`
	Untouched []string `protobuf:"bytes,3,rep,name=untouched" json:"untouched,omitempty"`
}

func (m *SetUserPermissionsResponse) Reset()                    { *m = SetUserPermissionsResponse{} }
func (m *SetUserPermissionsResponse) String() string            { return proto.CompactTextString(m) }
func (*SetUserPermissionsResponse) ProtoMessage()               {}
func (*SetUserPermissionsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

type ListUserGroupsRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *ListUserGroupsRequest) Reset()                    { *m = ListUserGroupsRequest{} }
func (m *ListUserGroupsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListUserGroupsRequest) ProtoMessage()               {}
func (*ListUserGroupsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

type ListUserGroupsResponse struct {
	Groups []*Group `protobuf:"bytes,1,rep,name=groups" json:"groups,omitempty"`
}

func (m *ListUserGroupsResponse) Reset()                    { *m = ListUserGroupsResponse{} }
func (m *ListUserGroupsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListUserGroupsResponse) ProtoMessage()               {}
func (*ListUserGroupsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *ListUserGroupsResponse) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

type SetUserGroupsRequest struct {
	UserId int64   `protobuf:"varint,1,opt,name=user_id" json:"user_id,omitempty"`
	Groups []int64 `protobuf:"varint,2,rep,name=groups" json:"groups,omitempty"`
}

func (m *SetUserGroupsRequest) Reset()                    { *m = SetUserGroupsRequest{} }
func (m *SetUserGroupsRequest) String() string            { return proto.CompactTextString(m) }
func (*SetUserGroupsRequest) ProtoMessage()               {}
func (*SetUserGroupsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

type SetUserGroupsResponse struct {
	Created   int64 `protobuf:"varint,1,opt,name=created" json:"created,omitempty"`
	Removed   int64 `protobuf:"varint,2,opt,name=removed" json:"removed,omitempty"`
	Untouched int64 `protobuf:"varint,3,opt,name=untouched" json:"untouched,omitempty"`
}

func (m *SetUserGroupsResponse) Reset()                    { *m = SetUserGroupsResponse{} }
func (m *SetUserGroupsResponse) String() string            { return proto.CompactTextString(m) }
func (*SetUserGroupsResponse) ProtoMessage()               {}
func (*SetUserGroupsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

type RegisterPermissionsRequest struct {
	Permissions []string `protobuf:"bytes,1,rep,name=permissions" json:"permissions,omitempty"`
}

func (m *RegisterPermissionsRequest) Reset()                    { *m = RegisterPermissionsRequest{} }
func (m *RegisterPermissionsRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterPermissionsRequest) ProtoMessage()               {}
func (*RegisterPermissionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

type RegisterPermissionsResponse struct {
	Created   int64 `protobuf:"varint,1,opt,name=created" json:"created,omitempty"`
	Removed   int64 `protobuf:"varint,2,opt,name=removed" json:"removed,omitempty"`
	Untouched int64 `protobuf:"varint,3,opt,name=untouched" json:"untouched,omitempty"`
}

func (m *RegisterPermissionsResponse) Reset()                    { *m = RegisterPermissionsResponse{} }
func (m *RegisterPermissionsResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterPermissionsResponse) ProtoMessage()               {}
func (*RegisterPermissionsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

type ListPermissionsRequest struct {
	Subsystem *nilt.String           `protobuf:"bytes,1,opt,name=subsystem" json:"subsystem,omitempty"`
	Module    *nilt.String           `protobuf:"bytes,2,opt,name=module" json:"module,omitempty"`
	Action    *nilt.String           `protobuf:"bytes,3,opt,name=action" json:"action,omitempty"`
	CreatedAt *protot.TimestampRange `protobuf:"bytes,4,opt,name=created_at" json:"created_at,omitempty"`
	CreatedBy *nilt.Int64            `protobuf:"bytes,5,opt,name=created_by" json:"created_by,omitempty"`
	Offset    *nilt.Int64            `protobuf:"bytes,100,opt,name=offset" json:"offset,omitempty"`
	Limit     *nilt.Int64            `protobuf:"bytes,101,opt,name=limit" json:"limit,omitempty"`
	Sort      map[string]bool        `protobuf:"bytes,102,rep,name=sort" json:"sort,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (m *ListPermissionsRequest) Reset()                    { *m = ListPermissionsRequest{} }
func (m *ListPermissionsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListPermissionsRequest) ProtoMessage()               {}
func (*ListPermissionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *ListPermissionsRequest) GetSubsystem() *nilt.String {
	if m != nil {
		return m.Subsystem
	}
	return nil
}

func (m *ListPermissionsRequest) GetModule() *nilt.String {
	if m != nil {
		return m.Module
	}
	return nil
}

func (m *ListPermissionsRequest) GetAction() *nilt.String {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *ListPermissionsRequest) GetCreatedAt() *protot.TimestampRange {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *ListPermissionsRequest) GetCreatedBy() *nilt.Int64 {
	if m != nil {
		return m.CreatedBy
	}
	return nil
}

func (m *ListPermissionsRequest) GetOffset() *nilt.Int64 {
	if m != nil {
		return m.Offset
	}
	return nil
}

func (m *ListPermissionsRequest) GetLimit() *nilt.Int64 {
	if m != nil {
		return m.Limit
	}
	return nil
}

func (m *ListPermissionsRequest) GetSort() map[string]bool {
	if m != nil {
		return m.Sort
	}
	return nil
}

type ListPermissionsResponse struct {
	Permissions []string `protobuf:"bytes,1,rep,name=permissions" json:"permissions,omitempty"`
}

func (m *ListPermissionsResponse) Reset()                    { *m = ListPermissionsResponse{} }
func (m *ListPermissionsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListPermissionsResponse) ProtoMessage()               {}
func (*ListPermissionsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

type GetPermissionRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetPermissionRequest) Reset()                    { *m = GetPermissionRequest{} }
func (m *GetPermissionRequest) String() string            { return proto.CompactTextString(m) }
func (*GetPermissionRequest) ProtoMessage()               {}
func (*GetPermissionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

type GetPermissionResponse struct {
	Permission string `protobuf:"bytes,1,opt,name=permission" json:"permission,omitempty"`
}

func (m *GetPermissionResponse) Reset()                    { *m = GetPermissionResponse{} }
func (m *GetPermissionResponse) String() string            { return proto.CompactTextString(m) }
func (*GetPermissionResponse) ProtoMessage()               {}
func (*GetPermissionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

type Group struct {
	Id          int64             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name        string            `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Description string            `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	CreatedAt   *protot.Timestamp `protobuf:"bytes,4,opt,name=created_at" json:"created_at,omitempty"`
	CreatedBy   *nilt.Int64       `protobuf:"bytes,5,opt,name=created_by" json:"created_by,omitempty"`
	UpdatedAt   *protot.Timestamp `protobuf:"bytes,6,opt,name=updated_at" json:"updated_at,omitempty"`
	UpdatedBy   *nilt.Int64       `protobuf:"bytes,7,opt,name=updated_by" json:"updated_by,omitempty"`
}

func (m *Group) Reset()                    { *m = Group{} }
func (m *Group) String() string            { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()               {}
func (*Group) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *Group) GetCreatedAt() *protot.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Group) GetCreatedBy() *nilt.Int64 {
	if m != nil {
		return m.CreatedBy
	}
	return nil
}

func (m *Group) GetUpdatedAt() *protot.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Group) GetUpdatedBy() *nilt.Int64 {
	if m != nil {
		return m.UpdatedBy
	}
	return nil
}

type CreateGroupRequest struct {
	Name        string       `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Description *nilt.String `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
}

func (m *CreateGroupRequest) Reset()                    { *m = CreateGroupRequest{} }
func (m *CreateGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateGroupRequest) ProtoMessage()               {}
func (*CreateGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *CreateGroupRequest) GetDescription() *nilt.String {
	if m != nil {
		return m.Description
	}
	return nil
}

type CreateGroupResponse struct {
	Group *Group `protobuf:"bytes,1,opt,name=group" json:"group,omitempty"`
}

func (m *CreateGroupResponse) Reset()                    { *m = CreateGroupResponse{} }
func (m *CreateGroupResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateGroupResponse) ProtoMessage()               {}
func (*CreateGroupResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *CreateGroupResponse) GetGroup() *Group {
	if m != nil {
		return m.Group
	}
	return nil
}

type GetGroupRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetGroupRequest) Reset()                    { *m = GetGroupRequest{} }
func (m *GetGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*GetGroupRequest) ProtoMessage()               {}
func (*GetGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

type GetGroupResponse struct {
	Group *Group `protobuf:"bytes,1,opt,name=group" json:"group,omitempty"`
}

func (m *GetGroupResponse) Reset()                    { *m = GetGroupResponse{} }
func (m *GetGroupResponse) String() string            { return proto.CompactTextString(m) }
func (*GetGroupResponse) ProtoMessage()               {}
func (*GetGroupResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *GetGroupResponse) GetGroup() *Group {
	if m != nil {
		return m.Group
	}
	return nil
}

type ListGroupsRequest struct {
	Offset *nilt.Int64 `protobuf:"bytes,100,opt,name=offset" json:"offset,omitempty"`
	Limit  *nilt.Int64 `protobuf:"bytes,101,opt,name=limit" json:"limit,omitempty"`
}

func (m *ListGroupsRequest) Reset()                    { *m = ListGroupsRequest{} }
func (m *ListGroupsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListGroupsRequest) ProtoMessage()               {}
func (*ListGroupsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *ListGroupsRequest) GetOffset() *nilt.Int64 {
	if m != nil {
		return m.Offset
	}
	return nil
}

func (m *ListGroupsRequest) GetLimit() *nilt.Int64 {
	if m != nil {
		return m.Limit
	}
	return nil
}

type ListGroupsResponse struct {
	Groups []*Group `protobuf:"bytes,1,rep,name=groups" json:"groups,omitempty"`
}

func (m *ListGroupsResponse) Reset()                    { *m = ListGroupsResponse{} }
func (m *ListGroupsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListGroupsResponse) ProtoMessage()               {}
func (*ListGroupsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *ListGroupsResponse) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

type DeleteGroupRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteGroupRequest) Reset()                    { *m = DeleteGroupRequest{} }
func (m *DeleteGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteGroupRequest) ProtoMessage()               {}
func (*DeleteGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

type DeleteGroupResponse struct {
	Affected int64 `protobuf:"varint,1,opt,name=affected" json:"affected,omitempty"`
}

func (m *DeleteGroupResponse) Reset()                    { *m = DeleteGroupResponse{} }
func (m *DeleteGroupResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteGroupResponse) ProtoMessage()               {}
func (*DeleteGroupResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

type ModifyGroupRequest struct {
	Id          int64        `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name        *nilt.String `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Description *nilt.String `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
}

func (m *ModifyGroupRequest) Reset()                    { *m = ModifyGroupRequest{} }
func (m *ModifyGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*ModifyGroupRequest) ProtoMessage()               {}
func (*ModifyGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *ModifyGroupRequest) GetName() *nilt.String {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *ModifyGroupRequest) GetDescription() *nilt.String {
	if m != nil {
		return m.Description
	}
	return nil
}

type ModifyGroupResponse struct {
	Group *Group `protobuf:"bytes,1,opt,name=group" json:"group,omitempty"`
}

func (m *ModifyGroupResponse) Reset()                    { *m = ModifyGroupResponse{} }
func (m *ModifyGroupResponse) String() string            { return proto.CompactTextString(m) }
func (*ModifyGroupResponse) ProtoMessage()               {}
func (*ModifyGroupResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *ModifyGroupResponse) GetGroup() *Group {
	if m != nil {
		return m.Group
	}
	return nil
}

type SetGroupPermissionsRequest struct {
	Permissions []string `protobuf:"bytes,1,rep,name=permissions" json:"permissions,omitempty"`
}

func (m *SetGroupPermissionsRequest) Reset()                    { *m = SetGroupPermissionsRequest{} }
func (m *SetGroupPermissionsRequest) String() string            { return proto.CompactTextString(m) }
func (*SetGroupPermissionsRequest) ProtoMessage()               {}
func (*SetGroupPermissionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

type SetGroupPermissionsResponse struct {
	Created   []string `protobuf:"bytes,1,rep,name=created" json:"created,omitempty"`
	Removed   []string `protobuf:"bytes,2,rep,name=removed" json:"removed,omitempty"`
	Untouched []string `protobuf:"bytes,3,rep,name=untouched" json:"untouched,omitempty"`
}

func (m *SetGroupPermissionsResponse) Reset()                    { *m = SetGroupPermissionsResponse{} }
func (m *SetGroupPermissionsResponse) String() string            { return proto.CompactTextString(m) }
func (*SetGroupPermissionsResponse) ProtoMessage()               {}
func (*SetGroupPermissionsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

type ListGroupPermissionsRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *ListGroupPermissionsRequest) Reset()                    { *m = ListGroupPermissionsRequest{} }
func (m *ListGroupPermissionsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListGroupPermissionsRequest) ProtoMessage()               {}
func (*ListGroupPermissionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

type ListGroupPermissionsResponse struct {
	Permissions []string `protobuf:"bytes,1,rep,name=permissions" json:"permissions,omitempty"`
}

func (m *ListGroupPermissionsResponse) Reset()                    { *m = ListGroupPermissionsResponse{} }
func (m *ListGroupPermissionsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListGroupPermissionsResponse) ProtoMessage()               {}
func (*ListGroupPermissionsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func init() {
	proto.RegisterType((*LoginRequest)(nil), "charon.LoginRequest")
	proto.RegisterType((*LoginResponse)(nil), "charon.LoginResponse")
	proto.RegisterType((*LogoutRequest)(nil), "charon.LogoutRequest")
	proto.RegisterType((*LogoutResponse)(nil), "charon.LogoutResponse")
	proto.RegisterType((*IsAuthenticatedRequest)(nil), "charon.IsAuthenticatedRequest")
	proto.RegisterType((*IsAuthenticatedResponse)(nil), "charon.IsAuthenticatedResponse")
	proto.RegisterType((*IsGrantedRequest)(nil), "charon.IsGrantedRequest")
	proto.RegisterType((*IsGrantedResponse)(nil), "charon.IsGrantedResponse")
	proto.RegisterType((*BelongsToRequest)(nil), "charon.BelongsToRequest")
	proto.RegisterType((*BelongsToResponse)(nil), "charon.BelongsToResponse")
	proto.RegisterType((*SubjectRequest)(nil), "charon.SubjectRequest")
	proto.RegisterType((*SubjectResponse)(nil), "charon.SubjectResponse")
	proto.RegisterType((*User)(nil), "charon.User")
	proto.RegisterType((*CreateUserRequest)(nil), "charon.CreateUserRequest")
	proto.RegisterType((*CreateUserResponse)(nil), "charon.CreateUserResponse")
	proto.RegisterType((*GetUserRequest)(nil), "charon.GetUserRequest")
	proto.RegisterType((*GetUserResponse)(nil), "charon.GetUserResponse")
	proto.RegisterType((*ListUsersRequest)(nil), "charon.ListUsersRequest")
	proto.RegisterType((*ListUsersResponse)(nil), "charon.ListUsersResponse")
	proto.RegisterType((*DeleteUserRequest)(nil), "charon.DeleteUserRequest")
	proto.RegisterType((*DeleteUserResponse)(nil), "charon.DeleteUserResponse")
	proto.RegisterType((*ModifyUserRequest)(nil), "charon.ModifyUserRequest")
	proto.RegisterType((*ModifyUserResponse)(nil), "charon.ModifyUserResponse")
	proto.RegisterType((*ListUserPermissionsRequest)(nil), "charon.ListUserPermissionsRequest")
	proto.RegisterType((*ListUserPermissionsResponse)(nil), "charon.ListUserPermissionsResponse")
	proto.RegisterType((*SetUserPermissionsRequest)(nil), "charon.SetUserPermissionsRequest")
	proto.RegisterType((*SetUserPermissionsResponse)(nil), "charon.SetUserPermissionsResponse")
	proto.RegisterType((*ListUserGroupsRequest)(nil), "charon.ListUserGroupsRequest")
	proto.RegisterType((*ListUserGroupsResponse)(nil), "charon.ListUserGroupsResponse")
	proto.RegisterType((*SetUserGroupsRequest)(nil), "charon.SetUserGroupsRequest")
	proto.RegisterType((*SetUserGroupsResponse)(nil), "charon.SetUserGroupsResponse")
	proto.RegisterType((*RegisterPermissionsRequest)(nil), "charon.RegisterPermissionsRequest")
	proto.RegisterType((*RegisterPermissionsResponse)(nil), "charon.RegisterPermissionsResponse")
	proto.RegisterType((*ListPermissionsRequest)(nil), "charon.ListPermissionsRequest")
	proto.RegisterType((*ListPermissionsResponse)(nil), "charon.ListPermissionsResponse")
	proto.RegisterType((*GetPermissionRequest)(nil), "charon.GetPermissionRequest")
	proto.RegisterType((*GetPermissionResponse)(nil), "charon.GetPermissionResponse")
	proto.RegisterType((*Group)(nil), "charon.Group")
	proto.RegisterType((*CreateGroupRequest)(nil), "charon.CreateGroupRequest")
	proto.RegisterType((*CreateGroupResponse)(nil), "charon.CreateGroupResponse")
	proto.RegisterType((*GetGroupRequest)(nil), "charon.GetGroupRequest")
	proto.RegisterType((*GetGroupResponse)(nil), "charon.GetGroupResponse")
	proto.RegisterType((*ListGroupsRequest)(nil), "charon.ListGroupsRequest")
	proto.RegisterType((*ListGroupsResponse)(nil), "charon.ListGroupsResponse")
	proto.RegisterType((*DeleteGroupRequest)(nil), "charon.DeleteGroupRequest")
	proto.RegisterType((*DeleteGroupResponse)(nil), "charon.DeleteGroupResponse")
	proto.RegisterType((*ModifyGroupRequest)(nil), "charon.ModifyGroupRequest")
	proto.RegisterType((*ModifyGroupResponse)(nil), "charon.ModifyGroupResponse")
	proto.RegisterType((*SetGroupPermissionsRequest)(nil), "charon.SetGroupPermissionsRequest")
	proto.RegisterType((*SetGroupPermissionsResponse)(nil), "charon.SetGroupPermissionsResponse")
	proto.RegisterType((*ListGroupPermissionsRequest)(nil), "charon.ListGroupPermissionsRequest")
	proto.RegisterType((*ListGroupPermissionsResponse)(nil), "charon.ListGroupPermissionsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for RPC service

type RPCClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
	IsAuthenticated(ctx context.Context, in *IsAuthenticatedRequest, opts ...grpc.CallOption) (*IsAuthenticatedResponse, error)
	Subject(ctx context.Context, in *SubjectRequest, opts ...grpc.CallOption) (*SubjectResponse, error)
	IsGranted(ctx context.Context, in *IsGrantedRequest, opts ...grpc.CallOption) (*IsGrantedResponse, error)
	BelongsTo(ctx context.Context, in *BelongsToRequest, opts ...grpc.CallOption) (*BelongsToResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	ModifyUser(ctx context.Context, in *ModifyUserRequest, opts ...grpc.CallOption) (*ModifyUserResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	ListUserPermissions(ctx context.Context, in *ListUserPermissionsRequest, opts ...grpc.CallOption) (*ListUserPermissionsResponse, error)
	SetUserPermissions(ctx context.Context, in *SetUserPermissionsRequest, opts ...grpc.CallOption) (*SetUserPermissionsResponse, error)
	ListUserGroups(ctx context.Context, in *ListUserGroupsRequest, opts ...grpc.CallOption) (*ListUserGroupsResponse, error)
	SetUserGroups(ctx context.Context, in *SetUserGroupsRequest, opts ...grpc.CallOption) (*SetUserGroupsResponse, error)
	RegisterPermissions(ctx context.Context, in *RegisterPermissionsRequest, opts ...grpc.CallOption) (*RegisterPermissionsResponse, error)
	ListPermissions(ctx context.Context, in *ListPermissionsRequest, opts ...grpc.CallOption) (*ListPermissionsResponse, error)
	GetPermission(ctx context.Context, in *GetPermissionRequest, opts ...grpc.CallOption) (*GetPermissionResponse, error)
	CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error)
	ModifyGroup(ctx context.Context, in *ModifyGroupRequest, opts ...grpc.CallOption) (*ModifyGroupResponse, error)
	GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupResponse, error)
	ListGroups(ctx context.Context, in *ListGroupsRequest, opts ...grpc.CallOption) (*ListGroupsResponse, error)
	DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*DeleteGroupResponse, error)
	ListGroupPermissions(ctx context.Context, in *ListGroupPermissionsRequest, opts ...grpc.CallOption) (*ListGroupPermissionsResponse, error)
	SetGroupPermissions(ctx context.Context, in *SetGroupPermissionsRequest, opts ...grpc.CallOption) (*SetGroupPermissionsResponse, error)
}

type rPCClient struct {
	cc *grpc.ClientConn
}

func NewRPCClient(cc *grpc.ClientConn) RPCClient {
	return &rPCClient{cc}
}

func (c *rPCClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := grpc.Invoke(ctx, "/charon.RPC/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	out := new(LogoutResponse)
	err := grpc.Invoke(ctx, "/charon.RPC/Logout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) IsAuthenticated(ctx context.Context, in *IsAuthenticatedRequest, opts ...grpc.CallOption) (*IsAuthenticatedResponse, error) {
	out := new(IsAuthenticatedResponse)
	err := grpc.Invoke(ctx, "/charon.RPC/IsAuthenticated", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) Subject(ctx context.Context, in *SubjectRequest, opts ...grpc.CallOption) (*SubjectResponse, error) {
	out := new(SubjectResponse)
	err := grpc.Invoke(ctx, "/charon.RPC/Subject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) IsGranted(ctx context.Context, in *IsGrantedRequest, opts ...grpc.CallOption) (*IsGrantedResponse, error) {
	out := new(IsGrantedResponse)
	err := grpc.Invoke(ctx, "/charon.RPC/IsGranted", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) BelongsTo(ctx context.Context, in *BelongsToRequest, opts ...grpc.CallOption) (*BelongsToResponse, error) {
	out := new(BelongsToResponse)
	err := grpc.Invoke(ctx, "/charon.RPC/BelongsTo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := grpc.Invoke(ctx, "/charon.RPC/CreateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) ModifyUser(ctx context.Context, in *ModifyUserRequest, opts ...grpc.CallOption) (*ModifyUserResponse, error) {
	out := new(ModifyUserResponse)
	err := grpc.Invoke(ctx, "/charon.RPC/ModifyUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := grpc.Invoke(ctx, "/charon.RPC/GetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	out := new(ListUsersResponse)
	err := grpc.Invoke(ctx, "/charon.RPC/ListUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	out := new(DeleteUserResponse)
	err := grpc.Invoke(ctx, "/charon.RPC/DeleteUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) ListUserPermissions(ctx context.Context, in *ListUserPermissionsRequest, opts ...grpc.CallOption) (*ListUserPermissionsResponse, error) {
	out := new(ListUserPermissionsResponse)
	err := grpc.Invoke(ctx, "/charon.RPC/ListUserPermissions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) SetUserPermissions(ctx context.Context, in *SetUserPermissionsRequest, opts ...grpc.CallOption) (*SetUserPermissionsResponse, error) {
	out := new(SetUserPermissionsResponse)
	err := grpc.Invoke(ctx, "/charon.RPC/SetUserPermissions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) ListUserGroups(ctx context.Context, in *ListUserGroupsRequest, opts ...grpc.CallOption) (*ListUserGroupsResponse, error) {
	out := new(ListUserGroupsResponse)
	err := grpc.Invoke(ctx, "/charon.RPC/ListUserGroups", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) SetUserGroups(ctx context.Context, in *SetUserGroupsRequest, opts ...grpc.CallOption) (*SetUserGroupsResponse, error) {
	out := new(SetUserGroupsResponse)
	err := grpc.Invoke(ctx, "/charon.RPC/SetUserGroups", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) RegisterPermissions(ctx context.Context, in *RegisterPermissionsRequest, opts ...grpc.CallOption) (*RegisterPermissionsResponse, error) {
	out := new(RegisterPermissionsResponse)
	err := grpc.Invoke(ctx, "/charon.RPC/RegisterPermissions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) ListPermissions(ctx context.Context, in *ListPermissionsRequest, opts ...grpc.CallOption) (*ListPermissionsResponse, error) {
	out := new(ListPermissionsResponse)
	err := grpc.Invoke(ctx, "/charon.RPC/ListPermissions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) GetPermission(ctx context.Context, in *GetPermissionRequest, opts ...grpc.CallOption) (*GetPermissionResponse, error) {
	out := new(GetPermissionResponse)
	err := grpc.Invoke(ctx, "/charon.RPC/GetPermission", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error) {
	out := new(CreateGroupResponse)
	err := grpc.Invoke(ctx, "/charon.RPC/CreateGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) ModifyGroup(ctx context.Context, in *ModifyGroupRequest, opts ...grpc.CallOption) (*ModifyGroupResponse, error) {
	out := new(ModifyGroupResponse)
	err := grpc.Invoke(ctx, "/charon.RPC/ModifyGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupResponse, error) {
	out := new(GetGroupResponse)
	err := grpc.Invoke(ctx, "/charon.RPC/GetGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) ListGroups(ctx context.Context, in *ListGroupsRequest, opts ...grpc.CallOption) (*ListGroupsResponse, error) {
	out := new(ListGroupsResponse)
	err := grpc.Invoke(ctx, "/charon.RPC/ListGroups", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*DeleteGroupResponse, error) {
	out := new(DeleteGroupResponse)
	err := grpc.Invoke(ctx, "/charon.RPC/DeleteGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) ListGroupPermissions(ctx context.Context, in *ListGroupPermissionsRequest, opts ...grpc.CallOption) (*ListGroupPermissionsResponse, error) {
	out := new(ListGroupPermissionsResponse)
	err := grpc.Invoke(ctx, "/charon.RPC/ListGroupPermissions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) SetGroupPermissions(ctx context.Context, in *SetGroupPermissionsRequest, opts ...grpc.CallOption) (*SetGroupPermissionsResponse, error) {
	out := new(SetGroupPermissionsResponse)
	err := grpc.Invoke(ctx, "/charon.RPC/SetGroupPermissions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RPC service

type RPCServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	IsAuthenticated(context.Context, *IsAuthenticatedRequest) (*IsAuthenticatedResponse, error)
	Subject(context.Context, *SubjectRequest) (*SubjectResponse, error)
	IsGranted(context.Context, *IsGrantedRequest) (*IsGrantedResponse, error)
	BelongsTo(context.Context, *BelongsToRequest) (*BelongsToResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	ModifyUser(context.Context, *ModifyUserRequest) (*ModifyUserResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	ListUserPermissions(context.Context, *ListUserPermissionsRequest) (*ListUserPermissionsResponse, error)
	SetUserPermissions(context.Context, *SetUserPermissionsRequest) (*SetUserPermissionsResponse, error)
	ListUserGroups(context.Context, *ListUserGroupsRequest) (*ListUserGroupsResponse, error)
	SetUserGroups(context.Context, *SetUserGroupsRequest) (*SetUserGroupsResponse, error)
	RegisterPermissions(context.Context, *RegisterPermissionsRequest) (*RegisterPermissionsResponse, error)
	ListPermissions(context.Context, *ListPermissionsRequest) (*ListPermissionsResponse, error)
	GetPermission(context.Context, *GetPermissionRequest) (*GetPermissionResponse, error)
	CreateGroup(context.Context, *CreateGroupRequest) (*CreateGroupResponse, error)
	ModifyGroup(context.Context, *ModifyGroupRequest) (*ModifyGroupResponse, error)
	GetGroup(context.Context, *GetGroupRequest) (*GetGroupResponse, error)
	ListGroups(context.Context, *ListGroupsRequest) (*ListGroupsResponse, error)
	DeleteGroup(context.Context, *DeleteGroupRequest) (*DeleteGroupResponse, error)
	ListGroupPermissions(context.Context, *ListGroupPermissionsRequest) (*ListGroupPermissionsResponse, error)
	SetGroupPermissions(context.Context, *SetGroupPermissionsRequest) (*SetGroupPermissionsResponse, error)
}

func RegisterRPCServer(s *grpc.Server, srv RPCServer) {
	s.RegisterService(&_RPC_serviceDesc, srv)
}

func _RPC_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RPCServer).Login(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RPC_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RPCServer).Logout(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RPC_IsAuthenticated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(IsAuthenticatedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RPCServer).IsAuthenticated(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RPC_Subject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RPCServer).Subject(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RPC_IsGranted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(IsGrantedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RPCServer).IsGranted(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RPC_BelongsTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(BelongsToRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RPCServer).BelongsTo(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RPC_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RPCServer).CreateUser(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RPC_ModifyUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ModifyUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RPCServer).ModifyUser(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RPC_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RPCServer).GetUser(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RPC_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RPCServer).ListUsers(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RPC_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RPCServer).DeleteUser(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RPC_ListUserPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ListUserPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RPCServer).ListUserPermissions(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RPC_SetUserPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SetUserPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RPCServer).SetUserPermissions(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RPC_ListUserGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ListUserGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RPCServer).ListUserGroups(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RPC_SetUserGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SetUserGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RPCServer).SetUserGroups(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RPC_RegisterPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(RegisterPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RPCServer).RegisterPermissions(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RPC_ListPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ListPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RPCServer).ListPermissions(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RPC_GetPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RPCServer).GetPermission(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RPC_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RPCServer).CreateGroup(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RPC_ModifyGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ModifyGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RPCServer).ModifyGroup(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RPC_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RPCServer).GetGroup(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RPC_ListGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ListGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RPCServer).ListGroups(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RPC_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(DeleteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RPCServer).DeleteGroup(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RPC_ListGroupPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ListGroupPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RPCServer).ListGroupPermissions(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RPC_SetGroupPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SetGroupPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RPCServer).SetGroupPermissions(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _RPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "charon.RPC",
	HandlerType: (*RPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _RPC_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _RPC_Logout_Handler,
		},
		{
			MethodName: "IsAuthenticated",
			Handler:    _RPC_IsAuthenticated_Handler,
		},
		{
			MethodName: "Subject",
			Handler:    _RPC_Subject_Handler,
		},
		{
			MethodName: "IsGranted",
			Handler:    _RPC_IsGranted_Handler,
		},
		{
			MethodName: "BelongsTo",
			Handler:    _RPC_BelongsTo_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _RPC_CreateUser_Handler,
		},
		{
			MethodName: "ModifyUser",
			Handler:    _RPC_ModifyUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _RPC_GetUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _RPC_ListUsers_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _RPC_DeleteUser_Handler,
		},
		{
			MethodName: "ListUserPermissions",
			Handler:    _RPC_ListUserPermissions_Handler,
		},
		{
			MethodName: "SetUserPermissions",
			Handler:    _RPC_SetUserPermissions_Handler,
		},
		{
			MethodName: "ListUserGroups",
			Handler:    _RPC_ListUserGroups_Handler,
		},
		{
			MethodName: "SetUserGroups",
			Handler:    _RPC_SetUserGroups_Handler,
		},
		{
			MethodName: "RegisterPermissions",
			Handler:    _RPC_RegisterPermissions_Handler,
		},
		{
			MethodName: "ListPermissions",
			Handler:    _RPC_ListPermissions_Handler,
		},
		{
			MethodName: "GetPermission",
			Handler:    _RPC_GetPermission_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _RPC_CreateGroup_Handler,
		},
		{
			MethodName: "ModifyGroup",
			Handler:    _RPC_ModifyGroup_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _RPC_GetGroup_Handler,
		},
		{
			MethodName: "ListGroups",
			Handler:    _RPC_ListGroups_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _RPC_DeleteGroup_Handler,
		},
		{
			MethodName: "ListGroupPermissions",
			Handler:    _RPC_ListGroupPermissions_Handler,
		},
		{
			MethodName: "SetGroupPermissions",
			Handler:    _RPC_SetGroupPermissions_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 1612 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x58, 0xd9, 0x72, 0x1b, 0x45,
	0x17, 0xfe, 0xb5, 0x5a, 0x3a, 0x92, 0x2d, 0xa9, 0xbd, 0x29, 0xe3, 0x35, 0x72, 0x7e, 0x08, 0xa4,
	0x50, 0x39, 0x32, 0x24, 0x84, 0xa2, 0x8a, 0x22, 0x21, 0x15, 0x42, 0x05, 0x2a, 0xb1, 0xcd, 0x25,
	0x65, 0xc6, 0x52, 0x4b, 0x19, 0x22, 0xcd, 0x88, 0x59, 0x42, 0xf9, 0x9e, 0x17, 0xe0, 0x3d, 0x78,
	0x04, 0xae, 0xb8, 0xe0, 0x51, 0x78, 0x0c, 0x8a, 0xee, 0x9e, 0xa5, 0xd7, 0x91, 0x45, 0x92, 0x2b,
	0x5b, 0x67, 0xf9, 0xfa, 0x9c, 0x33, 0x67, 0xeb, 0x86, 0xe6, 0xf0, 0xa5, 0xed, 0x7b, 0x6e, 0x7f,
	0xee, 0x7b, 0xa1, 0x87, 0xaa, 0xf1, 0x2f, 0xab, 0x35, 0x73, 0xf1, 0xcc, 0x0b, 0xae, 0x5c, 0x1c,
	0x33, 0xac, 0x26, 0xfb, 0x13, 0x26, 0xbf, 0xc0, 0x75, 0xa6, 0xc9, 0xff, 0xbd, 0x01, 0x34, 0x9f,
	0x79, 0x13, 0xc7, 0x3d, 0xc5, 0x3f, 0x47, 0x38, 0x08, 0x51, 0x1b, 0x6a, 0x51, 0x80, 0x7d, 0xd7,
	0x9e, 0xe1, 0x6e, 0xe1, 0xb0, 0x70, 0xbb, 0x4e, 0x29, 0x73, 0x3b, 0x08, 0x7e, 0xf1, 0xfc, 0x51,
	0xb7, 0x48, 0x29, 0xbd, 0x63, 0x58, 0x4d, 0x74, 0x82, 0xb9, 0xe7, 0x06, 0x18, 0x1d, 0x40, 0x25,
	0xf4, 0x5e, 0x61, 0x97, 0x69, 0x34, 0x06, 0xed, 0x3e, 0x3f, 0xff, 0x9c, 0xd2, 0x13, 0x0d, 0x2f,
	0x0a, 0xd3, 0x63, 0xae, 0xd5, 0x68, 0xc3, 0x5a, 0xaa, 0x11, 0x1f, 0xd2, 0x7b, 0x00, 0x5b, 0x4f,
	0x83, 0x2f, 0xa3, 0xf0, 0x25, 0x76, 0x43, 0x67, 0x68, 0x87, 0x78, 0xb4, 0x34, 0xd8, 0x31, 0x6c,
	0x6b, 0xaa, 0x89, 0xe9, 0x9b, 0xb0, 0x6a, 0x8b, 0x0c, 0x86, 0x51, 0xeb, 0xdd, 0x87, 0xf6, 0xd3,
	0xe0, 0x89, 0x6f, 0xbb, 0xc2, 0x31, 0x2d, 0x58, 0xa1, 0xa1, 0xb9, 0x70, 0x62, 0xa1, 0x12, 0x42,
	0x00, 0x73, 0xec, 0xcf, 0x9c, 0x20, 0x70, 0x3c, 0x37, 0x89, 0xcd, 0x2d, 0xe8, 0x08, 0x8a, 0xc9,
	0x21, 0x44, 0x73, 0x12, 0x93, 0x12, 0xf8, 0x4f, 0xa0, 0xfd, 0x10, 0x4f, 0x3d, 0x77, 0x12, 0x9c,
	0x7b, 0xb9, 0xf0, 0x24, 0xf0, 0x13, 0xdf, 0x8b, 0xe6, 0x94, 0x42, 0xc1, 0x4b, 0x14, 0x5c, 0x50,
	0xe3, 0xe0, 0x97, 0x31, 0x31, 0x01, 0xbf, 0x0b, 0x6b, 0x67, 0xd1, 0xe5, 0x4f, 0x78, 0xb8, 0x7c,
	0xb4, 0xff, 0x28, 0x40, 0x2b, 0xd3, 0x49, 0x70, 0x01, 0x8a, 0xa2, 0x29, 0x59, 0x56, 0x30, 0x3f,
	0xa9, 0xef, 0x63, 0xc7, 0x0f, 0xc2, 0x0b, 0x46, 0x2b, 0x31, 0x5a, 0x07, 0xea, 0x53, 0x3b, 0x25,
	0x95, 0x19, 0x69, 0x1d, 0x1a, 0x3c, 0x44, 0x41, 0xb7, 0x72, 0x58, 0x22, 0xc4, 0x0d, 0x68, 0x3a,
	0xc1, 0x45, 0x10, 0x11, 0x0e, 0x45, 0xed, 0x56, 0xa9, 0xd9, 0x54, 0x9b, 0x50, 0xed, 0x61, 0xe8,
	0xbc, 0xc6, 0xdd, 0x15, 0x46, 0x22, 0xc7, 0x52, 0xc1, 0x30, 0x1a, 0x8f, 0xbb, 0x35, 0x46, 0x89,
	0x55, 0x87, 0x9e, 0x4b, 0x0e, 0x9f, 0x91, 0x70, 0xd6, 0x99, 0xc7, 0xbf, 0x17, 0xa1, 0xfc, 0x3d,
	0x41, 0x7a, 0x37, 0x36, 0xab, 0xe6, 0x55, 0x74, 0xf3, 0xaa, 0x92, 0x79, 0x36, 0x31, 0x6f, 0xc5,
	0x68, 0x5e, 0x6c, 0xf4, 0xff, 0x01, 0x86, 0x3e, 0xa6, 0xd9, 0x75, 0x61, 0x87, 0xcc, 0xe4, 0xc6,
	0xa0, 0xd3, 0x4f, 0x4a, 0xf2, 0xdc, 0x99, 0x91, 0x4f, 0x64, 0xcf, 0xe6, 0xe4, 0x2b, 0x65, 0x62,
	0x97, 0x57, 0x5d, 0x60, 0x62, 0x8d, 0x3e, 0xab, 0xd5, 0xa7, 0x6e, 0x78, 0xef, 0x63, 0x8a, 0x13,
	0xcd, 0x47, 0x29, 0x4e, 0x63, 0x01, 0x4e, 0x2a, 0x46, 0x70, 0x9a, 0x1a, 0x4e, 0xef, 0x9f, 0x02,
	0x74, 0x1e, 0xb1, 0x93, 0x68, 0xd0, 0xf2, 0x2b, 0x7f, 0x0b, 0xd6, 0xe6, 0x53, 0xdb, 0x71, 0x2f,
	0xe4, 0xfa, 0x47, 0xdb, 0xd0, 0x0a, 0xf0, 0x30, 0xf2, 0x31, 0x67, 0xd0, 0x60, 0x36, 0x95, 0x00,
	0x97, 0xf5, 0x00, 0x57, 0x18, 0xe9, 0xd0, 0xf0, 0xfd, 0x1b, 0x03, 0x88, 0x4d, 0x7c, 0xe8, 0x79,
	0x53, 0xb4, 0xa7, 0xe6, 0x82, 0xcc, 0xde, 0x15, 0x02, 0x5f, 0xd3, 0xb8, 0x87, 0x86, 0x1c, 0x91,
	0x24, 0x48, 0x3f, 0x40, 0xa2, 0xff, 0x49, 0xc2, 0x5b, 0x50, 0x66, 0xe6, 0xc4, 0x45, 0xd2, 0xec,
	0x27, 0xad, 0x95, 0xca, 0xf4, 0x76, 0x61, 0xed, 0x09, 0x0e, 0xc5, 0x70, 0x09, 0xa9, 0xd6, 0xfb,
	0x08, 0x5a, 0x19, 0x77, 0x09, 0xb0, 0xdf, 0x8a, 0xd0, 0x7e, 0xe6, 0x04, 0x4c, 0x21, 0x48, 0xf1,
	0xd4, 0xa0, 0x14, 0x16, 0x7a, 0x5d, 0xd4, 0xb8, 0x72, 0xf6, 0x94, 0xf4, 0xec, 0xd9, 0x81, 0xaa,
	0x37, 0x1e, 0x07, 0x38, 0xec, 0x8e, 0x74, 0xa6, 0x05, 0x95, 0xa9, 0x33, 0x73, 0xc2, 0x2e, 0xd6,
	0x79, 0xc7, 0x50, 0x0e, 0x3c, 0x3f, 0xec, 0x8e, 0x49, 0xf1, 0x36, 0x06, 0xbd, 0xd4, 0x15, 0xd5,
	0x83, 0xfe, 0x19, 0x11, 0x7a, 0xec, 0x86, 0xfe, 0x95, 0x75, 0x07, 0xea, 0xd9, 0x0f, 0xd4, 0x80,
	0xd2, 0x2b, 0x7c, 0x95, 0xa4, 0xd4, 0x2a, 0x54, 0x5e, 0xdb, 0xd3, 0x28, 0xae, 0xc8, 0xda, 0x67,
	0xc5, 0x4f, 0x0b, 0xdf, 0x94, 0x6b, 0xe5, 0xf6, 0x88, 0x7c, 0x92, 0x8e, 0x00, 0x98, 0x04, 0x71,
	0x07, 0x2a, 0x34, 0x16, 0xb4, 0xb1, 0x95, 0xb4, 0x28, 0x1e, 0x40, 0xe7, 0x2b, 0x3c, 0xc5, 0x72,
	0x12, 0x8b, 0x5f, 0xe5, 0x3d, 0x40, 0xa2, 0x40, 0x82, 0x49, 0xd2, 0x9c, 0x04, 0x90, 0x34, 0x3a,
	0x9c, 0xca, 0xfd, 0x59, 0x84, 0xce, 0xb7, 0xde, 0xc8, 0x19, 0x5f, 0xe5, 0x20, 0xa1, 0x7d, 0xa5,
	0x95, 0x50, 0x53, 0x58, 0x80, 0xce, 0x42, 0xdf, 0x71, 0x27, 0xe8, 0x96, 0x56, 0x28, 0x25, 0x83,
	0x94, 0xa1, 0x6c, 0xca, 0xac, 0x6c, 0x0e, 0xa5, 0xb2, 0xa9, 0x18, 0x54, 0x0f, 0xc4, 0x22, 0xaa,
	0x1a, 0x04, 0xd4, 0xec, 0x59, 0x59, 0x5c, 0x52, 0xb5, 0x85, 0xc9, 0x55, 0xbf, 0xb6, 0xa4, 0xc0,
	0x54, 0x52, 0x62, 0x0c, 0x97, 0xa8, 0x82, 0xdb, 0x60, 0xa5, 0x5f, 0xfc, 0x39, 0x1f, 0x11, 0xa6,
	0x0f, 0x39, 0x80, 0x1d, 0xa3, 0x64, 0x72, 0x88, 0x32, 0x63, 0x68, 0xae, 0xd0, 0x1d, 0xe5, 0xc6,
	0x19, 0xce, 0x03, 0x37, 0x6a, 0xbc, 0x00, 0xcb, 0xa4, 0xc1, 0xa7, 0x6c, 0x52, 0x5e, 0xb1, 0x38,
	0x25, 0xf8, 0x64, 0x88, 0xbe, 0xc6, 0xb4, 0x2b, 0x96, 0xe2, 0x46, 0x17, 0xb9, 0xa1, 0x17, 0x0d,
	0x5f, 0x62, 0xfa, 0xfd, 0x29, 0xe4, 0x11, 0x6c, 0xa6, 0x86, 0x3f, 0xa1, 0x93, 0xdc, 0xe8, 0xdd,
	0x7d, 0xd8, 0x52, 0x85, 0x92, 0x33, 0xf7, 0xa0, 0xca, 0x16, 0x80, 0x34, 0xff, 0x57, 0xd3, 0xf8,
	0x31, 0x39, 0xa2, 0xb8, 0x91, 0x18, 0x2c, 0x83, 0x6b, 0x8b, 0xc4, 0x5a, 0x86, 0x43, 0x2d, 0x2d,
	0xf5, 0x9e, 0xc1, 0xa6, 0xa2, 0x68, 0x72, 0x92, 0x6a, 0x4a, 0x4e, 0x52, 0x82, 0xe2, 0x24, 0xb5,
	0xff, 0x2e, 0x58, 0xa7, 0x78, 0x42, 0x3c, 0x58, 0x3e, 0xd4, 0xa7, 0xb0, 0x63, 0x54, 0x79, 0x1b,
	0x33, 0xfe, 0x2e, 0xc6, 0x71, 0x34, 0xd8, 0x40, 0xaa, 0x27, 0x88, 0x2e, 0x83, 0x2b, 0x72, 0xde,
	0x2c, 0x4b, 0x45, 0xb1, 0x7a, 0x76, 0xa1, 0x3a, 0xf3, 0x46, 0xd1, 0xd4, 0x5c, 0xdd, 0x84, 0x4b,
	0xcb, 0x86, 0xac, 0x78, 0xa6, 0xaa, 0xfe, 0x50, 0x1a, 0xee, 0x65, 0x26, 0xb1, 0xa5, 0x0d, 0xe5,
	0x53, 0xdb, 0x9d, 0x60, 0xa5, 0x47, 0x57, 0xde, 0x61, 0x8f, 0xbe, 0x27, 0xf5, 0xe8, 0xdb, 0x62,
	0x8f, 0xd6, 0x03, 0xf2, 0xe6, 0x9d, 0xba, 0x4a, 0x3a, 0x75, 0x1f, 0xb6, 0x35, 0xd8, 0x45, 0x95,
	0xd8, 0x83, 0x0d, 0x32, 0x1c, 0xb9, 0xb8, 0xa9, 0x06, 0xee, 0xc0, 0xa6, 0x22, 0x93, 0x20, 0xca,
	0x2b, 0x36, 0xb3, 0xac, 0xf7, 0x57, 0x01, 0x2a, 0x2c, 0x71, 0xa5, 0x1e, 0xdd, 0x84, 0xb2, 0xb0,
	0xea, 0x11, 0x4b, 0x46, 0x38, 0x18, 0xfa, 0xce, 0x3c, 0xfb, 0x70, 0x75, 0x65, 0x0f, 0x2b, 0x2f,
	0xb7, 0x87, 0x55, 0xae, 0xdb, 0xc3, 0xaa, 0xcb, 0xed, 0x61, 0x2b, 0xfa, 0x1e, 0xf6, 0x38, 0x5d,
	0x43, 0x98, 0x37, 0x69, 0x5c, 0x52, 0x47, 0xe2, 0xcf, 0x70, 0x53, 0x76, 0xc4, 0x90, 0x9f, 0xbd,
	0x13, 0x58, 0x97, 0x60, 0x92, 0xd0, 0xed, 0x42, 0x85, 0x55, 0x7d, 0x92, 0xf1, 0x4a, 0xf3, 0xd8,
	0x63, 0x2b, 0x8b, 0x74, 0xb0, 0xf8, 0x41, 0x8e, 0xa1, 0xcd, 0xd9, 0x4b, 0x01, 0x9e, 0xc6, 0x03,
	0x5c, 0x6e, 0x45, 0x6f, 0x9a, 0xcf, 0x24, 0xd5, 0x0a, 0x24, 0xd5, 0x4e, 0x00, 0x89, 0x98, 0xcb,
	0xb5, 0xc5, 0xc3, 0x74, 0xec, 0xe7, 0x3a, 0xf7, 0x3e, 0xac, 0x4b, 0x12, 0xb9, 0x9b, 0xc1, 0x45,
	0x3a, 0xd4, 0xf2, 0xa0, 0xe8, 0x80, 0xcb, 0xdd, 0x0a, 0x6e, 0xea, 0x39, 0x68, 0xf8, 0x74, 0xd2,
	0x01, 0x4b, 0x45, 0xfa, 0x2e, 0x1b, 0x54, 0xec, 0xff, 0xff, 0xd0, 0x70, 0x8d, 0x2a, 0x6f, 0x33,
	0xdc, 0x3e, 0x88, 0xa7, 0x72, 0x9e, 0x1d, 0x62, 0xc0, 0x4f, 0x60, 0xd7, 0x2c, 0xba, 0xa0, 0x6f,
	0x0c, 0x7e, 0x6d, 0x41, 0xe9, 0xf4, 0xf9, 0x23, 0xd2, 0xda, 0x2a, 0xec, 0xb5, 0x01, 0x6d, 0x64,
	0x5d, 0x4d, 0x78, 0xb0, 0xb0, 0x36, 0x15, 0x6a, 0xf2, 0x5a, 0xf0, 0x3f, 0xf4, 0x00, 0xaa, 0xf1,
	0x0b, 0x02, 0x12, 0x45, 0xf8, 0x1b, 0x84, 0xb5, 0xa5, 0x92, 0x33, 0xd5, 0x73, 0x68, 0x29, 0xef,
	0x05, 0x68, 0x3f, 0x15, 0x36, 0xbf, 0x41, 0x58, 0x07, 0xb9, 0xfc, 0x0c, 0xf5, 0x73, 0x58, 0x49,
	0xee, 0xd8, 0x28, 0x3b, 0x5a, 0xbe, 0xa8, 0x5b, 0xdb, 0x1a, 0x3d, 0xd3, 0x7e, 0x08, 0xf5, 0xec,
	0x61, 0x01, 0x75, 0xf9, 0x69, 0xf2, 0x23, 0x85, 0x75, 0xc3, 0xc0, 0x11, 0x31, 0xb2, 0xf7, 0x03,
	0x8e, 0xa1, 0xbe, 0x44, 0x70, 0x0c, 0xed, 0xb1, 0x81, 0x60, 0x3c, 0x06, 0xe0, 0x77, 0x27, 0x94,
	0x89, 0x6a, 0xf7, 0x49, 0xcb, 0x32, 0xb1, 0x44, 0x18, 0xbe, 0x2f, 0x72, 0x18, 0x6d, 0x0f, 0xe7,
	0x30, 0xfa, 0x7a, 0x19, 0xc7, 0x34, 0xb9, 0x79, 0xf1, 0x98, 0xca, 0x17, 0x35, 0x1e, 0x53, 0xe5,
	0x8a, 0x16, 0xc7, 0x23, 0xbb, 0x74, 0xf0, 0x78, 0xa8, 0x17, 0x1b, 0x1e, 0x0f, 0xed, 0x86, 0x12,
	0x3b, 0xc2, 0x6f, 0x19, 0xdc, 0x11, 0xed, 0x6a, 0xc2, 0x1d, 0xd1, 0x2f, 0x25, 0x04, 0xe6, 0x47,
	0x58, 0x37, 0xec, 0xb8, 0x48, 0xbb, 0x6d, 0xe9, 0x95, 0x66, 0x1d, 0x2d, 0x94, 0xc9, 0x4e, 0xf8,
	0x01, 0x90, 0xbe, 0xdf, 0xa2, 0x9b, 0x59, 0xc6, 0xe5, 0x6d, 0xcb, 0x56, 0x6f, 0x91, 0x48, 0x06,
	0xff, 0x02, 0xd6, 0xe4, 0x35, 0x16, 0xed, 0xa9, 0x76, 0x49, 0xb3, 0xc1, 0xda, 0xcf, 0x63, 0x67,
	0x90, 0xdf, 0xc1, 0xaa, 0xb4, 0xa7, 0xa2, 0x5d, 0xc5, 0x12, 0x19, 0x70, 0x2f, 0x87, 0x2b, 0xc6,
	0xd8, 0xb0, 0x76, 0xf2, 0x18, 0xe7, 0xaf, 0xb1, 0x3c, 0xc6, 0x0b, 0xf6, 0xd6, 0xb8, 0x71, 0x28,
	0xbb, 0x11, 0xda, 0x5f, 0xbc, 0x8b, 0xf1, 0xc6, 0x91, 0xb3, 0x54, 0xc5, 0x71, 0x90, 0xb6, 0x23,
	0x1e, 0x07, 0xd3, 0x62, 0xc5, 0xe3, 0x60, 0x5c, 0xa9, 0x08, 0xde, 0xd7, 0xd0, 0x10, 0x16, 0x06,
	0xa4, 0x14, 0xaa, 0x38, 0xeb, 0xac, 0x1d, 0x23, 0x4f, 0x44, 0x12, 0xe6, 0x17, 0x52, 0x6a, 0xd5,
	0x8c, 0x64, 0x18, 0x78, 0x04, 0xe9, 0x0b, 0xa8, 0xa5, 0x0b, 0x07, 0x12, 0x2b, 0x56, 0xc2, 0xe8,
	0xea, 0x0c, 0xb1, 0x0e, 0xf9, 0xae, 0x80, 0xa4, 0x92, 0x95, 0xd3, 0xc4, 0x32, 0xb1, 0x44, 0x8f,
	0x84, 0xdd, 0x00, 0x29, 0x45, 0x6b, 0xf6, 0xc8, 0xb0, 0x4c, 0x10, 0xa4, 0x21, 0x6c, 0x98, 0x86,
	0x1e, 0x3a, 0xd2, 0xce, 0x37, 0x64, 0xc5, 0xad, 0xc5, 0x42, 0x62, 0x4a, 0x1b, 0x06, 0x3b, 0x12,
	0x4b, 0x36, 0xef, 0x88, 0xa3, 0x85, 0x32, 0xe9, 0x09, 0x97, 0x55, 0xb6, 0xd7, 0x9e, 0xfc, 0x1b,
	0x00, 0x00, 0xff, 0xff, 0xf0, 0xa7, 0xc7, 0x85, 0x6a, 0x18, 0x00, 0x00,
}
