// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/piotrkowalczuk/charon/pb/rpc/charond/v1/permission.proto

package charond // import "github.com/piotrkowalczuk/charon/pb/rpc/charond/v1"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import ntypes "github.com/piotrkowalczuk/ntypes"
import qtypes "github.com/piotrkowalczuk/qtypes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RegisterPermissionsRequest struct {
	Permissions          []string `protobuf:"bytes,1,rep,name=permissions,proto3" json:"permissions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterPermissionsRequest) Reset()         { *m = RegisterPermissionsRequest{} }
func (m *RegisterPermissionsRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterPermissionsRequest) ProtoMessage()    {}
func (*RegisterPermissionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_permission_466dba486a6a79c2, []int{0}
}
func (m *RegisterPermissionsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterPermissionsRequest.Unmarshal(m, b)
}
func (m *RegisterPermissionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterPermissionsRequest.Marshal(b, m, deterministic)
}
func (dst *RegisterPermissionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterPermissionsRequest.Merge(dst, src)
}
func (m *RegisterPermissionsRequest) XXX_Size() int {
	return xxx_messageInfo_RegisterPermissionsRequest.Size(m)
}
func (m *RegisterPermissionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterPermissionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterPermissionsRequest proto.InternalMessageInfo

func (m *RegisterPermissionsRequest) GetPermissions() []string {
	if m != nil {
		return m.Permissions
	}
	return nil
}

type RegisterPermissionsResponse struct {
	Created              int64    `protobuf:"varint,1,opt,name=created,proto3" json:"created,omitempty"`
	Removed              int64    `protobuf:"varint,2,opt,name=removed,proto3" json:"removed,omitempty"`
	Untouched            int64    `protobuf:"varint,3,opt,name=untouched,proto3" json:"untouched,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterPermissionsResponse) Reset()         { *m = RegisterPermissionsResponse{} }
func (m *RegisterPermissionsResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterPermissionsResponse) ProtoMessage()    {}
func (*RegisterPermissionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_permission_466dba486a6a79c2, []int{1}
}
func (m *RegisterPermissionsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterPermissionsResponse.Unmarshal(m, b)
}
func (m *RegisterPermissionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterPermissionsResponse.Marshal(b, m, deterministic)
}
func (dst *RegisterPermissionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterPermissionsResponse.Merge(dst, src)
}
func (m *RegisterPermissionsResponse) XXX_Size() int {
	return xxx_messageInfo_RegisterPermissionsResponse.Size(m)
}
func (m *RegisterPermissionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterPermissionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterPermissionsResponse proto.InternalMessageInfo

func (m *RegisterPermissionsResponse) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *RegisterPermissionsResponse) GetRemoved() int64 {
	if m != nil {
		return m.Removed
	}
	return 0
}

func (m *RegisterPermissionsResponse) GetUntouched() int64 {
	if m != nil {
		return m.Untouched
	}
	return 0
}

type ListPermissionsRequest struct {
	Subsystem            *qtypes.String    `protobuf:"bytes,1,opt,name=subsystem,proto3" json:"subsystem,omitempty"`
	Module               *qtypes.String    `protobuf:"bytes,2,opt,name=module,proto3" json:"module,omitempty"`
	Action               *qtypes.String    `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	CreatedAt            *qtypes.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	CreatedBy            *qtypes.Int64     `protobuf:"bytes,5,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	Offset               *ntypes.Int64     `protobuf:"bytes,100,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit                *ntypes.Int64     `protobuf:"bytes,101,opt,name=limit,proto3" json:"limit,omitempty"`
	Sort                 map[string]bool   `protobuf:"bytes,102,rep,name=sort,proto3" json:"sort,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // Deprecated: Do not use.
	OrderBy              []*Order          `protobuf:"bytes,103,rep,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ListPermissionsRequest) Reset()         { *m = ListPermissionsRequest{} }
func (m *ListPermissionsRequest) String() string { return proto.CompactTextString(m) }
func (*ListPermissionsRequest) ProtoMessage()    {}
func (*ListPermissionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_permission_466dba486a6a79c2, []int{2}
}
func (m *ListPermissionsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPermissionsRequest.Unmarshal(m, b)
}
func (m *ListPermissionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPermissionsRequest.Marshal(b, m, deterministic)
}
func (dst *ListPermissionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPermissionsRequest.Merge(dst, src)
}
func (m *ListPermissionsRequest) XXX_Size() int {
	return xxx_messageInfo_ListPermissionsRequest.Size(m)
}
func (m *ListPermissionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPermissionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListPermissionsRequest proto.InternalMessageInfo

func (m *ListPermissionsRequest) GetSubsystem() *qtypes.String {
	if m != nil {
		return m.Subsystem
	}
	return nil
}

func (m *ListPermissionsRequest) GetModule() *qtypes.String {
	if m != nil {
		return m.Module
	}
	return nil
}

func (m *ListPermissionsRequest) GetAction() *qtypes.String {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *ListPermissionsRequest) GetCreatedAt() *qtypes.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *ListPermissionsRequest) GetCreatedBy() *qtypes.Int64 {
	if m != nil {
		return m.CreatedBy
	}
	return nil
}

func (m *ListPermissionsRequest) GetOffset() *ntypes.Int64 {
	if m != nil {
		return m.Offset
	}
	return nil
}

func (m *ListPermissionsRequest) GetLimit() *ntypes.Int64 {
	if m != nil {
		return m.Limit
	}
	return nil
}

// Deprecated: Do not use.
func (m *ListPermissionsRequest) GetSort() map[string]bool {
	if m != nil {
		return m.Sort
	}
	return nil
}

func (m *ListPermissionsRequest) GetOrderBy() []*Order {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

type ListPermissionsResponse struct {
	Permissions          []string `protobuf:"bytes,1,rep,name=permissions,proto3" json:"permissions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListPermissionsResponse) Reset()         { *m = ListPermissionsResponse{} }
func (m *ListPermissionsResponse) String() string { return proto.CompactTextString(m) }
func (*ListPermissionsResponse) ProtoMessage()    {}
func (*ListPermissionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_permission_466dba486a6a79c2, []int{3}
}
func (m *ListPermissionsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPermissionsResponse.Unmarshal(m, b)
}
func (m *ListPermissionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPermissionsResponse.Marshal(b, m, deterministic)
}
func (dst *ListPermissionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPermissionsResponse.Merge(dst, src)
}
func (m *ListPermissionsResponse) XXX_Size() int {
	return xxx_messageInfo_ListPermissionsResponse.Size(m)
}
func (m *ListPermissionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPermissionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListPermissionsResponse proto.InternalMessageInfo

func (m *ListPermissionsResponse) GetPermissions() []string {
	if m != nil {
		return m.Permissions
	}
	return nil
}

type GetPermissionRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPermissionRequest) Reset()         { *m = GetPermissionRequest{} }
func (m *GetPermissionRequest) String() string { return proto.CompactTextString(m) }
func (*GetPermissionRequest) ProtoMessage()    {}
func (*GetPermissionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_permission_466dba486a6a79c2, []int{4}
}
func (m *GetPermissionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPermissionRequest.Unmarshal(m, b)
}
func (m *GetPermissionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPermissionRequest.Marshal(b, m, deterministic)
}
func (dst *GetPermissionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPermissionRequest.Merge(dst, src)
}
func (m *GetPermissionRequest) XXX_Size() int {
	return xxx_messageInfo_GetPermissionRequest.Size(m)
}
func (m *GetPermissionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPermissionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPermissionRequest proto.InternalMessageInfo

func (m *GetPermissionRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetPermissionResponse struct {
	Permission           string   `protobuf:"bytes,1,opt,name=permission,proto3" json:"permission,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPermissionResponse) Reset()         { *m = GetPermissionResponse{} }
func (m *GetPermissionResponse) String() string { return proto.CompactTextString(m) }
func (*GetPermissionResponse) ProtoMessage()    {}
func (*GetPermissionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_permission_466dba486a6a79c2, []int{5}
}
func (m *GetPermissionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPermissionResponse.Unmarshal(m, b)
}
func (m *GetPermissionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPermissionResponse.Marshal(b, m, deterministic)
}
func (dst *GetPermissionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPermissionResponse.Merge(dst, src)
}
func (m *GetPermissionResponse) XXX_Size() int {
	return xxx_messageInfo_GetPermissionResponse.Size(m)
}
func (m *GetPermissionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPermissionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPermissionResponse proto.InternalMessageInfo

func (m *GetPermissionResponse) GetPermission() string {
	if m != nil {
		return m.Permission
	}
	return ""
}

func init() {
	proto.RegisterType((*RegisterPermissionsRequest)(nil), "charon.rpc.charond.v1.RegisterPermissionsRequest")
	proto.RegisterType((*RegisterPermissionsResponse)(nil), "charon.rpc.charond.v1.RegisterPermissionsResponse")
	proto.RegisterType((*ListPermissionsRequest)(nil), "charon.rpc.charond.v1.ListPermissionsRequest")
	proto.RegisterMapType((map[string]bool)(nil), "charon.rpc.charond.v1.ListPermissionsRequest.SortEntry")
	proto.RegisterType((*ListPermissionsResponse)(nil), "charon.rpc.charond.v1.ListPermissionsResponse")
	proto.RegisterType((*GetPermissionRequest)(nil), "charon.rpc.charond.v1.GetPermissionRequest")
	proto.RegisterType((*GetPermissionResponse)(nil), "charon.rpc.charond.v1.GetPermissionResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PermissionManagerClient is the client API for PermissionManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PermissionManagerClient interface {
	Register(ctx context.Context, in *RegisterPermissionsRequest, opts ...grpc.CallOption) (*RegisterPermissionsResponse, error)
	List(ctx context.Context, in *ListPermissionsRequest, opts ...grpc.CallOption) (*ListPermissionsResponse, error)
	Get(ctx context.Context, in *GetPermissionRequest, opts ...grpc.CallOption) (*GetPermissionResponse, error)
}

type permissionManagerClient struct {
	cc *grpc.ClientConn
}

func NewPermissionManagerClient(cc *grpc.ClientConn) PermissionManagerClient {
	return &permissionManagerClient{cc}
}

func (c *permissionManagerClient) Register(ctx context.Context, in *RegisterPermissionsRequest, opts ...grpc.CallOption) (*RegisterPermissionsResponse, error) {
	out := new(RegisterPermissionsResponse)
	err := c.cc.Invoke(ctx, "/charon.rpc.charond.v1.PermissionManager/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionManagerClient) List(ctx context.Context, in *ListPermissionsRequest, opts ...grpc.CallOption) (*ListPermissionsResponse, error) {
	out := new(ListPermissionsResponse)
	err := c.cc.Invoke(ctx, "/charon.rpc.charond.v1.PermissionManager/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionManagerClient) Get(ctx context.Context, in *GetPermissionRequest, opts ...grpc.CallOption) (*GetPermissionResponse, error) {
	out := new(GetPermissionResponse)
	err := c.cc.Invoke(ctx, "/charon.rpc.charond.v1.PermissionManager/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PermissionManagerServer is the server API for PermissionManager service.
type PermissionManagerServer interface {
	Register(context.Context, *RegisterPermissionsRequest) (*RegisterPermissionsResponse, error)
	List(context.Context, *ListPermissionsRequest) (*ListPermissionsResponse, error)
	Get(context.Context, *GetPermissionRequest) (*GetPermissionResponse, error)
}

func RegisterPermissionManagerServer(s *grpc.Server, srv PermissionManagerServer) {
	s.RegisterService(&_PermissionManager_serviceDesc, srv)
}

func _PermissionManager_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionManagerServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/charon.rpc.charond.v1.PermissionManager/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionManagerServer).Register(ctx, req.(*RegisterPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionManager_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionManagerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/charon.rpc.charond.v1.PermissionManager/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionManagerServer).List(ctx, req.(*ListPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionManager_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionManagerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/charon.rpc.charond.v1.PermissionManager/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionManagerServer).Get(ctx, req.(*GetPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PermissionManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "charon.rpc.charond.v1.PermissionManager",
	HandlerType: (*PermissionManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _PermissionManager_Register_Handler,
		},
		{
			MethodName: "List",
			Handler:    _PermissionManager_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _PermissionManager_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/piotrkowalczuk/charon/pb/rpc/charond/v1/permission.proto",
}

func init() {
	proto.RegisterFile("github.com/piotrkowalczuk/charon/pb/rpc/charond/v1/permission.proto", fileDescriptor_permission_466dba486a6a79c2)
}

var fileDescriptor_permission_466dba486a6a79c2 = []byte{
	// 601 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0x6f, 0x6b, 0xd4, 0x4e,
	0x10, 0xc7, 0x7f, 0x49, 0xae, 0xd7, 0xcb, 0x94, 0x5f, 0x69, 0xd7, 0x56, 0x43, 0x2c, 0x72, 0x44,
	0x2c, 0x05, 0x6b, 0x62, 0x4f, 0xf1, 0xa4, 0x05, 0xc5, 0x13, 0x29, 0x8a, 0xd2, 0x92, 0xfa, 0xc8,
	0x27, 0x9a, 0x3f, 0xdb, 0x74, 0xb9, 0xcb, 0x6e, 0xba, 0xbb, 0x39, 0x89, 0x6f, 0xc1, 0xd7, 0xe7,
	0xfb, 0x91, 0x24, 0x9b, 0xbb, 0xc3, 0xe6, 0xb0, 0xe7, 0xa3, 0x64, 0x66, 0x3e, 0xdf, 0x99, 0xc9,
	0xec, 0x64, 0xe1, 0x6d, 0x42, 0xe4, 0x55, 0x1e, 0xba, 0x11, 0x4b, 0xbd, 0x8c, 0x30, 0xc9, 0xc7,
	0xec, 0x7b, 0x30, 0x89, 0x7e, 0xe4, 0x63, 0x2f, 0xba, 0x0a, 0x38, 0xa3, 0x5e, 0x16, 0x7a, 0x3c,
	0x8b, 0x94, 0x15, 0x7b, 0xd3, 0x23, 0x2f, 0xc3, 0x3c, 0x25, 0x42, 0x10, 0x46, 0xdd, 0x8c, 0x33,
	0xc9, 0xd0, 0x6e, 0x1d, 0x74, 0x79, 0x16, 0xb9, 0x8a, 0x73, 0xa7, 0x47, 0xf6, 0xeb, 0x7f, 0xc8,
	0x1d, 0xb1, 0x34, 0x6d, 0xf2, 0xda, 0x77, 0xae, 0x65, 0x91, 0x61, 0xe1, 0xd5, 0x8f, 0xc6, 0x49,
	0x6b, 0x27, 0x5d, 0x70, 0x3a, 0xaf, 0xc0, 0xf6, 0x71, 0x42, 0x84, 0xc4, 0xfc, 0x7c, 0xd6, 0x9d,
	0xf0, 0xf1, 0x75, 0x8e, 0x85, 0x44, 0x7d, 0xd8, 0x98, 0xf7, 0x2c, 0x2c, 0xad, 0x6f, 0x1c, 0x98,
	0xfe, 0xa2, 0xcb, 0x61, 0x70, 0xbf, 0x55, 0x2f, 0x32, 0x46, 0x05, 0x46, 0x16, 0xac, 0x47, 0x1c,
	0x07, 0x12, 0xc7, 0x96, 0xd6, 0xd7, 0x0e, 0x0c, 0xbf, 0x31, 0xcb, 0x08, 0xc7, 0x29, 0x9b, 0xe2,
	0xd8, 0xd2, 0xeb, 0x88, 0x32, 0xd1, 0x1e, 0x98, 0x39, 0x95, 0x2c, 0x8f, 0xae, 0x70, 0x6c, 0x19,
	0x55, 0x6c, 0xee, 0x70, 0x7e, 0x76, 0xe0, 0xee, 0x47, 0x22, 0x64, 0x4b, 0xb7, 0x87, 0x60, 0x8a,
	0x3c, 0x14, 0x85, 0x90, 0x38, 0xad, 0xca, 0x6d, 0x0c, 0x36, 0x5d, 0x35, 0x82, 0x0b, 0xc9, 0x09,
	0x4d, 0xfc, 0x39, 0x80, 0xf6, 0xa1, 0x9b, 0xb2, 0x38, 0x9f, 0xe0, 0xaa, 0xfe, 0x4d, 0x54, 0x45,
	0x4b, 0x2e, 0x88, 0x24, 0x61, 0xb4, 0xea, 0xa5, 0x85, 0xab, 0xa3, 0xe8, 0x29, 0x80, 0xfa, 0xb6,
	0xaf, 0x81, 0xb4, 0x3a, 0x15, 0xbb, 0xdd, 0xb0, 0x9f, 0x49, 0x8a, 0x85, 0x0c, 0xd2, 0xcc, 0x37,
	0x15, 0xf4, 0xa6, 0xec, 0x77, 0xa6, 0x08, 0x0b, 0x6b, 0xad, 0x52, 0xfc, 0xdf, 0x28, 0xde, 0x53,
	0xf9, 0xe2, 0xf9, 0x8c, 0x1e, 0x15, 0xe8, 0x11, 0x74, 0xd9, 0xe5, 0xa5, 0xc0, 0xd2, 0x8a, 0x15,
	0x49, 0x17, 0x49, 0x15, 0x44, 0x0f, 0x61, 0x6d, 0x42, 0x52, 0x22, 0x2d, 0xdc, 0x46, 0xd5, 0x31,
	0x74, 0x06, 0x1d, 0xc1, 0xb8, 0xb4, 0x2e, 0xfb, 0xc6, 0xc1, 0xc6, 0x60, 0xe8, 0xb6, 0xae, 0xa1,
	0xdb, 0x3e, 0x66, 0xf7, 0x82, 0x71, 0xf9, 0x8e, 0x4a, 0x5e, 0x8c, 0x74, 0x4b, 0xf3, 0xab, 0x44,
	0x68, 0x08, 0x3d, 0xc6, 0x63, 0xcc, 0xcb, 0x0f, 0x49, 0xaa, 0xa4, 0x7b, 0x4b, 0x92, 0x9e, 0x95,
	0x98, 0xbf, 0x5e, 0xd1, 0xa3, 0xc2, 0x1e, 0x82, 0x39, 0xcb, 0x87, 0xb6, 0xc0, 0x18, 0xe3, 0xa2,
	0x3a, 0x3a, 0xd3, 0x2f, 0x5f, 0xd1, 0x0e, 0xac, 0x4d, 0x83, 0x49, 0x5e, 0x9f, 0x51, 0xcf, 0xaf,
	0x8d, 0x63, 0xfd, 0xa5, 0xf6, 0xa1, 0xd3, 0xeb, 0x6e, 0xc5, 0xce, 0x09, 0xdc, 0xbb, 0xd1, 0xa5,
	0x5a, 0xbd, 0xbf, 0xef, 0xee, 0x3e, 0xec, 0x9c, 0xe2, 0x05, 0x6d, 0xb3, 0x47, 0x9b, 0xa0, 0x93,
	0x66, 0x5f, 0x75, 0x12, 0x3b, 0x43, 0xd8, 0xfd, 0x83, 0x53, 0x25, 0x1e, 0x00, 0xcc, 0xf3, 0xa9,
	0xb6, 0x17, 0x3c, 0x83, 0x5f, 0x3a, 0x6c, 0xcf, 0x65, 0x9f, 0x02, 0x1a, 0x24, 0x98, 0x23, 0x01,
	0xbd, 0xe6, 0x97, 0x41, 0x47, 0x4b, 0xa6, 0xb4, 0xfc, 0x9f, 0xb4, 0x07, 0xab, 0x48, 0xea, 0x46,
	0x9d, 0xff, 0x50, 0x02, 0x9d, 0x72, 0x50, 0xe8, 0xc9, 0x4a, 0x67, 0x6d, 0xbb, 0xb7, 0xc5, 0x67,
	0x85, 0x42, 0x30, 0x4e, 0xb1, 0x44, 0x8f, 0x97, 0x08, 0xdb, 0x06, 0x6e, 0x1f, 0xde, 0x0e, 0x6e,
	0x6a, 0x8c, 0xbe, 0x41, 0x3f, 0x62, 0xa9, 0xdb, 0xdc, 0x92, 0x6d, 0xda, 0x73, 0xed, 0xcb, 0xf1,
	0xea, 0xb7, 0xe8, 0x89, 0x7a, 0x0d, 0xbb, 0xd5, 0xed, 0xf8, 0xec, 0x77, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x3b, 0xa1, 0x83, 0x12, 0xe6, 0x05, 0x00, 0x00,
}
