// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: github.com/piotrkowalczuk/charon/pb/rpc/charond/v1/group.proto

package charond

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GroupManager_Create_FullMethodName          = "/charon.rpc.charond.v1.GroupManager/Create"
	GroupManager_Modify_FullMethodName          = "/charon.rpc.charond.v1.GroupManager/Modify"
	GroupManager_Get_FullMethodName             = "/charon.rpc.charond.v1.GroupManager/Get"
	GroupManager_List_FullMethodName            = "/charon.rpc.charond.v1.GroupManager/List"
	GroupManager_Delete_FullMethodName          = "/charon.rpc.charond.v1.GroupManager/Delete"
	GroupManager_ListPermissions_FullMethodName = "/charon.rpc.charond.v1.GroupManager/ListPermissions"
	GroupManager_SetPermissions_FullMethodName  = "/charon.rpc.charond.v1.GroupManager/SetPermissions"
)

// GroupManagerClient is the client API for GroupManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupManagerClient interface {
	Create(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error)
	Modify(ctx context.Context, in *ModifyGroupRequest, opts ...grpc.CallOption) (*ModifyGroupResponse, error)
	Get(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupResponse, error)
	List(ctx context.Context, in *ListGroupsRequest, opts ...grpc.CallOption) (*ListGroupsResponse, error)
	Delete(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	ListPermissions(ctx context.Context, in *ListGroupPermissionsRequest, opts ...grpc.CallOption) (*ListGroupPermissionsResponse, error)
	SetPermissions(ctx context.Context, in *SetGroupPermissionsRequest, opts ...grpc.CallOption) (*SetGroupPermissionsResponse, error)
}

type groupManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupManagerClient(cc grpc.ClientConnInterface) GroupManagerClient {
	return &groupManagerClient{cc}
}

func (c *groupManagerClient) Create(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateGroupResponse)
	err := c.cc.Invoke(ctx, GroupManager_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupManagerClient) Modify(ctx context.Context, in *ModifyGroupRequest, opts ...grpc.CallOption) (*ModifyGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ModifyGroupResponse)
	err := c.cc.Invoke(ctx, GroupManager_Modify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupManagerClient) Get(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGroupResponse)
	err := c.cc.Invoke(ctx, GroupManager_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupManagerClient) List(ctx context.Context, in *ListGroupsRequest, opts ...grpc.CallOption) (*ListGroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListGroupsResponse)
	err := c.cc.Invoke(ctx, GroupManager_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupManagerClient) Delete(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, GroupManager_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupManagerClient) ListPermissions(ctx context.Context, in *ListGroupPermissionsRequest, opts ...grpc.CallOption) (*ListGroupPermissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListGroupPermissionsResponse)
	err := c.cc.Invoke(ctx, GroupManager_ListPermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupManagerClient) SetPermissions(ctx context.Context, in *SetGroupPermissionsRequest, opts ...grpc.CallOption) (*SetGroupPermissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetGroupPermissionsResponse)
	err := c.cc.Invoke(ctx, GroupManager_SetPermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupManagerServer is the server API for GroupManager service.
// All implementations must embed UnimplementedGroupManagerServer
// for forward compatibility.
type GroupManagerServer interface {
	Create(context.Context, *CreateGroupRequest) (*CreateGroupResponse, error)
	Modify(context.Context, *ModifyGroupRequest) (*ModifyGroupResponse, error)
	Get(context.Context, *GetGroupRequest) (*GetGroupResponse, error)
	List(context.Context, *ListGroupsRequest) (*ListGroupsResponse, error)
	Delete(context.Context, *DeleteGroupRequest) (*wrapperspb.BoolValue, error)
	ListPermissions(context.Context, *ListGroupPermissionsRequest) (*ListGroupPermissionsResponse, error)
	SetPermissions(context.Context, *SetGroupPermissionsRequest) (*SetGroupPermissionsResponse, error)
	mustEmbedUnimplementedGroupManagerServer()
}

// UnimplementedGroupManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGroupManagerServer struct{}

func (UnimplementedGroupManagerServer) Create(context.Context, *CreateGroupRequest) (*CreateGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedGroupManagerServer) Modify(context.Context, *ModifyGroupRequest) (*ModifyGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Modify not implemented")
}
func (UnimplementedGroupManagerServer) Get(context.Context, *GetGroupRequest) (*GetGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedGroupManagerServer) List(context.Context, *ListGroupsRequest) (*ListGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedGroupManagerServer) Delete(context.Context, *DeleteGroupRequest) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedGroupManagerServer) ListPermissions(context.Context, *ListGroupPermissionsRequest) (*ListGroupPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPermissions not implemented")
}
func (UnimplementedGroupManagerServer) SetPermissions(context.Context, *SetGroupPermissionsRequest) (*SetGroupPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPermissions not implemented")
}
func (UnimplementedGroupManagerServer) mustEmbedUnimplementedGroupManagerServer() {}
func (UnimplementedGroupManagerServer) testEmbeddedByValue()                      {}

// UnsafeGroupManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupManagerServer will
// result in compilation errors.
type UnsafeGroupManagerServer interface {
	mustEmbedUnimplementedGroupManagerServer()
}

func RegisterGroupManagerServer(s grpc.ServiceRegistrar, srv GroupManagerServer) {
	// If the following call pancis, it indicates UnimplementedGroupManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GroupManager_ServiceDesc, srv)
}

func _GroupManager_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupManagerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupManager_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupManagerServer).Create(ctx, req.(*CreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupManager_Modify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupManagerServer).Modify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupManager_Modify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupManagerServer).Modify(ctx, req.(*ModifyGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupManager_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupManagerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupManager_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupManagerServer).Get(ctx, req.(*GetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupManager_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupManagerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupManager_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupManagerServer).List(ctx, req.(*ListGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupManager_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupManagerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupManager_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupManagerServer).Delete(ctx, req.(*DeleteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupManager_ListPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupManagerServer).ListPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupManager_ListPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupManagerServer).ListPermissions(ctx, req.(*ListGroupPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupManager_SetPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroupPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupManagerServer).SetPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupManager_SetPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupManagerServer).SetPermissions(ctx, req.(*SetGroupPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupManager_ServiceDesc is the grpc.ServiceDesc for GroupManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "charon.rpc.charond.v1.GroupManager",
	HandlerType: (*GroupManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _GroupManager_Create_Handler,
		},
		{
			MethodName: "Modify",
			Handler:    _GroupManager_Modify_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _GroupManager_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _GroupManager_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _GroupManager_Delete_Handler,
		},
		{
			MethodName: "ListPermissions",
			Handler:    _GroupManager_ListPermissions_Handler,
		},
		{
			MethodName: "SetPermissions",
			Handler:    _GroupManager_SetPermissions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/piotrkowalczuk/charon/pb/rpc/charond/v1/group.proto",
}
