// Code generated by mockery v1.0.0. DO NOT EDIT.

package charontest

import charonrpc "github.com/piotrkowalczuk/charon/charonrpc"
import context "context"
import grpc "google.golang.org/grpc"
import mock "github.com/stretchr/testify/mock"
import wrappers "github.com/golang/protobuf/ptypes/wrappers"

// OAuth2Client is an autogenerated mock type for the OAuth2Client type
type OAuth2Client struct {
	mock.Mock
}

// Authorization provides a mock function with given fields: ctx, in, opts
func (_m *OAuth2Client) Authorization(ctx context.Context, in *charonrpc.AuthorizationRequest, opts ...grpc.CallOption) (*wrappers.StringValue, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *wrappers.StringValue
	if rf, ok := ret.Get(0).(func(context.Context, *charonrpc.AuthorizationRequest, ...grpc.CallOption) *wrappers.StringValue); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wrappers.StringValue)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *charonrpc.AuthorizationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
